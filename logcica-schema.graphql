input VehicleCapacityWeightUnitQueryInput {
  symbol_in: [String]
  symbol_exists: Boolean
  symbol_ne: String
  symbol_gte: String
  symbol_lte: String
  symbol_gt: String
  symbol_lt: String
  symbol: String
  OR: [VehicleCapacityWeightUnitQueryInput!]
  symbol_nin: [String]
  AND: [VehicleCapacityWeightUnitQueryInput!]
}

input TransactionChannelExternalTargetEnterpriseInsertInput {
  id: String
}

input PlaceAddressUpdateInput {
  country_unset: Boolean
  locality: String
  locality_unset: Boolean
  postalCode: String
  postalCode_unset: Boolean
  street: String
  street_unset: Boolean
  country: PlaceAddressCountryUpdateInput
}

input VehicleCostDriverUnitQueryInput {
  AND: [VehicleCostDriverUnitQueryInput!]
  symbol_exists: Boolean
  symbol_gt: String
  symbol_lt: String
  symbol_lte: String
  symbol_in: [String]
  OR: [VehicleCostDriverUnitQueryInput!]
  symbol: String
  symbol_gte: String
  symbol_nin: [String]
  symbol_ne: String
}

input OrderLineItemQueryInput {
  _id_nin: [ObjectId]
  AND: [OrderLineItemQueryInput!]
  OR: [OrderLineItemQueryInput!]
  _id: ObjectId
  _id_lte: ObjectId
  _id_gt: ObjectId
  _id_exists: Boolean
  _id_lt: ObjectId
  _id_ne: ObjectId
  _id_gte: ObjectId
  _id_in: [ObjectId]
}

enum WorkspaceSortByInput {
  PLACE_DESC
  _ID_ASC
  TYPE_ASC
  NAME_DESC
  PERSON_DESC
  PLACE_ASC
  _ID_DESC
  TYPE_DESC
  NAME_ASC
  PERSON_ASC
}

input ProductCategoryUpdateInput {
  _id: ObjectId
  _id_unset: Boolean
  name_unset: Boolean
  classification_unset: Boolean
  hierarchyLevel: Int
  id_unset: Boolean
  ids_unset: Boolean
  hierarchyLevel_inc: Int
  ids: [String]
  classification: ProductCategoryClassificationRelationInput
  children: ProductCategoryChildrenRelationInput
  children_unset: Boolean
  id: String
  name: String
  hierarchyLevel_unset: Boolean
}

input VehicleCompartmentCapacityWeightUpdateInput {
  unit: VehicleCompartmentCapacityWeightUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input TourStopDeliveryUpdateInput {
  shipments: [ObjectId]
  shipments_unset: Boolean
}

input ShipmentDeliveryQueryInput {
  place_exists: Boolean
  AND: [ShipmentDeliveryQueryInput!]
  OR: [ShipmentDeliveryQueryInput!]
  place: PlaceQueryInput
}

type TourLegDistanceUnit {
  symbol: String
}

input OrderShippingAddressGeoQueryInput {
  type_gte: String
  type_lt: String
  type_gt: String
  coordinates_exists: Boolean
  type: String
  type_nin: [String]
  type_lte: String
  coordinates: [Float]
  coordinates_nin: [Float]
  OR: [OrderShippingAddressGeoQueryInput!]
  coordinates_in: [Float]
  AND: [OrderShippingAddressGeoQueryInput!]
  type_ne: String
  type_in: [String]
  type_exists: Boolean
}

input CatalogItemInsertInput {
  weight: CatalogItemWeightInsertInput
  owner: CatalogItemOwnerInsertInput
  sku: String
  categories: [ObjectId]
  name: String
  product: CatalogItemProductRelationInput
  _id: ObjectId
  ids: [String]
  createdAt: DateTime
}

input TransactionChannelExternalTargetPlatformInsertInput {
  key: String
}

input VehicleCompartmentFeatureQueryInput {
  key_in: [String]
  name_nin: [String]
  key_gt: String
  name_ne: String
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  key_lte: String
  key_gte: String
  key_lt: String
  name_exists: Boolean
  name: String
  name_in: [String]
  key: String
  AND: [VehicleCompartmentFeatureQueryInput!]
  key_nin: [String]
  key_ne: String
  OR: [VehicleCompartmentFeatureQueryInput!]
  key_exists: Boolean
}

input CatalogItemWeightUnitInsertInput {
  code: String
}

input TransactionChannelExternalTargetMarketplaceUpdateInput {
  key: String
  key_unset: Boolean
}

input VehicleCompartmentCapacityWeightInsertInput {
  unit: VehicleCompartmentCapacityWeightUnitInsertInput
  value: Float
}

input TransactionChannelQueryInput {
  AND: [TransactionChannelQueryInput!]
  role: String
  role_nin: [String]
  role_in: [String]
  direction_lt: String
  resource_exists: Boolean
  externalTarget: TransactionChannelExternalTargetQueryInput
  role_gte: String
  _id_gte: ObjectId
  direction_nin: [String]
  role_gt: String
  role_lte: String
  direction_gt: String
  direction_exists: Boolean
  resource_gte: String
  filter: TransactionChannelFilterQueryInput
  resource: String
  resource_lt: String
  resource_nin: [String]
  role_exists: Boolean
  _id_ne: ObjectId
  role_ne: String
  direction_lte: String
  externalTarget_exists: Boolean
  internalTarget_exists: Boolean
  _id_lte: ObjectId
  resource_ne: String
  resource_gt: String
  _id_gt: ObjectId
  _id_lt: ObjectId
  OR: [TransactionChannelQueryInput!]
  resource_in: [String]
  _id_nin: [ObjectId]
  _id_in: [ObjectId]
  resource_lte: String
  direction: String
  _id_exists: Boolean
  filter_exists: Boolean
  direction_in: [String]
  direction_ne: String
  internalTarget: TransactionChannelInternalTargetQueryInput
  _id: ObjectId
  role_lt: String
  direction_gte: String
}

input PlaceAddressCountryQueryInput {
  code_nin: [String]
  code_lt: String
  ids: [String]
  name_lt: String
  ids_exists: Boolean
  code_in: [String]
  ids_nin: [String]
  name_gt: String
  name_gte: String
  code_gte: String
  name_nin: [String]
  AND: [PlaceAddressCountryQueryInput!]
  name: String
  code_gt: String
  code_ne: String
  ids_in: [String]
  name_exists: Boolean
  name_lte: String
  name_in: [String]
  code_exists: Boolean
  code_lte: String
  name_ne: String
  code: String
  OR: [PlaceAddressCountryQueryInput!]
}

input PlaceOwnerQueryInput {
  AND: [PlaceOwnerQueryInput!]
  OR: [PlaceOwnerQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
}

type VehicleCompartmentCapacityVolume {
  unit: VehicleCompartmentCapacityVolumeUnit
  value: Float
}

input TransactionChannelExternalTargetUpdateInput {
  marketplace: TransactionChannelExternalTargetMarketplaceUpdateInput
  marketplace_unset: Boolean
  platform: TransactionChannelExternalTargetPlatformUpdateInput
  platform_unset: Boolean
  enterprise: TransactionChannelExternalTargetEnterpriseUpdateInput
  enterprise_unset: Boolean
}

type ShippingMethodPickup {
  points: [ShippingMethodPickupPoint]
}

input VehicleCostResourceUnitQueryInput {
  symbol_gte: String
  OR: [VehicleCostResourceUnitQueryInput!]
  symbol_gt: String
  symbol_lt: String
  symbol: String
  symbol_lte: String
  symbol_in: [String]
  symbol_ne: String
  symbol_nin: [String]
  symbol_exists: Boolean
  AND: [VehicleCostResourceUnitQueryInput!]
}

input TransactionChannelExternalTargetEnterpriseQueryInput {
  id_nin: [String]
  id_lt: String
  id_lte: String
  AND: [TransactionChannelExternalTargetEnterpriseQueryInput!]
  id_ne: String
  id_exists: Boolean
  id_gte: String
  OR: [TransactionChannelExternalTargetEnterpriseQueryInput!]
  id: String
  id_gt: String
  id_in: [String]
}

enum CatalogItemSortByInput {
  CREATEDAT_ASC
  PRODUCT_ASC
  PRODUCT_DESC
  SKU_DESC
  NAME_DESC
  SKU_ASC
  _ID_ASC
  _ID_DESC
  CREATEDAT_DESC
  NAME_ASC
}

input TourLegPayloadWeightUnitInsertInput {
  symbol: String
}

input TourDurationUnitQueryInput {
  symbol_nin: [String]
  symbol_exists: Boolean
  symbol: String
  symbol_gt: String
  symbol_lt: String
  AND: [TourDurationUnitQueryInput!]
  symbol_in: [String]
  symbol_lte: String
  OR: [TourDurationUnitQueryInput!]
  symbol_ne: String
  symbol_gte: String
}

type ShipmentLineQuantity {
  value: Int
}

input CatalogItemWeightUpdateInput {
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: CatalogItemWeightUnitUpdateInput
}

input TourStopUpdateInput {
  estimatedTimeOfDeparture_unset: Boolean
  actualTimeOfArrival_unset: Boolean
  delivery: TourStopDeliveryUpdateInput
  estimatedTimeOfDeparture: String
  tasks_unset: Boolean
  actualTimeOfDeparture: String
  pickup: TourStopPickupUpdateInput
  pickup_unset: Boolean
  place_unset: Boolean
  delivery_unset: Boolean
  duration_unset: Boolean
  estimatedTimeOfArrival_unset: Boolean
  place: ObjectId
  actualTimeOfDeparture_unset: Boolean
  duration: TourStopDurationUpdateInput
  actualTimeOfArrival: String
  tasks: [TourStopTaskUpdateInput]
  estimatedTimeOfArrival: String
}

input PlaceQueryInput {
  name_lt: String
  OR: [PlaceQueryInput!]
  _id_gt: ObjectId
  owner_exists: Boolean
  gln_ne: String
  name_nin: [String]
  owner: PlaceOwnerQueryInput
  geo_exists: Boolean
  _id_lt: ObjectId
  _id_gte: ObjectId
  gln: String
  gln_lte: String
  name_gt: String
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
  gln_gt: String
  _id_lte: ObjectId
  name_ne: String
  ids_exists: Boolean
  name: String
  gln_exists: Boolean
  gln_gte: String
  gln_nin: [String]
  ids_nin: [String]
  gln_lt: String
  gln_in: [String]
  _id_ne: ObjectId
  ids: [String]
  ids_in: [String]
  name_lte: String
  _id_exists: Boolean
  AND: [PlaceQueryInput!]
  name_gte: String
  address_exists: Boolean
  name_exists: Boolean
  address: PlaceAddressQueryInput
  name_in: [String]
  _id: ObjectId
  geo: PlaceGeoQueryInput
}

input TourDistanceUnitQueryInput {
  symbol_ne: String
  symbol_exists: Boolean
  AND: [TourDistanceUnitQueryInput!]
  symbol: String
  symbol_gt: String
  symbol_lte: String
  symbol_in: [String]
  OR: [TourDistanceUnitQueryInput!]
  symbol_gte: String
  symbol_lt: String
  symbol_nin: [String]
}

input OrderLineQueryInput {
  quantity: OrderLineQuantityQueryInput
  name_nin: [String]
  gtin_nin: [String]
  sku_lte: String
  quantity_exists: Boolean
  sku_lt: String
  sku_nin: [String]
  name: String
  name_ne: String
  sku_gte: String
  name_exists: Boolean
  name_in: [String]
  name_lte: String
  sku_in: [String]
  gtin: String
  gtin_gt: String
  OR: [OrderLineQueryInput!]
  gtin_lte: String
  name_gte: String
  sku_ne: String
  sku_exists: Boolean
  product_exists: Boolean
  sku: String
  sku_gt: String
  name_lt: String
  name_gt: String
  price: OrderLinePriceQueryInput
  gtin_exists: Boolean
  gtin_ne: String
  price_exists: Boolean
  item: OrderLineItemQueryInput
  product: OrderLineProductQueryInput
  gtin_in: [String]
  gtin_gte: String
  gtin_lt: String
  AND: [OrderLineQueryInput!]
  item_exists: Boolean
}

input TransactionChannelExternalTargetInsertInput {
  marketplace: TransactionChannelExternalTargetMarketplaceInsertInput
  platform: TransactionChannelExternalTargetPlatformInsertInput
  enterprise: TransactionChannelExternalTargetEnterpriseInsertInput
}

input ShipmentPickupQueryInput {
  place_exists: Boolean
  AND: [ShipmentPickupQueryInput!]
  OR: [ShipmentPickupQueryInput!]
  place: PlaceQueryInput
}

type TourLegPayloadWeight {
  unit: TourLegPayloadWeightUnit
  value: Int
}

input VehicleCostResourceCurrencyInsertInput {
  symbol: String
}

input CodeListInsertInput {
  _id: ObjectId
  ids: [String]
  items: CodeListItemsRelationInput
  key: String
  name: String
}

input TourDistanceUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: TourDistanceUnitUpdateInput
  unit_unset: Boolean
}

input OrderLinePriceInsertInput {
  currency: OrderLinePriceCurrencyInsertInput
  value: Float
}

input ShipmentInsertInput {
  date: String
  delivery: ShipmentDeliveryInsertInput
  lines: [ShipmentLineInsertInput]
  pickup: ShipmentPickupInsertInput
  _id: ObjectId
}

input VehicleUpdateInput {
  _id_unset: Boolean
  features: [VehicleFeatureUpdateInput]
  weight_unset: Boolean
  model: VehicleModelUpdateInput
  type_unset: Boolean
  brand_unset: Boolean
  _id: ObjectId
  capacity: VehicleCapacityUpdateInput
  model_unset: Boolean
  compartments: [VehicleCompartmentUpdateInput]
  costs_unset: Boolean
  name_unset: Boolean
  brand: VehicleBrandUpdateInput
  costs: [VehicleCostUpdateInput]
  capacity_unset: Boolean
  features_unset: Boolean
  name: String
  type: String
  weight: VehicleWeightUpdateInput
  compartments_unset: Boolean
}

input TourLegPayloadUpdateInput {
  weight: TourLegPayloadWeightUpdateInput
  weight_unset: Boolean
  shipments: [ObjectId]
  shipments_unset: Boolean
  volume: TourLegPayloadVolumeUpdateInput
  volume_unset: Boolean
}

input OrderShippingAddressGeoInsertInput {
  coordinates: [Float]
  type: String
}

input TourLegQueryInput {
  origin_exists: Boolean
  distance_exists: Boolean
  distance: TourLegDistanceQueryInput
  payload_exists: Boolean
  AND: [TourLegQueryInput!]
  payload: TourLegPayloadQueryInput
  OR: [TourLegQueryInput!]
  destination: TourLegDestinationQueryInput
  duration: TourLegDurationQueryInput
  duration_exists: Boolean
  origin: TourLegOriginQueryInput
  destination_exists: Boolean
}

input VehicleFeatureQueryInput {
  name_lt: String
  key_nin: [String]
  key_gte: String
  key_lt: String
  key_gt: String
  key_lte: String
  name_ne: String
  OR: [VehicleFeatureQueryInput!]
  name_nin: [String]
  name_in: [String]
  name_gt: String
  name: String
  name_gte: String
  name_lte: String
  key_in: [String]
  name_exists: Boolean
  AND: [VehicleFeatureQueryInput!]
  key_exists: Boolean
  key_ne: String
  key: String
}

type VehicleCapacityVolumeUnit {
  symbol: String
}

input ProductClassificationQueryInput {
  key_lte: String
  _id_nin: [ObjectId]
  _id_gte: ObjectId
  key_gt: String
  key_exists: Boolean
  key_lt: String
  OR: [ProductClassificationQueryInput!]
  name_nin: [String]
  _id_ne: ObjectId
  key: String
  key_nin: [String]
  _id_lt: ObjectId
  name: String
  name_lt: String
  _id_gt: ObjectId
  name_gte: String
  AND: [ProductClassificationQueryInput!]
  _id_in: [ObjectId]
  name_exists: Boolean
  key_ne: String
  _id_exists: Boolean
  _id: ObjectId
  name_in: [String]
  key_in: [String]
  _id_lte: ObjectId
  name_ne: String
  name_gt: String
  name_lte: String
  key_gte: String
}

input VehicleCostDriverInsertInput {
  factor: Float
  type: String
  unit: VehicleCostDriverUnitInsertInput
}

input ProductCategoriesRelationInput {
  create: [ProductCategoryInsertInput]
  link: [ObjectId]
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

input TourStopQueryInput {
  estimatedTimeOfArrival_nin: [String]
  actualTimeOfArrival_in: [String]
  duration: TourStopDurationQueryInput
  estimatedTimeOfDeparture_nin: [String]
  actualTimeOfDeparture_gte: String
  AND: [TourStopQueryInput!]
  place: ObjectId
  estimatedTimeOfDeparture: String
  estimatedTimeOfArrival_gt: String
  actualTimeOfDeparture_nin: [String]
  pickup: TourStopPickupQueryInput
  place_gte: ObjectId
  estimatedTimeOfDeparture_in: [String]
  tasks_exists: Boolean
  actualTimeOfArrival_nin: [String]
  estimatedTimeOfDeparture_lt: String
  actualTimeOfArrival_gt: String
  actualTimeOfArrival_lte: String
  estimatedTimeOfArrival_gte: String
  duration_exists: Boolean
  actualTimeOfDeparture_ne: String
  pickup_exists: Boolean
  estimatedTimeOfArrival_in: [String]
  estimatedTimeOfDeparture_lte: String
  OR: [TourStopQueryInput!]
  estimatedTimeOfDeparture_gt: String
  actualTimeOfArrival_exists: Boolean
  actualTimeOfArrival_gte: String
  actualTimeOfDeparture_in: [String]
  estimatedTimeOfArrival_ne: String
  estimatedTimeOfArrival_lt: String
  place_lt: ObjectId
  estimatedTimeOfDeparture_gte: String
  actualTimeOfDeparture_gt: String
  actualTimeOfDeparture_exists: Boolean
  place_gt: ObjectId
  actualTimeOfArrival: String
  estimatedTimeOfArrival_lte: String
  estimatedTimeOfDeparture_ne: String
  place_nin: [ObjectId]
  estimatedTimeOfDeparture_exists: Boolean
  actualTimeOfDeparture_lte: String
  place_in: [ObjectId]
  estimatedTimeOfArrival_exists: Boolean
  actualTimeOfDeparture_lt: String
  place_lte: ObjectId
  place_ne: ObjectId
  actualTimeOfDeparture: String
  actualTimeOfArrival_ne: String
  tasks_nin: [TourStopTaskQueryInput]
  place_exists: Boolean
  tasks_in: [TourStopTaskQueryInput]
  delivery: TourStopDeliveryQueryInput
  estimatedTimeOfArrival: String
  delivery_exists: Boolean
  tasks: [TourStopTaskQueryInput]
  actualTimeOfArrival_lt: String
}

input VehicleQueryInput {
  brand: VehicleBrandQueryInput
  features_in: [VehicleFeatureQueryInput]
  compartments_exists: Boolean
  name_lt: String
  _id_nin: [ObjectId]
  type_lt: String
  name_gt: String
  _id: ObjectId
  capacity_exists: Boolean
  _id_exists: Boolean
  features_exists: Boolean
  name_ne: String
  type_exists: Boolean
  name_in: [String]
  name_nin: [String]
  type_ne: String
  model: VehicleModelQueryInput
  type_gte: String
  weight: VehicleWeightQueryInput
  type_gt: String
  OR: [VehicleQueryInput!]
  model_exists: Boolean
  type_lte: String
  costs_in: [VehicleCostQueryInput]
  features_nin: [VehicleFeatureQueryInput]
  capacity: VehicleCapacityQueryInput
  _id_lte: ObjectId
  type_nin: [String]
  compartments: [VehicleCompartmentQueryInput]
  _id_in: [ObjectId]
  brand_exists: Boolean
  _id_gt: ObjectId
  type_in: [String]
  name: String
  AND: [VehicleQueryInput!]
  compartments_in: [VehicleCompartmentQueryInput]
  name_gte: String
  _id_lt: ObjectId
  name_exists: Boolean
  _id_ne: ObjectId
  weight_exists: Boolean
  costs_nin: [VehicleCostQueryInput]
  type: String
  features: [VehicleFeatureQueryInput]
  name_lte: String
  costs: [VehicleCostQueryInput]
  compartments_nin: [VehicleCompartmentQueryInput]
  costs_exists: Boolean
  _id_gte: ObjectId
}

input CatalogItemQueryInput {
  name_in: [String]
  owner_exists: Boolean
  name: String
  categories: [ObjectId]
  categories_exists: Boolean
  createdAt_exists: Boolean
  createdAt_in: [DateTime]
  sku_gte: String
  createdAt_ne: DateTime
  name_gt: String
  _id_gt: ObjectId
  sku_lt: String
  weight_exists: Boolean
  OR: [CatalogItemQueryInput!]
  AND: [CatalogItemQueryInput!]
  sku_gt: String
  ids_in: [String]
  sku_ne: String
  ids: [String]
  name_gte: String
  _id_gte: ObjectId
  createdAt_gt: DateTime
  _id_lt: ObjectId
  _id_nin: [ObjectId]
  createdAt_lte: DateTime
  categories_nin: [ObjectId]
  _id_exists: Boolean
  name_lte: String
  product_exists: Boolean
  sku_in: [String]
  _id: ObjectId
  owner: CatalogItemOwnerQueryInput
  name_exists: Boolean
  createdAt: DateTime
  categories_in: [ObjectId]
  ids_exists: Boolean
  createdAt_gte: DateTime
  _id_ne: ObjectId
  name_lt: String
  name_nin: [String]
  ids_nin: [String]
  createdAt_nin: [DateTime]
  sku: String
  name_ne: String
  _id_in: [ObjectId]
  _id_lte: ObjectId
  sku_lte: String
  createdAt_lt: DateTime
  sku_exists: Boolean
  product: ProductQueryInput
  weight: CatalogItemWeightQueryInput
  sku_nin: [String]
}

input TourDistanceInsertInput {
  unit: TourDistanceUnitInsertInput
  value: Float
}

input OrderLinePriceCurrencyUpdateInput {
  code: String
  code_unset: Boolean
  symbol: String
  symbol_unset: Boolean
  text: String
  text_unset: Boolean
}

input TourStopDurationQueryInput {
  unit: TourStopDurationUnitQueryInput
  value: Float
  value_ne: Float
  OR: [TourStopDurationQueryInput!]
  value_lt: Float
  value_exists: Boolean
  value_gte: Float
  value_in: [Float]
  value_nin: [Float]
  unit_exists: Boolean
  value_lte: Float
  value_gt: Float
  AND: [TourStopDurationQueryInput!]
}

input TourLegPayloadWeightUnitQueryInput {
  symbol_exists: Boolean
  symbol_gte: String
  symbol_lte: String
  symbol_lt: String
  OR: [TourLegPayloadWeightUnitQueryInput!]
  symbol: String
  symbol_in: [String]
  symbol_nin: [String]
  AND: [TourLegPayloadWeightUnitQueryInput!]
  symbol_ne: String
  symbol_gt: String
}

input TourStopInsertInput {
  actualTimeOfDeparture: String
  estimatedTimeOfDeparture: String
  delivery: TourStopDeliveryInsertInput
  duration: TourStopDurationInsertInput
  estimatedTimeOfArrival: String
  place: ObjectId
  tasks: [TourStopTaskInsertInput]
  actualTimeOfArrival: String
  pickup: TourStopPickupInsertInput
}

input ShipmentDeliveryPlaceRelationInput {
  link: ObjectId
  create: PlaceInsertInput
}

input OrderLineUpdateInput {
  gtin_unset: Boolean
  sku: String
  item_unset: Boolean
  sku_unset: Boolean
  price_unset: Boolean
  product_unset: Boolean
  name: String
  name_unset: Boolean
  quantity_unset: Boolean
  quantity: OrderLineQuantityUpdateInput
  product: OrderLineProductUpdateInput
  item: OrderLineItemUpdateInput
  gtin: String
  price: OrderLinePriceUpdateInput
}

scalar ObjectId

input VehicleCostResourceCurrencyQueryInput {
  symbol_lt: String
  AND: [VehicleCostResourceCurrencyQueryInput!]
  symbol: String
  symbol_exists: Boolean
  symbol_ne: String
  symbol_lte: String
  symbol_gte: String
  symbol_in: [String]
  symbol_nin: [String]
  OR: [VehicleCostResourceCurrencyQueryInput!]
  symbol_gt: String
}

type VehicleCostDriver {
  factor: Float
  type: String
  unit: VehicleCostDriverUnit
}

input ShipmentPickupInsertInput {
  place: ShipmentPickupPlaceRelationInput
}

input CatalogItemUpdateInput {
  createdAt_unset: Boolean
  ids: [String]
  ids_unset: Boolean
  sku: String
  categories_unset: Boolean
  name: String
  product_unset: Boolean
  createdAt: DateTime
  _id: ObjectId
  owner_unset: Boolean
  owner: CatalogItemOwnerUpdateInput
  sku_unset: Boolean
  weight_unset: Boolean
  product: CatalogItemProductRelationInput
  _id_unset: Boolean
  name_unset: Boolean
  categories: [ObjectId]
  weight: CatalogItemWeightUpdateInput
}

input TourStopTaskDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type CatalogItemWeight {
  unit: CatalogItemWeightUnit
  value: Float
}

input TourLegDistanceInsertInput {
  unit: TourLegDistanceUnitInsertInput
  value: Float
}

type TransactionChannelExternalTarget {
  enterprise: TransactionChannelExternalTargetEnterprise
  marketplace: TransactionChannelExternalTargetMarketplace
  platform: TransactionChannelExternalTargetPlatform
}

type Code {
  _id: ObjectId
  key: String
  list: CodeList
  name: String
  symbol: String
}

input ShippingMethodQueryInput {
  type_exists: Boolean
  name: String
  name_lte: String
  pickup: ShippingMethodPickupQueryInput
  AND: [ShippingMethodQueryInput!]
  _id_lt: ObjectId
  description_in: [String]
  _id_lte: ObjectId
  type_gte: String
  ids: [String]
  description_nin: [String]
  name_lt: String
  type_in: [String]
  description: String
  type_nin: [String]
  owner: ShippingMethodOwnerQueryInput
  _id_ne: ObjectId
  type_ne: String
  _id_nin: [ObjectId]
  description_lte: String
  description_gt: String
  name_exists: Boolean
  ids_nin: [String]
  description_ne: String
  owner_exists: Boolean
  name_nin: [String]
  _id_exists: Boolean
  type_gt: String
  name_gt: String
  name_ne: String
  type_lte: String
  _id_in: [ObjectId]
  _id_gte: ObjectId
  _id: ObjectId
  description_lt: String
  ids_exists: Boolean
  description_gte: String
  type_lt: String
  _id_gt: ObjectId
  type: String
  OR: [ShippingMethodQueryInput!]
  ids_in: [String]
  pickup_exists: Boolean
  name_in: [String]
  description_exists: Boolean
  name_gte: String
}

type VehicleCostResource {
  currency: VehicleCostResourceCurrency
  key: String
  type: String
  unit: VehicleCostResourceUnit
}

input TourDurationUnitInsertInput {
  symbol: String
}

input TourLegPayloadVolumeInsertInput {
  unit: TourLegPayloadVolumeUnitInsertInput
  value: Float
}

input ProductQueryInput {
  name_in: [String]
  createdAt_in: [DateTime]
  gtin_exists: Boolean
  group: ProductGroupQueryInput
  sku: String
  gtin: String
  createdAt_gte: DateTime
  categories_nin: [ProductCategoryQueryInput]
  createdAt_lte: DateTime
  categories: [ProductCategoryQueryInput]
  group_exists: Boolean
  AND: [ProductQueryInput!]
  name: String
  owner: ProductOwnerQueryInput
  _id_gt: ObjectId
  sku_gt: String
  _id: ObjectId
  ids: [String]
  _id_ne: ObjectId
  ids_nin: [String]
  createdAt_exists: Boolean
  weight: ProductWeightQueryInput
  sku_lt: String
  ids_exists: Boolean
  gtin_gte: String
  categories_exists: Boolean
  weight_exists: Boolean
  gtin_in: [String]
  _id_exists: Boolean
  gtin_lt: String
  gtin_lte: String
  _id_nin: [ObjectId]
  name_exists: Boolean
  createdAt_gt: DateTime
  categories_in: [ProductCategoryQueryInput]
  name_lte: String
  _id_lt: ObjectId
  _id_lte: ObjectId
  sku_gte: String
  owner_exists: Boolean
  name_gt: String
  sku_ne: String
  _id_gte: ObjectId
  name_lt: String
  gtin_gt: String
  OR: [ProductQueryInput!]
  createdAt_nin: [DateTime]
  sku_nin: [String]
  name_nin: [String]
  sku_in: [String]
  gtin_nin: [String]
  name_gte: String
  sku_lte: String
  ids_in: [String]
  gtin_ne: String
  createdAt_lt: DateTime
  name_ne: String
  sku_exists: Boolean
  _id_in: [ObjectId]
  createdAt: DateTime
  createdAt_ne: DateTime
}

input ShipmentLineInsertInput {
  name: String
  product: ObjectId
  quantity: ShipmentLineQuantityInsertInput
}

input OrderBrokerUpdateInput {
  marketplace: ObjectId
  marketplace_unset: Boolean
  name: String
  name_unset: Boolean
  workspace: OrderBrokerWorkspaceRelationInput
  workspace_unset: Boolean
}

type ProductCategory {
  _id: ObjectId
  children: [ProductCategory]
  classification: ProductClassification
  hierarchyLevel: Int
  id: String
  ids: [String]
  name: String
}

input VehicleCapacityVolumeUnitInsertInput {
  symbol: String
}

input WorkspaceEnterpriseInsertInput {
  ids: [String]
  name: String
}

input CatalogUpdateInput {
  items_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  items: CatalogItemsRelationInput
}

input OrderShippingAddressGeoUpdateInput {
  type_unset: Boolean
  coordinates: [Float]
  coordinates_unset: Boolean
  type: String
}

input VehicleCostUnitQueryInput {
  symbol_exists: Boolean
  symbol_ne: String
  symbol_gt: String
  AND: [VehicleCostUnitQueryInput!]
  OR: [VehicleCostUnitQueryInput!]
  symbol_lt: String
  symbol_nin: [String]
  symbol_gte: String
  symbol_in: [String]
  symbol_lte: String
  symbol: String
}

input PlaceInsertInput {
  _id: ObjectId
  address: PlaceAddressInsertInput
  geo: PlaceGeoInsertInput
  gln: String
  ids: [String]
  name: String
  owner: PlaceOwnerInsertInput
}

input PlaceOwnerUpdateInput {
  workspace: PlaceOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

input TourDurationQueryInput {
  value_exists: Boolean
  value_lte: Float
  value: Float
  value_in: [Float]
  value_ne: Float
  value_lt: Float
  unit: TourDurationUnitQueryInput
  value_nin: [Float]
  OR: [TourDurationQueryInput!]
  unit_exists: Boolean
  value_gt: Float
  value_gte: Float
  AND: [TourDurationQueryInput!]
}

input TourStopDurationInsertInput {
  value: Float
  unit: TourStopDurationUnitInsertInput
}

input TourLegDistanceUnitInsertInput {
  symbol: String
}

input OrderSellerInsertInput {
  name: String
  workspace: OrderSellerWorkspaceRelationInput
}

type WorkspaceEnterprise {
  ids: [String]
  name: String
}

input PlaceOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

type VehicleCapacity {
  volume: VehicleCapacityVolume
  weight: VehicleCapacityWeight
}

input OrderSellerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input VehicleCostResourceUnitInsertInput {
  symbol: String
}

input TourLegPayloadWeightUnitUpdateInput {
  symbol_unset: Boolean
  symbol: String
}

input ShippingMethodPickupPointInsertInput {
  place: ObjectId
}

input ShippingMethodOwnerQueryInput {
  AND: [ShippingMethodOwnerQueryInput!]
  OR: [ShippingMethodOwnerQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
}

input VehicleCapacityUpdateInput {
  volume: VehicleCapacityVolumeUpdateInput
  volume_unset: Boolean
  weight: VehicleCapacityWeightUpdateInput
  weight_unset: Boolean
}

input VehicleCostUpdateInput {
  unit_unset: Boolean
  value_unset: Boolean
  value_inc: Float
  driver: VehicleCostDriverUpdateInput
  resource: VehicleCostResourceUpdateInput
  resource_unset: Boolean
  driver_unset: Boolean
  unit: VehicleCostUnitUpdateInput
  value: Float
}

input WorkspaceEnterpriseUpdateInput {
  name_unset: Boolean
  ids: [String]
  ids_unset: Boolean
  name: String
}

input OrderLineItemInsertInput {
  _id: ObjectId
}

enum ShippingMethodSortByInput {
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  _ID_ASC
  _ID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
}

type TourLegOrigin {
  place: ObjectId
}

type ProductWeightUnit {
  code: String
}

enum ProductClassificationSortByInput {
  _ID_ASC
  _ID_DESC
  KEY_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
}

input ProductClassificationInsertInput {
  name: String
  _id: ObjectId
  key: String
}

input ProductGroupInsertInput {
  _id: ObjectId
  name: String
}

input TourStopDurationUnitInsertInput {
  symbol: String
}

input PlaceGeoUpdateInput {
  coordinates: [Float]
  coordinates_unset: Boolean
  type: String
  type_unset: Boolean
}

input PlaceAddressQueryInput {
  OR: [PlaceAddressQueryInput!]
  locality_gte: String
  AND: [PlaceAddressQueryInput!]
  locality_nin: [String]
  postalCode_gte: String
  locality: String
  street_in: [String]
  locality_exists: Boolean
  locality_lte: String
  postalCode_gt: String
  country_exists: Boolean
  locality_ne: String
  street: String
  postalCode_ne: String
  street_gt: String
  street_nin: [String]
  postalCode_lt: String
  postalCode_lte: String
  locality_gt: String
  street_gte: String
  country: PlaceAddressCountryQueryInput
  locality_lt: String
  street_lt: String
  street_exists: Boolean
  postalCode: String
  street_ne: String
  postalCode_nin: [String]
  locality_in: [String]
  postalCode_exists: Boolean
  postalCode_in: [String]
  street_lte: String
}

input VehicleCapacityVolumeUpdateInput {
  unit: VehicleCapacityVolumeUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_unset: Boolean
  value_inc: Float
}

type ShippingMethodOwner {
  workspace: Workspace
}

type Tour {
  _id: ObjectId
  date: DateTime
  distance: TourDistance
  duration: TourDuration
  legs: [TourLeg]
  name: String
  shipments: [Shipment]
  stops: [TourStop]
  vehicle: Vehicle
}

input VehicleCompartmentInsertInput {
  capacity: VehicleCompartmentCapacityInsertInput
  features: [VehicleCompartmentFeatureInsertInput]
  name: String
}

input TourShipmentsRelationInput {
  link: [ObjectId]
  create: [ShipmentInsertInput]
}

type OrderBuyer {
  email: String
  name: String
  person: ObjectId
  phone: String
}

input WorkspaceMarketplaceUpdateInput {
  key: String
  key_unset: Boolean
}

input OrderInsertInput {
  _id: ObjectId
  shippingMethod: OrderShippingMethodRelationInput
  date: DateTime
  lines: [OrderLineInsertInput]
  number: String
  broker: OrderBrokerInsertInput
  buyer: OrderBuyerInsertInput
  confirmed: Boolean
  url: String
  seller: OrderSellerInsertInput
  shippingAddress: OrderShippingAddressInsertInput
}

type Shipment {
  _id: ObjectId
  date: String
  delivery: ShipmentDelivery
  lines: [ShipmentLine]
  pickup: ShipmentPickup
}

input OrderLineProductUpdateInput {
  _id_unset: Boolean
  _id: ObjectId
}

type OrderLine {
  gtin: String
  item: OrderLineItem
  name: String
  price: OrderLinePrice
  product: OrderLineProduct
  quantity: OrderLineQuantity
  sku: String
}

input ProductInsertInput {
  categories: ProductCategoriesRelationInput
  group: ProductGroupRelationInput
  gtin: String
  ids: [String]
  createdAt: DateTime
  name: String
  owner: ProductOwnerInsertInput
  _id: ObjectId
  sku: String
  weight: ProductWeightInsertInput
}

input TourDistanceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourStopTaskInsertInput {
  shipments: [ObjectId]
  duration: TourStopTaskDurationInsertInput
  name: String
}

type TransactionChannelExternalTargetMarketplace {
  key: String
}

type CatalogItemWeightUnit {
  code: String
}

input OrderBuyerQueryInput {
  person_gt: ObjectId
  name_lte: String
  person_exists: Boolean
  person_lt: ObjectId
  OR: [OrderBuyerQueryInput!]
  name_gt: String
  email_ne: String
  phone_lt: String
  email_nin: [String]
  person: ObjectId
  email_gte: String
  email: String
  email_in: [String]
  name: String
  name_in: [String]
  person_gte: ObjectId
  phone_nin: [String]
  person_lte: ObjectId
  name_nin: [String]
  person_nin: [ObjectId]
  person_in: [ObjectId]
  phone_exists: Boolean
  email_exists: Boolean
  phone: String
  name_ne: String
  phone_lte: String
  name_gte: String
  phone_ne: String
  phone_gt: String
  person_ne: ObjectId
  phone_in: [String]
  email_gt: String
  email_lte: String
  name_exists: Boolean
  AND: [OrderBuyerQueryInput!]
  name_lt: String
  phone_gte: String
  email_lt: String
}

enum CodeSortByInput {
  SYMBOL_DESC
  KEY_ASC
  _ID_DESC
  KEY_DESC
  LIST_ASC
  LIST_DESC
  NAME_ASC
  NAME_DESC
  SYMBOL_ASC
  _ID_ASC
}

input TourStopDurationUpdateInput {
  unit_unset: Boolean
  value: Float
  value_unset: Boolean
  value_inc: Float
  unit: TourStopDurationUnitUpdateInput
}

input TourQueryInput {
  AND: [TourQueryInput!]
  name_in: [String]
  stops_nin: [TourStopQueryInput]
  legs_nin: [TourLegQueryInput]
  name_lt: String
  name_gte: String
  _id_in: [ObjectId]
  OR: [TourQueryInput!]
  shipments: [ShipmentQueryInput]
  _id_nin: [ObjectId]
  duration: TourDurationQueryInput
  _id_gt: ObjectId
  distance: TourDistanceQueryInput
  date_nin: [DateTime]
  name_exists: Boolean
  date_lt: DateTime
  shipments_nin: [ShipmentQueryInput]
  name_lte: String
  date: DateTime
  date_gte: DateTime
  legs: [TourLegQueryInput]
  date_exists: Boolean
  stops_exists: Boolean
  name: String
  shipments_exists: Boolean
  _id: ObjectId
  distance_exists: Boolean
  shipments_in: [ShipmentQueryInput]
  stops: [TourStopQueryInput]
  legs_exists: Boolean
  date_in: [DateTime]
  name_nin: [String]
  date_ne: DateTime
  date_lte: DateTime
  name_gt: String
  _id_exists: Boolean
  stops_in: [TourStopQueryInput]
  legs_in: [TourLegQueryInput]
  name_ne: String
  _id_lt: ObjectId
  date_gt: DateTime
  duration_exists: Boolean
  vehicle_exists: Boolean
  vehicle: VehicleQueryInput
  _id_ne: ObjectId
  _id_lte: ObjectId
  _id_gte: ObjectId
}

type TourStopDelivery {
  shipments: [ObjectId]
}

input TourLegDistanceUpdateInput {
  value_inc: Float
  value_unset: Boolean
  unit: TourLegDistanceUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

input WorkspaceQueryInput {
  name: String
  type_nin: [String]
  type_in: [String]
  name_lt: String
  person_lte: ObjectId
  _id_exists: Boolean
  type_gte: String
  name_ne: String
  name_in: [String]
  name_nin: [String]
  ids_nin: [String]
  place: PlaceQueryInput
  _id_lt: ObjectId
  AND: [WorkspaceQueryInput!]
  _id_lte: ObjectId
  person_lt: ObjectId
  name_exists: Boolean
  ids_exists: Boolean
  marketplace_exists: Boolean
  person: ObjectId
  _id_nin: [ObjectId]
  type: String
  marketplace: WorkspaceMarketplaceQueryInput
  name_gte: String
  type_gt: String
  ids: [String]
  _id: ObjectId
  _id_ne: ObjectId
  OR: [WorkspaceQueryInput!]
  person_in: [ObjectId]
  name_lte: String
  person_exists: Boolean
  type_lte: String
  _id_gte: ObjectId
  person_gte: ObjectId
  type_lt: String
  place_exists: Boolean
  _id_gt: ObjectId
  person_ne: ObjectId
  person_nin: [ObjectId]
  type_exists: Boolean
  type_ne: String
  ids_in: [String]
  enterprise_exists: Boolean
  name_gt: String
  person_gt: ObjectId
  enterprise: WorkspaceEnterpriseQueryInput
  _id_in: [ObjectId]
}

input TourLegOriginQueryInput {
  AND: [TourLegOriginQueryInput!]
  place_nin: [ObjectId]
  place: ObjectId
  place_lt: ObjectId
  place_in: [ObjectId]
  place_exists: Boolean
  place_lte: ObjectId
  place_ne: ObjectId
  OR: [TourLegOriginQueryInput!]
  place_gt: ObjectId
  place_gte: ObjectId
}

input TourLegDurationQueryInput {
  AND: [TourLegDurationQueryInput!]
  unit_exists: Boolean
  unit: TourLegDurationUnitQueryInput
  value_exists: Boolean
  value_ne: Float
  OR: [TourLegDurationQueryInput!]
  value: Float
  value_nin: [Float]
  value_gt: Float
  value_gte: Float
  value_lt: Float
  value_lte: Float
  value_in: [Float]
}

input WorkspaceMarketplaceInsertInput {
  key: String
}

input TourLegOriginInsertInput {
  place: ObjectId
}

input OrderLineProductQueryInput {
  _id_lte: ObjectId
  _id_nin: [ObjectId]
  _id_ne: ObjectId
  _id_exists: Boolean
  _id_gte: ObjectId
  _id_in: [ObjectId]
  AND: [OrderLineProductQueryInput!]
  _id_gt: ObjectId
  _id_lt: ObjectId
  OR: [OrderLineProductQueryInput!]
  _id: ObjectId
}

input OrderBrokerQueryInput {
  marketplace_lte: ObjectId
  workspace: WorkspaceQueryInput
  name_gt: String
  name: String
  marketplace_ne: ObjectId
  marketplace_gt: ObjectId
  name_lte: String
  name_ne: String
  marketplace_gte: ObjectId
  AND: [OrderBrokerQueryInput!]
  name_gte: String
  marketplace: ObjectId
  marketplace_nin: [ObjectId]
  name_lt: String
  workspace_exists: Boolean
  marketplace_exists: Boolean
  name_nin: [String]
  OR: [OrderBrokerQueryInput!]
  marketplace_lt: ObjectId
  marketplace_in: [ObjectId]
  name_in: [String]
  name_exists: Boolean
}

input CatalogItemWeightInsertInput {
  unit: CatalogItemWeightUnitInsertInput
  value: Float
}

input VehicleCompartmentCapacityWeightUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourStopTaskDurationUnitInsertInput {
  symbol: String
}

input VehicleCompartmentCapacityInsertInput {
  volume: VehicleCompartmentCapacityVolumeInsertInput
  weight: VehicleCompartmentCapacityWeightInsertInput
}

input TransactionChannelExternalTargetPlatformQueryInput {
  key_gte: String
  key_in: [String]
  key_gt: String
  key_nin: [String]
  OR: [TransactionChannelExternalTargetPlatformQueryInput!]
  key_exists: Boolean
  key_ne: String
  key: String
  key_lt: String
  key_lte: String
  AND: [TransactionChannelExternalTargetPlatformQueryInput!]
}

type VehicleFeature {
  key: String
  name: String
}

input OrderLinePriceQueryInput {
  value_gt: Float
  value_lt: Float
  AND: [OrderLinePriceQueryInput!]
  currency_exists: Boolean
  value_nin: [Float]
  value_exists: Boolean
  value_gte: Float
  OR: [OrderLinePriceQueryInput!]
  currency: OrderLinePriceCurrencyQueryInput
  value: Float
  value_in: [Float]
  value_ne: Float
  value_lte: Float
}

enum OrderSortByInput {
  NUMBER_ASC
  URL_ASC
  URL_DESC
  SHIPPINGMETHOD_ASC
  SHIPPINGMETHOD_DESC
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
  NUMBER_DESC
}

input WorkspaceInsertInput {
  place: WorkspacePlaceRelationInput
  _id: ObjectId
  type: String
  enterprise: WorkspaceEnterpriseInsertInput
  ids: [String]
  marketplace: WorkspaceMarketplaceInsertInput
  name: String
  person: ObjectId
}

input ShipmentDeliveryInsertInput {
  place: ShipmentDeliveryPlaceRelationInput
}

input TourStopPickupUpdateInput {
  shipments: [ObjectId]
  shipments_unset: Boolean
}

input TransactionChannelExternalTargetPlatformUpdateInput {
  key: String
  key_unset: Boolean
}

input CodeListQueryInput {
  key_in: [String]
  name_gt: String
  ids_nin: [String]
  name_in: [String]
  _id_lte: ObjectId
  ids: [String]
  ids_exists: Boolean
  key_lt: String
  name_nin: [String]
  key_gte: String
  items_in: [CodeQueryInput]
  _id_gt: ObjectId
  name_gte: String
  name_exists: Boolean
  key_exists: Boolean
  _id: ObjectId
  items_nin: [CodeQueryInput]
  name: String
  ids_in: [String]
  OR: [CodeListQueryInput!]
  key_gt: String
  key_nin: [String]
  _id_nin: [ObjectId]
  key_lte: String
  _id_gte: ObjectId
  _id_in: [ObjectId]
  name_lte: String
  AND: [CodeListQueryInput!]
  name_ne: String
  _id_exists: Boolean
  key_ne: String
  name_lt: String
  items: [CodeQueryInput]
  items_exists: Boolean
  _id_lt: ObjectId
  key: String
  _id_ne: ObjectId
}

enum CodeListSortByInput {
  _ID_ASC
  _ID_DESC
  KEY_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
}

input VehicleWeightUnitQueryInput {
  symbol_lte: String
  symbol_nin: [String]
  AND: [VehicleWeightUnitQueryInput!]
  symbol: String
  symbol_exists: Boolean
  symbol_in: [String]
  symbol_gt: String
  symbol_ne: String
  symbol_lt: String
  OR: [VehicleWeightUnitQueryInput!]
  symbol_gte: String
}

type TourLegDuration {
  unit: TourLegDurationUnit
  value: Float
}

input TourLegPayloadVolumeUnitInsertInput {
  symbol: String
}

input TourLegDurationInsertInput {
  unit: TourLegDurationUnitInsertInput
  value: Float
}

type PlaceGeo {
  coordinates: [Float]
  type: String
}

input ProductCategoryQueryInput {
  _id_gte: ObjectId
  name_gt: String
  hierarchyLevel_lte: Int
  AND: [ProductCategoryQueryInput!]
  name_nin: [String]
  hierarchyLevel: Int
  id: String
  id_gte: String
  hierarchyLevel_gte: Int
  ids_exists: Boolean
  id_in: [String]
  name: String
  hierarchyLevel_nin: [Int]
  _id_lt: ObjectId
  _id_gt: ObjectId
  hierarchyLevel_gt: Int
  name_ne: String
  children_in: [ProductCategoryQueryInput]
  hierarchyLevel_in: [Int]
  _id_ne: ObjectId
  ids_nin: [String]
  ids_in: [String]
  hierarchyLevel_ne: Int
  id_lte: String
  name_lte: String
  id_lt: String
  id_gt: String
  _id_lte: ObjectId
  name_lt: String
  _id_exists: Boolean
  name_gte: String
  _id: ObjectId
  name_in: [String]
  hierarchyLevel_exists: Boolean
  ids: [String]
  _id_in: [ObjectId]
  id_nin: [String]
  OR: [ProductCategoryQueryInput!]
  id_exists: Boolean
  id_ne: String
  name_exists: Boolean
  children: [ProductCategoryQueryInput]
  children_exists: Boolean
  _id_nin: [ObjectId]
  hierarchyLevel_lt: Int
  children_nin: [ProductCategoryQueryInput]
  classification: ProductClassificationQueryInput
  classification_exists: Boolean
}

input OrderBrokerInsertInput {
  name: String
  workspace: OrderBrokerWorkspaceRelationInput
  marketplace: ObjectId
}

input OrderShippingMethodRelationInput {
  create: ShippingMethodInsertInput
  link: ObjectId
}

input TourStopTaskQueryInput {
  duration_exists: Boolean
  name_gt: String
  name_gte: String
  duration: TourStopTaskDurationQueryInput
  name_in: [String]
  shipments_nin: [ObjectId]
  name_ne: String
  AND: [TourStopTaskQueryInput!]
  OR: [TourStopTaskQueryInput!]
  name_exists: Boolean
  shipments_exists: Boolean
  name_lte: String
  name: String
  shipments: [ObjectId]
  shipments_in: [ObjectId]
  name_lt: String
  name_nin: [String]
}

type VehicleCompartment {
  capacity: VehicleCompartmentCapacity
  features: [VehicleCompartmentFeature]
  name: String
}

type VehicleModel {
  date: DateTime
  name: String
}

type VehicleCapacityWeightUnit {
  symbol: String
}

input WorkspacePlaceRelationInput {
  link: ObjectId
  create: PlaceInsertInput
}

input VehicleCompartmentCapacityUpdateInput {
  volume: VehicleCompartmentCapacityVolumeUpdateInput
  volume_unset: Boolean
  weight: VehicleCompartmentCapacityWeightUpdateInput
  weight_unset: Boolean
}

input CodeQueryInput {
  key_lte: String
  symbol: String
  _id: ObjectId
  _id_exists: Boolean
  symbol_lte: String
  _id_lt: ObjectId
  _id_nin: [ObjectId]
  key_lt: String
  _id_in: [ObjectId]
  _id_ne: ObjectId
  key_exists: Boolean
  name_exists: Boolean
  symbol_in: [String]
  _id_gte: ObjectId
  key_gte: String
  symbol_exists: Boolean
  symbol_gt: String
  list: CodeListQueryInput
  key_in: [String]
  list_exists: Boolean
  symbol_gte: String
  key_gt: String
  name_in: [String]
  _id_lte: ObjectId
  name_lt: String
  name_nin: [String]
  symbol_lt: String
  name_gt: String
  key_nin: [String]
  name_lte: String
  OR: [CodeQueryInput!]
  name_gte: String
  AND: [CodeQueryInput!]
  symbol_nin: [String]
  name_ne: String
  name: String
  symbol_ne: String
  key_ne: String
  key: String
  _id_gt: ObjectId
}

input TourStopDurationUnitQueryInput {
  AND: [TourStopDurationUnitQueryInput!]
  symbol_in: [String]
  symbol_exists: Boolean
  symbol_gt: String
  symbol_gte: String
  symbol_lt: String
  symbol: String
  symbol_ne: String
  OR: [TourStopDurationUnitQueryInput!]
  symbol_lte: String
  symbol_nin: [String]
}

input VehicleCompartmentQueryInput {
  features: [VehicleCompartmentFeatureQueryInput]
  AND: [VehicleCompartmentQueryInput!]
  capacity: VehicleCompartmentCapacityQueryInput
  features_exists: Boolean
  name_nin: [String]
  name_gt: String
  name_lt: String
  name_lte: String
  name_exists: Boolean
  name_ne: String
  name: String
  features_nin: [VehicleCompartmentFeatureQueryInput]
  OR: [VehicleCompartmentQueryInput!]
  capacity_exists: Boolean
  name_in: [String]
  features_in: [VehicleCompartmentFeatureQueryInput]
  name_gte: String
}

type OrderShippingAddressGeo {
  coordinates: [Float]
  type: String
}

type DeleteManyPayload {
  deletedCount: Int!
}

input TourLegDurationUnitInsertInput {
  symbol: String
}

input OrderUpdateInput {
  shippingMethod: OrderShippingMethodRelationInput
  seller_unset: Boolean
  lines: [OrderLineUpdateInput]
  number: String
  shippingAddress_unset: Boolean
  buyer: OrderBuyerUpdateInput
  confirmed_unset: Boolean
  date: DateTime
  confirmed: Boolean
  broker: OrderBrokerUpdateInput
  shippingMethod_unset: Boolean
  lines_unset: Boolean
  _id: ObjectId
  broker_unset: Boolean
  url_unset: Boolean
  url: String
  buyer_unset: Boolean
  number_unset: Boolean
  _id_unset: Boolean
  date_unset: Boolean
  seller: OrderSellerUpdateInput
  shippingAddress: OrderShippingAddressUpdateInput
}

input OrderSellerUpdateInput {
  workspace: OrderSellerWorkspaceRelationInput
  workspace_unset: Boolean
  name: String
  name_unset: Boolean
}

type WorkspaceMarketplace {
  key: String
}

type TourLegPayloadVolumeUnit {
  symbol: String
}

type OrderShippingAddressCountry {
  code: String
  name: String
}

type OrderLinePrice {
  currency: OrderLinePriceCurrency
  value: Float
}

input TourLegPayloadInsertInput {
  shipments: [ObjectId]
  volume: TourLegPayloadVolumeInsertInput
  weight: TourLegPayloadWeightInsertInput
}

input ShipmentPickupUpdateInput {
  place: ShipmentPickupPlaceRelationInput
  place_unset: Boolean
}

input OrderLinePriceUpdateInput {
  currency: OrderLinePriceCurrencyUpdateInput
  currency_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input OrderLineQuantityUnitUpdateInput {
  symbol_unset: Boolean
  text: String
  text_unset: Boolean
  code: String
  code_unset: Boolean
  symbol: String
}

input CatalogItemOwnerUpdateInput {
  workspace: CatalogItemOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

input OrderShippingAddressCountryUpdateInput {
  code_unset: Boolean
  name: String
  name_unset: Boolean
  code: String
}

input TourDistanceQueryInput {
  value: Float
  value_in: [Float]
  value_nin: [Float]
  value_lt: Float
  OR: [TourDistanceQueryInput!]
  value_exists: Boolean
  value_gt: Float
  unit: TourDistanceUnitQueryInput
  unit_exists: Boolean
  value_ne: Float
  value_gte: Float
  value_lte: Float
  AND: [TourDistanceQueryInput!]
}

type TourStopTask {
  duration: TourStopTaskDuration
  name: String
  shipments: [ObjectId]
}

input TransactionChannelExternalTargetMarketplaceInsertInput {
  key: String
}

input TourDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourStopPickupInsertInput {
  shipments: [ObjectId]
}

input CatalogQueryInput {
  _id_ne: ObjectId
  items_exists: Boolean
  _id_lt: ObjectId
  _id_lte: ObjectId
  items_nin: [CatalogItemQueryInput]
  _id_nin: [ObjectId]
  _id_gt: ObjectId
  items: [CatalogItemQueryInput]
  items_in: [CatalogItemQueryInput]
  OR: [CatalogQueryInput!]
  AND: [CatalogQueryInput!]
  _id: ObjectId
  _id_gte: ObjectId
  _id_in: [ObjectId]
  _id_exists: Boolean
}

enum TransactionChannelSortByInput {
  ROLE_DESC
  _ID_ASC
  _ID_DESC
  DIRECTION_ASC
  DIRECTION_DESC
  RESOURCE_ASC
  RESOURCE_DESC
  ROLE_ASC
}

type TourLegPayloadVolume {
  unit: TourLegPayloadVolumeUnit
  value: Float
}

input VehicleModelUpdateInput {
  date_unset: Boolean
  name: String
  name_unset: Boolean
  date: DateTime
}

input CodeListUpdateInput {
  _id_unset: Boolean
  items: CodeListItemsRelationInput
  name_unset: Boolean
  ids_unset: Boolean
  name: String
  key: String
  key_unset: Boolean
  _id: ObjectId
  ids: [String]
  items_unset: Boolean
}

input ShippingMethodOwnerWorkspaceRelationInput {
  link: ObjectId
  create: WorkspaceInsertInput
}

input TourStopTaskUpdateInput {
  shipments: [ObjectId]
  shipments_unset: Boolean
  duration: TourStopTaskDurationUpdateInput
  duration_unset: Boolean
  name: String
  name_unset: Boolean
}

input ShippingMethodInsertInput {
  owner: ShippingMethodOwnerInsertInput
  pickup: ShippingMethodPickupInsertInput
  type: String
  _id: ObjectId
  description: String
  ids: [String]
  name: String
}

input OrderShippingAddressInsertInput {
  postalCode: String
  street: String
  country: OrderShippingAddressCountryInsertInput
  geo: OrderShippingAddressGeoInsertInput
  locality: String
  name: String
  phone: String
  place: OrderShippingAddressPlaceRelationInput
}

input ProductOwnerQueryInput {
  OR: [ProductOwnerQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [ProductOwnerQueryInput!]
}

enum ProductCategorySortByInput {
  CLASSIFICATION_DESC
  HIERARCHYLEVEL_ASC
  HIERARCHYLEVEL_DESC
  ID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
  CLASSIFICATION_ASC
  ID_ASC
}

input VehicleCompartmentCapacityVolumeUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourLegOriginUpdateInput {
  place: ObjectId
  place_unset: Boolean
}

enum VehicleSortByInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
}

type TransactionChannelExternalTargetPlatform {
  key: String
}

type ShipmentPickup {
  place: Place
}

scalar DateTime

type OrderBroker {
  marketplace: ObjectId
  name: String
  workspace: Workspace
}

input ShippingMethodPickupPointUpdateInput {
  place: ObjectId
  place_unset: Boolean
}

input ShipmentLineUpdateInput {
  product: ObjectId
  product_unset: Boolean
  quantity: ShipmentLineQuantityUpdateInput
  quantity_unset: Boolean
  name: String
  name_unset: Boolean
}

input ShipmentLineQuantityQueryInput {
  AND: [ShipmentLineQuantityQueryInput!]
  value: Int
  OR: [ShipmentLineQuantityQueryInput!]
  value_lt: Int
  value_gt: Int
  value_exists: Boolean
  value_ne: Int
  value_gte: Int
  value_lte: Int
  value_in: [Int]
  value_nin: [Int]
}

type TourLeg {
  destination: TourLegDestination
  distance: TourLegDistance
  duration: TourLegDuration
  origin: TourLegOrigin
  payload: TourLegPayload
}

input OrderQueryInput {
  url_nin: [String]
  _id_nin: [ObjectId]
  url_gte: String
  broker_exists: Boolean
  number_ne: String
  buyer_exists: Boolean
  date_nin: [DateTime]
  _id_gte: ObjectId
  url_gt: String
  _id_exists: Boolean
  buyer: OrderBuyerQueryInput
  date_in: [DateTime]
  shippingMethod: ShippingMethodQueryInput
  _id_lte: ObjectId
  date_lte: DateTime
  shippingAddress_exists: Boolean
  date_ne: DateTime
  url_in: [String]
  seller_exists: Boolean
  date_gt: DateTime
  AND: [OrderQueryInput!]
  OR: [OrderQueryInput!]
  url_exists: Boolean
  lines_nin: [OrderLineQueryInput]
  url_lt: String
  date: DateTime
  date_exists: Boolean
  _id_lt: ObjectId
  date_gte: DateTime
  url_lte: String
  lines: [OrderLineQueryInput]
  confirmed_ne: Boolean
  number_exists: Boolean
  _id: ObjectId
  shippingAddress: OrderShippingAddressQueryInput
  _id_in: [ObjectId]
  url_ne: String
  seller: OrderSellerQueryInput
  lines_in: [OrderLineQueryInput]
  broker: OrderBrokerQueryInput
  confirmed_exists: Boolean
  _id_ne: ObjectId
  number_lt: String
  number_in: [String]
  number_lte: String
  number_gte: String
  url: String
  confirmed: Boolean
  date_lt: DateTime
  _id_gt: ObjectId
  lines_exists: Boolean
  number_gt: String
  number: String
  shippingMethod_exists: Boolean
  number_nin: [String]
}

input VehicleInsertInput {
  type: String
  _id: ObjectId
  features: [VehicleFeatureInsertInput]
  model: VehicleModelInsertInput
  weight: VehicleWeightInsertInput
  brand: VehicleBrandInsertInput
  capacity: VehicleCapacityInsertInput
  compartments: [VehicleCompartmentInsertInput]
  costs: [VehicleCostInsertInput]
  name: String
}

input VehicleCapacityVolumeQueryInput {
  value_ne: Float
  value_gte: Float
  OR: [VehicleCapacityVolumeQueryInput!]
  value: Float
  value_nin: [Float]
  value_gt: Float
  AND: [VehicleCapacityVolumeQueryInput!]
  value_exists: Boolean
  unit_exists: Boolean
  value_lt: Float
  value_in: [Float]
  unit: VehicleCapacityVolumeUnitQueryInput
  value_lte: Float
}

type TourStopDurationUnit {
  symbol: String
}

input CodeListItemsRelationInput {
  create: [CodeInsertInput]
  link: [ObjectId]
}

input VehicleWeightUpdateInput {
  unit: VehicleWeightUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input CatalogInsertInput {
  items: CatalogItemsRelationInput
  _id: ObjectId
}

type VehicleCostDriverUnit {
  symbol: String
}

input WorkspaceUpdateInput {
  ids_unset: Boolean
  person: ObjectId
  enterprise: WorkspaceEnterpriseUpdateInput
  enterprise_unset: Boolean
  _id_unset: Boolean
  name: String
  place: WorkspacePlaceRelationInput
  place_unset: Boolean
  type: String
  name_unset: Boolean
  person_unset: Boolean
  ids: [String]
  marketplace: WorkspaceMarketplaceUpdateInput
  type_unset: Boolean
  marketplace_unset: Boolean
  _id: ObjectId
}

input VehicleCostResourceCurrencyUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input OrderBuyerUpdateInput {
  phone_unset: Boolean
  email: String
  email_unset: Boolean
  name: String
  name_unset: Boolean
  person: ObjectId
  person_unset: Boolean
  phone: String
}

input VehicleCompartmentCapacityVolumeUnitQueryInput {
  symbol_gt: String
  symbol_in: [String]
  OR: [VehicleCompartmentCapacityVolumeUnitQueryInput!]
  symbol_ne: String
  symbol_nin: [String]
  symbol: String
  symbol_gte: String
  AND: [VehicleCompartmentCapacityVolumeUnitQueryInput!]
  symbol_exists: Boolean
  symbol_lt: String
  symbol_lte: String
}

type TourLegDestination {
  place: ObjectId
}

input VehicleCostDriverUnitInsertInput {
  symbol: String
}

enum CatalogSortByInput {
  _ID_ASC
  _ID_DESC
}

input OrderShippingAddressCountryQueryInput {
  name_nin: [String]
  name_lte: String
  name_exists: Boolean
  OR: [OrderShippingAddressCountryQueryInput!]
  code_in: [String]
  name_ne: String
  code_gte: String
  AND: [OrderShippingAddressCountryQueryInput!]
  name_lt: String
  name_gte: String
  name: String
  code_gt: String
  code_exists: Boolean
  name_gt: String
  name_in: [String]
  code: String
  code_lt: String
  code_lte: String
  code_nin: [String]
  code_ne: String
}

input TransactionChannelExternalTargetQueryInput {
  OR: [TransactionChannelExternalTargetQueryInput!]
  enterprise: TransactionChannelExternalTargetEnterpriseQueryInput
  enterprise_exists: Boolean
  marketplace: TransactionChannelExternalTargetMarketplaceQueryInput
  marketplace_exists: Boolean
  platform: TransactionChannelExternalTargetPlatformQueryInput
  platform_exists: Boolean
  AND: [TransactionChannelExternalTargetQueryInput!]
}

type Workspace {
  _id: ObjectId
  enterprise: WorkspaceEnterprise
  ids: [String]
  marketplace: WorkspaceMarketplace
  name: String
  person: ObjectId
  place: Place
  type: String
}

type PlaceOwner {
  workspace: Workspace
}

input ShipmentLineQueryInput {
  name: String
  name_lt: String
  product_in: [ObjectId]
  product_exists: Boolean
  quantity: ShipmentLineQuantityQueryInput
  name_ne: String
  OR: [ShipmentLineQueryInput!]
  name_gt: String
  name_gte: String
  name_in: [String]
  product_gte: ObjectId
  name_exists: Boolean
  product: ObjectId
  product_lte: ObjectId
  product_lt: ObjectId
  product_nin: [ObjectId]
  name_nin: [String]
  product_gt: ObjectId
  AND: [ShipmentLineQueryInput!]
  name_lte: String
  product_ne: ObjectId
  quantity_exists: Boolean
}

type TourDistanceUnit {
  symbol: String
}

type TourLegPayloadWeightUnit {
  symbol: String
}

input VehicleWeightUnitInsertInput {
  symbol: String
}

input TransactionChannelFilterInsertInput {
  isOrdered: Boolean
  status: String
}

input TourLegPayloadVolumeUnitQueryInput {
  symbol_exists: Boolean
  symbol_ne: String
  symbol: String
  symbol_lt: String
  OR: [TourLegPayloadVolumeUnitQueryInput!]
  symbol_nin: [String]
  symbol_lte: String
  symbol_in: [String]
  AND: [TourLegPayloadVolumeUnitQueryInput!]
  symbol_gt: String
  symbol_gte: String
}

type ProductGroup {
  _id: ObjectId
  name: String
}

enum ProductSortByInput {
  SKU_ASC
  SKU_DESC
  _ID_ASC
  _ID_DESC
  GROUP_ASC
  GROUP_DESC
  GTIN_ASC
  CREATEDAT_ASC
  CREATEDAT_DESC
  GTIN_DESC
  NAME_ASC
  NAME_DESC
}

input OrderShippingAddressQueryInput {
  phone_lte: String
  name_in: [String]
  postalCode_ne: String
  street_gte: String
  locality_lte: String
  locality_exists: Boolean
  phone: String
  postalCode_exists: Boolean
  name_exists: Boolean
  postalCode_nin: [String]
  country_exists: Boolean
  phone_gt: String
  street: String
  geo: OrderShippingAddressGeoQueryInput
  name_lte: String
  locality_nin: [String]
  country: OrderShippingAddressCountryQueryInput
  street_lte: String
  street_exists: Boolean
  street_ne: String
  phone_gte: String
  locality: String
  name_nin: [String]
  street_in: [String]
  name_lt: String
  phone_exists: Boolean
  locality_gte: String
  name: String
  locality_in: [String]
  phone_nin: [String]
  postalCode_gte: String
  name_gte: String
  postalCode: String
  postalCode_lt: String
  AND: [OrderShippingAddressQueryInput!]
  name_gt: String
  locality_ne: String
  phone_lt: String
  postalCode_lte: String
  street_gt: String
  OR: [OrderShippingAddressQueryInput!]
  phone_in: [String]
  name_ne: String
  postalCode_gt: String
  locality_lt: String
  locality_gt: String
  street_nin: [String]
  place: PlaceQueryInput
  phone_ne: String
  geo_exists: Boolean
  street_lt: String
  postalCode_in: [String]
  place_exists: Boolean
}

input ShipmentLineQuantityInsertInput {
  value: Int
}

input OrderLineInsertInput {
  price: OrderLinePriceInsertInput
  product: OrderLineProductInsertInput
  quantity: OrderLineQuantityInsertInput
  sku: String
  gtin: String
  item: OrderLineItemInsertInput
  name: String
}

type VehicleWeightUnit {
  symbol: String
}

input ProductWeightUnitQueryInput {
  code_gte: String
  OR: [ProductWeightUnitQueryInput!]
  code_gt: String
  code_nin: [String]
  code_exists: Boolean
  AND: [ProductWeightUnitQueryInput!]
  code: String
  code_lte: String
  code_ne: String
  code_lt: String
  code_in: [String]
}

input VehicleCapacityVolumeInsertInput {
  unit: VehicleCapacityVolumeUnitInsertInput
  value: Float
}

input CatalogItemOwnerInsertInput {
  workspace: CatalogItemOwnerWorkspaceRelationInput
}

input TourLegPayloadQueryInput {
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  AND: [TourLegPayloadQueryInput!]
  volume: TourLegPayloadVolumeQueryInput
  volume_exists: Boolean
  weight_exists: Boolean
  shipments: [ObjectId]
  shipments_in: [ObjectId]
  weight: TourLegPayloadWeightQueryInput
  OR: [TourLegPayloadQueryInput!]
}

input TourLegPayloadVolumeQueryInput {
  value_lt: Float
  value_gt: Float
  unit_exists: Boolean
  OR: [TourLegPayloadVolumeQueryInput!]
  value: Float
  value_gte: Float
  value_ne: Float
  value_lte: Float
  value_in: [Float]
  value_nin: [Float]
  AND: [TourLegPayloadVolumeQueryInput!]
  unit: TourLegPayloadVolumeUnitQueryInput
  value_exists: Boolean
}

type OrderLineQuantity {
  unit: OrderLineQuantityUnit
  value: Int
}

input VehicleBrandInsertInput {
  name: String
}

input TourStopDeliveryInsertInput {
  shipments: [ObjectId]
}

input TourLegDestinationInsertInput {
  place: ObjectId
}

input VehicleCompartmentCapacityQueryInput {
  OR: [VehicleCompartmentCapacityQueryInput!]
  volume: VehicleCompartmentCapacityVolumeQueryInput
  volume_exists: Boolean
  weight: VehicleCompartmentCapacityWeightQueryInput
  weight_exists: Boolean
  AND: [VehicleCompartmentCapacityQueryInput!]
}

type VehicleCompartmentCapacityWeightUnit {
  symbol: String
}

type VehicleCostResourceCurrency {
  symbol: String
}

input ProductWeightInsertInput {
  value: Float
  unit: ProductWeightUnitInsertInput
}

input ShipmentUpdateInput {
  lines_unset: Boolean
  date_unset: Boolean
  delivery: ShipmentDeliveryUpdateInput
  _id: ObjectId
  delivery_unset: Boolean
  _id_unset: Boolean
  date: String
  lines: [ShipmentLineUpdateInput]
  pickup: ShipmentPickupUpdateInput
  pickup_unset: Boolean
}

type TransactionChannelInternalTarget {
  workspace: Workspace
}

type ShipmentDelivery {
  place: Place
}

input OrderSellerQueryInput {
  name_gte: String
  OR: [OrderSellerQueryInput!]
  name_gt: String
  name_in: [String]
  name_exists: Boolean
  workspace_exists: Boolean
  name_ne: String
  name_lt: String
  workspace: WorkspaceQueryInput
  name_nin: [String]
  name_lte: String
  AND: [OrderSellerQueryInput!]
  name: String
}

type OrderShippingAddress {
  country: OrderShippingAddressCountry
  geo: OrderShippingAddressGeo
  locality: String
  name: String
  phone: String
  place: Place
  postalCode: String
  street: String
}

input VehicleCompartmentCapacityWeightUnitInsertInput {
  symbol: String
}

input VehicleCostInsertInput {
  value: Float
  driver: VehicleCostDriverInsertInput
  resource: VehicleCostResourceInsertInput
  unit: VehicleCostUnitInsertInput
}

input ProductOwnerInsertInput {
  workspace: ProductOwnerWorkspaceRelationInput
}

type Query {
  catalog(query: CatalogQueryInput): Catalog
  catalogItem(query: CatalogItemQueryInput): CatalogItem
  catalogItems(query: CatalogItemQueryInput, limit: Int = 100, sortBy: CatalogItemSortByInput): [CatalogItem]!
  catalogs(query: CatalogQueryInput, limit: Int = 100, sortBy: CatalogSortByInput): [Catalog]!
  code(query: CodeQueryInput): Code
  codeList(query: CodeListQueryInput): CodeList
  codeLists(limit: Int = 100, sortBy: CodeListSortByInput, query: CodeListQueryInput): [CodeList]!
  codes(query: CodeQueryInput, limit: Int = 100, sortBy: CodeSortByInput): [Code]!
  order(query: OrderQueryInput): Order
  orders(query: OrderQueryInput, limit: Int = 100, sortBy: OrderSortByInput): [Order]!
  place(query: PlaceQueryInput): Place
  places(query: PlaceQueryInput, limit: Int = 100, sortBy: PlaceSortByInput): [Place]!
  product(query: ProductQueryInput): Product
  productCategories(limit: Int = 100, sortBy: ProductCategorySortByInput, query: ProductCategoryQueryInput): [ProductCategory]!
  productCategory(query: ProductCategoryQueryInput): ProductCategory
  productClassification(query: ProductClassificationQueryInput): ProductClassification
  productClassifications(query: ProductClassificationQueryInput, limit: Int = 100, sortBy: ProductClassificationSortByInput): [ProductClassification]!
  productGroup(query: ProductGroupQueryInput): ProductGroup
  productGroups(query: ProductGroupQueryInput, limit: Int = 100, sortBy: ProductGroupSortByInput): [ProductGroup]!
  products(query: ProductQueryInput, limit: Int = 100, sortBy: ProductSortByInput): [Product]!
  shipment(query: ShipmentQueryInput): Shipment
  shipments(query: ShipmentQueryInput, limit: Int = 100, sortBy: ShipmentSortByInput): [Shipment]!
  shippingMethod(query: ShippingMethodQueryInput): ShippingMethod
  shippingMethods(query: ShippingMethodQueryInput, limit: Int = 100, sortBy: ShippingMethodSortByInput): [ShippingMethod]!
  tour(query: TourQueryInput): Tour
  tours(query: TourQueryInput, limit: Int = 100, sortBy: TourSortByInput): [Tour]!
  transactionChannel(query: TransactionChannelQueryInput): TransactionChannel
  transactionChannels(query: TransactionChannelQueryInput, limit: Int = 100, sortBy: TransactionChannelSortByInput): [TransactionChannel]!
  vehicle(query: VehicleQueryInput): Vehicle
  vehicles(query: VehicleQueryInput, limit: Int = 100, sortBy: VehicleSortByInput): [Vehicle]!
  workspace(query: WorkspaceQueryInput): Workspace
  workspaces(query: WorkspaceQueryInput, limit: Int = 100, sortBy: WorkspaceSortByInput): [Workspace]!
}

input TourLegDistanceUnitQueryInput {
  symbol_gte: String
  symbol_ne: String
  AND: [TourLegDistanceUnitQueryInput!]
  symbol_nin: [String]
  symbol_exists: Boolean
  symbol: String
  symbol_gt: String
  symbol_lt: String
  symbol_in: [String]
  OR: [TourLegDistanceUnitQueryInput!]
  symbol_lte: String
}

input TourLegPayloadWeightQueryInput {
  value_nin: [Int]
  value_gt: Int
  value_lt: Int
  value_in: [Int]
  OR: [TourLegPayloadWeightQueryInput!]
  value: Int
  value_ne: Int
  unit: TourLegPayloadWeightUnitQueryInput
  unit_exists: Boolean
  value_lte: Int
  value_exists: Boolean
  AND: [TourLegPayloadWeightQueryInput!]
  value_gte: Int
}

input VehicleWeightQueryInput {
  value_exists: Boolean
  value: Float
  value_ne: Float
  value_lt: Float
  value_gt: Float
  value_gte: Float
  value_lte: Float
  value_in: [Float]
  AND: [VehicleWeightQueryInput!]
  OR: [VehicleWeightQueryInput!]
  value_nin: [Float]
  unit: VehicleWeightUnitQueryInput
  unit_exists: Boolean
}

type TourLegDistance {
  unit: TourLegDistanceUnit
  value: Float
}

input OrderLinePriceCurrencyQueryInput {
  symbol_gt: String
  code_ne: String
  code: String
  text_lt: String
  symbol_lt: String
  symbol_in: [String]
  symbol_exists: Boolean
  text_gt: String
  code_exists: Boolean
  OR: [OrderLinePriceCurrencyQueryInput!]
  code_gt: String
  code_lt: String
  symbol_ne: String
  code_in: [String]
  symbol_gte: String
  text_in: [String]
  text_exists: Boolean
  text: String
  code_nin: [String]
  symbol_nin: [String]
  symbol_lte: String
  text_ne: String
  AND: [OrderLinePriceCurrencyQueryInput!]
  text_nin: [String]
  symbol: String
  text_lte: String
  code_gte: String
  code_lte: String
  text_gte: String
}

input ProductWeightUnitUpdateInput {
  code: String
  code_unset: Boolean
}

type Product {
  _id: ObjectId
  categories: [ProductCategory]
  createdAt: DateTime
  group: ProductGroup
  gtin: String
  ids: [String]
  name: String
  owner: ProductOwner
  sku: String
  weight: ProductWeight
}

type ProductOwner {
  workspace: Workspace
}

input VehicleCapacityWeightUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input VehicleCostResourceUpdateInput {
  currency_unset: Boolean
  key: String
  key_unset: Boolean
  type: String
  type_unset: Boolean
  unit: VehicleCostResourceUnitUpdateInput
  unit_unset: Boolean
  currency: VehicleCostResourceCurrencyUpdateInput
}

input TourLegPayloadVolumeUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TransactionChannelInternalTargetQueryInput {
  AND: [TransactionChannelInternalTargetQueryInput!]
  OR: [TransactionChannelInternalTargetQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
}

input TourLegDistanceQueryInput {
  value_gt: Float
  value_in: [Float]
  OR: [TourLegDistanceQueryInput!]
  AND: [TourLegDistanceQueryInput!]
  value_ne: Float
  unit_exists: Boolean
  value_nin: [Float]
  value_exists: Boolean
  value_gte: Float
  value_lte: Float
  unit: TourLegDistanceUnitQueryInput
  value: Float
  value_lt: Float
}

type Vehicle {
  _id: ObjectId
  brand: VehicleBrand
  capacity: VehicleCapacity
  compartments: [VehicleCompartment]
  costs: [VehicleCost]
  features: [VehicleFeature]
  model: VehicleModel
  name: String
  type: String
  weight: VehicleWeight
}

type VehicleCompartmentFeature {
  key: String
  name: String
}

input CatalogItemWeightUnitQueryInput {
  code_exists: Boolean
  code: String
  code_lte: String
  code_lt: String
  code_nin: [String]
  AND: [CatalogItemWeightUnitQueryInput!]
  code_in: [String]
  code_ne: String
  code_gt: String
  code_gte: String
  OR: [CatalogItemWeightUnitQueryInput!]
}

input CatalogItemOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input OrderLinePriceCurrencyInsertInput {
  code: String
  symbol: String
  text: String
}

input VehicleCapacityVolumeUnitQueryInput {
  symbol_gt: String
  AND: [VehicleCapacityVolumeUnitQueryInput!]
  symbol_lte: String
  symbol_gte: String
  OR: [VehicleCapacityVolumeUnitQueryInput!]
  symbol_ne: String
  symbol_exists: Boolean
  symbol_lt: String
  symbol_in: [String]
  symbol_nin: [String]
  symbol: String
}

type VehicleCost {
  driver: VehicleCostDriver
  resource: VehicleCostResource
  unit: VehicleCostUnit
  value: Float
}

type OrderLineQuantityUnit {
  code: String
  symbol: String
  text: String
}

type PlaceAddress {
  country: PlaceAddressCountry
  locality: String
  postalCode: String
  street: String
}

input VehicleCapacityWeightQueryInput {
  value_lt: Float
  unit_exists: Boolean
  value_gte: Float
  value_gt: Float
  value: Float
  value_in: [Float]
  value_exists: Boolean
  unit: VehicleCapacityWeightUnitQueryInput
  value_nin: [Float]
  value_ne: Float
  OR: [VehicleCapacityWeightQueryInput!]
  AND: [VehicleCapacityWeightQueryInput!]
  value_lte: Float
}

input VehicleCostQueryInput {
  value: Float
  value_ne: Float
  OR: [VehicleCostQueryInput!]
  unit: VehicleCostUnitQueryInput
  driver_exists: Boolean
  value_exists: Boolean
  resource: VehicleCostResourceQueryInput
  value_nin: [Float]
  AND: [VehicleCostQueryInput!]
  resource_exists: Boolean
  driver: VehicleCostDriverQueryInput
  unit_exists: Boolean
  value_in: [Float]
  value_gt: Float
  value_lte: Float
  value_gte: Float
  value_lt: Float
}

type VehicleCompartmentCapacityVolumeUnit {
  symbol: String
}

input ProductUpdateInput {
  sku: String
  createdAt: DateTime
  gtin_unset: Boolean
  name: String
  owner: ProductOwnerUpdateInput
  weight: ProductWeightUpdateInput
  owner_unset: Boolean
  gtin: String
  name_unset: Boolean
  categories_unset: Boolean
  ids_unset: Boolean
  categories: ProductCategoriesRelationInput
  group: ProductGroupRelationInput
  group_unset: Boolean
  createdAt_unset: Boolean
  _id: ObjectId
  ids: [String]
  weight_unset: Boolean
  _id_unset: Boolean
  sku_unset: Boolean
}

input TransactionChannelExternalTargetMarketplaceQueryInput {
  key_lt: String
  key_gt: String
  key_gte: String
  AND: [TransactionChannelExternalTargetMarketplaceQueryInput!]
  key: String
  key_nin: [String]
  key_ne: String
  key_in: [String]
  OR: [TransactionChannelExternalTargetMarketplaceQueryInput!]
  key_lte: String
  key_exists: Boolean
}

input TourStopPickupQueryInput {
  shipments_in: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  AND: [TourStopPickupQueryInput!]
  OR: [TourStopPickupQueryInput!]
  shipments: [ObjectId]
}

type VehicleCompartmentCapacity {
  volume: VehicleCompartmentCapacityVolume
  weight: VehicleCompartmentCapacityWeight
}

type VehicleCostUnit {
  symbol: String
}

type VehicleWeight {
  unit: VehicleWeightUnit
  value: Float
}

type Mutation {
  deleteManyCatalogItems(query: CatalogItemQueryInput): DeleteManyPayload
  deleteManyCatalogs(query: CatalogQueryInput): DeleteManyPayload
  deleteManyCodeLists(query: CodeListQueryInput): DeleteManyPayload
  deleteManyCodes(query: CodeQueryInput): DeleteManyPayload
  deleteManyOrders(query: OrderQueryInput): DeleteManyPayload
  deleteManyPlaces(query: PlaceQueryInput): DeleteManyPayload
  deleteManyProductCategories(query: ProductCategoryQueryInput): DeleteManyPayload
  deleteManyProductClassifications(query: ProductClassificationQueryInput): DeleteManyPayload
  deleteManyProductGroups(query: ProductGroupQueryInput): DeleteManyPayload
  deleteManyProducts(query: ProductQueryInput): DeleteManyPayload
  deleteManyShipments(query: ShipmentQueryInput): DeleteManyPayload
  deleteManyShippingMethods(query: ShippingMethodQueryInput): DeleteManyPayload
  deleteManyTours(query: TourQueryInput): DeleteManyPayload
  deleteManyTransactionChannels(query: TransactionChannelQueryInput): DeleteManyPayload
  deleteManyVehicles(query: VehicleQueryInput): DeleteManyPayload
  deleteManyWorkspaces(query: WorkspaceQueryInput): DeleteManyPayload
  deleteOneCatalog(query: CatalogQueryInput!): Catalog
  deleteOneCatalogItem(query: CatalogItemQueryInput!): CatalogItem
  deleteOneCode(query: CodeQueryInput!): Code
  deleteOneCodeList(query: CodeListQueryInput!): CodeList
  deleteOneOrder(query: OrderQueryInput!): Order
  deleteOnePlace(query: PlaceQueryInput!): Place
  deleteOneProduct(query: ProductQueryInput!): Product
  deleteOneProductCategory(query: ProductCategoryQueryInput!): ProductCategory
  deleteOneProductClassification(query: ProductClassificationQueryInput!): ProductClassification
  deleteOneProductGroup(query: ProductGroupQueryInput!): ProductGroup
  deleteOneShipment(query: ShipmentQueryInput!): Shipment
  deleteOneShippingMethod(query: ShippingMethodQueryInput!): ShippingMethod
  deleteOneTour(query: TourQueryInput!): Tour
  deleteOneTransactionChannel(query: TransactionChannelQueryInput!): TransactionChannel
  deleteOneVehicle(query: VehicleQueryInput!): Vehicle
  deleteOneWorkspace(query: WorkspaceQueryInput!): Workspace
  insertManyCatalogItems(data: [CatalogItemInsertInput!]!): InsertManyPayload
  insertManyCatalogs(data: [CatalogInsertInput!]!): InsertManyPayload
  insertManyCodeLists(data: [CodeListInsertInput!]!): InsertManyPayload
  insertManyCodes(data: [CodeInsertInput!]!): InsertManyPayload
  insertManyOrders(data: [OrderInsertInput!]!): InsertManyPayload
  insertManyPlaces(data: [PlaceInsertInput!]!): InsertManyPayload
  insertManyProductCategories(data: [ProductCategoryInsertInput!]!): InsertManyPayload
  insertManyProductClassifications(data: [ProductClassificationInsertInput!]!): InsertManyPayload
  insertManyProductGroups(data: [ProductGroupInsertInput!]!): InsertManyPayload
  insertManyProducts(data: [ProductInsertInput!]!): InsertManyPayload
  insertManyShipments(data: [ShipmentInsertInput!]!): InsertManyPayload
  insertManyShippingMethods(data: [ShippingMethodInsertInput!]!): InsertManyPayload
  insertManyTours(data: [TourInsertInput!]!): InsertManyPayload
  insertManyTransactionChannels(data: [TransactionChannelInsertInput!]!): InsertManyPayload
  insertManyVehicles(data: [VehicleInsertInput!]!): InsertManyPayload
  insertManyWorkspaces(data: [WorkspaceInsertInput!]!): InsertManyPayload
  insertOneCatalog(data: CatalogInsertInput!): Catalog
  insertOneCatalogItem(data: CatalogItemInsertInput!): CatalogItem
  insertOneCode(data: CodeInsertInput!): Code
  insertOneCodeList(data: CodeListInsertInput!): CodeList
  insertOneOrder(data: OrderInsertInput!): Order
  insertOnePlace(data: PlaceInsertInput!): Place
  insertOneProduct(data: ProductInsertInput!): Product
  insertOneProductCategory(data: ProductCategoryInsertInput!): ProductCategory
  insertOneProductClassification(data: ProductClassificationInsertInput!): ProductClassification
  insertOneProductGroup(data: ProductGroupInsertInput!): ProductGroup
  insertOneShipment(data: ShipmentInsertInput!): Shipment
  insertOneShippingMethod(data: ShippingMethodInsertInput!): ShippingMethod
  insertOneTour(data: TourInsertInput!): Tour
  insertOneTransactionChannel(data: TransactionChannelInsertInput!): TransactionChannel
  insertOneVehicle(data: VehicleInsertInput!): Vehicle
  insertOneWorkspace(data: WorkspaceInsertInput!): Workspace
  replaceOneCatalog(query: CatalogQueryInput, data: CatalogInsertInput!): Catalog
  replaceOneCatalogItem(query: CatalogItemQueryInput, data: CatalogItemInsertInput!): CatalogItem
  replaceOneCode(query: CodeQueryInput, data: CodeInsertInput!): Code
  replaceOneCodeList(query: CodeListQueryInput, data: CodeListInsertInput!): CodeList
  replaceOneOrder(query: OrderQueryInput, data: OrderInsertInput!): Order
  replaceOnePlace(query: PlaceQueryInput, data: PlaceInsertInput!): Place
  replaceOneProduct(query: ProductQueryInput, data: ProductInsertInput!): Product
  replaceOneProductCategory(query: ProductCategoryQueryInput, data: ProductCategoryInsertInput!): ProductCategory
  replaceOneProductClassification(query: ProductClassificationQueryInput, data: ProductClassificationInsertInput!): ProductClassification
  replaceOneProductGroup(query: ProductGroupQueryInput, data: ProductGroupInsertInput!): ProductGroup
  replaceOneShipment(data: ShipmentInsertInput!, query: ShipmentQueryInput): Shipment
  replaceOneShippingMethod(query: ShippingMethodQueryInput, data: ShippingMethodInsertInput!): ShippingMethod
  replaceOneTour(query: TourQueryInput, data: TourInsertInput!): Tour
  replaceOneTransactionChannel(query: TransactionChannelQueryInput, data: TransactionChannelInsertInput!): TransactionChannel
  replaceOneVehicle(query: VehicleQueryInput, data: VehicleInsertInput!): Vehicle
  replaceOneWorkspace(query: WorkspaceQueryInput, data: WorkspaceInsertInput!): Workspace
  updateManyCatalogItems(query: CatalogItemQueryInput, set: CatalogItemUpdateInput!): UpdateManyPayload
  updateManyCatalogs(set: CatalogUpdateInput!, query: CatalogQueryInput): UpdateManyPayload
  updateManyCodeLists(query: CodeListQueryInput, set: CodeListUpdateInput!): UpdateManyPayload
  updateManyCodes(query: CodeQueryInput, set: CodeUpdateInput!): UpdateManyPayload
  updateManyOrders(query: OrderQueryInput, set: OrderUpdateInput!): UpdateManyPayload
  updateManyPlaces(query: PlaceQueryInput, set: PlaceUpdateInput!): UpdateManyPayload
  updateManyProductCategories(query: ProductCategoryQueryInput, set: ProductCategoryUpdateInput!): UpdateManyPayload
  updateManyProductClassifications(query: ProductClassificationQueryInput, set: ProductClassificationUpdateInput!): UpdateManyPayload
  updateManyProductGroups(query: ProductGroupQueryInput, set: ProductGroupUpdateInput!): UpdateManyPayload
  updateManyProducts(set: ProductUpdateInput!, query: ProductQueryInput): UpdateManyPayload
  updateManyShipments(query: ShipmentQueryInput, set: ShipmentUpdateInput!): UpdateManyPayload
  updateManyShippingMethods(query: ShippingMethodQueryInput, set: ShippingMethodUpdateInput!): UpdateManyPayload
  updateManyTours(query: TourQueryInput, set: TourUpdateInput!): UpdateManyPayload
  updateManyTransactionChannels(query: TransactionChannelQueryInput, set: TransactionChannelUpdateInput!): UpdateManyPayload
  updateManyVehicles(set: VehicleUpdateInput!, query: VehicleQueryInput): UpdateManyPayload
  updateManyWorkspaces(query: WorkspaceQueryInput, set: WorkspaceUpdateInput!): UpdateManyPayload
  updateOneCatalog(query: CatalogQueryInput, set: CatalogUpdateInput!): Catalog
  updateOneCatalogItem(query: CatalogItemQueryInput, set: CatalogItemUpdateInput!): CatalogItem
  updateOneCode(query: CodeQueryInput, set: CodeUpdateInput!): Code
  updateOneCodeList(set: CodeListUpdateInput!, query: CodeListQueryInput): CodeList
  updateOneOrder(query: OrderQueryInput, set: OrderUpdateInput!): Order
  updateOnePlace(query: PlaceQueryInput, set: PlaceUpdateInput!): Place
  updateOneProduct(query: ProductQueryInput, set: ProductUpdateInput!): Product
  updateOneProductCategory(set: ProductCategoryUpdateInput!, query: ProductCategoryQueryInput): ProductCategory
  updateOneProductClassification(query: ProductClassificationQueryInput, set: ProductClassificationUpdateInput!): ProductClassification
  updateOneProductGroup(query: ProductGroupQueryInput, set: ProductGroupUpdateInput!): ProductGroup
  updateOneShipment(query: ShipmentQueryInput, set: ShipmentUpdateInput!): Shipment
  updateOneShippingMethod(query: ShippingMethodQueryInput, set: ShippingMethodUpdateInput!): ShippingMethod
  updateOneTour(query: TourQueryInput, set: TourUpdateInput!): Tour
  updateOneTransactionChannel(query: TransactionChannelQueryInput, set: TransactionChannelUpdateInput!): TransactionChannel
  updateOneVehicle(query: VehicleQueryInput, set: VehicleUpdateInput!): Vehicle
  updateOneWorkspace(query: WorkspaceQueryInput, set: WorkspaceUpdateInput!): Workspace
  upsertOneCatalog(data: CatalogInsertInput!, query: CatalogQueryInput): Catalog
  upsertOneCatalogItem(data: CatalogItemInsertInput!, query: CatalogItemQueryInput): CatalogItem
  upsertOneCode(query: CodeQueryInput, data: CodeInsertInput!): Code
  upsertOneCodeList(query: CodeListQueryInput, data: CodeListInsertInput!): CodeList
  upsertOneOrder(query: OrderQueryInput, data: OrderInsertInput!): Order
  upsertOnePlace(query: PlaceQueryInput, data: PlaceInsertInput!): Place
  upsertOneProduct(data: ProductInsertInput!, query: ProductQueryInput): Product
  upsertOneProductCategory(query: ProductCategoryQueryInput, data: ProductCategoryInsertInput!): ProductCategory
  upsertOneProductClassification(query: ProductClassificationQueryInput, data: ProductClassificationInsertInput!): ProductClassification
  upsertOneProductGroup(query: ProductGroupQueryInput, data: ProductGroupInsertInput!): ProductGroup
  upsertOneShipment(query: ShipmentQueryInput, data: ShipmentInsertInput!): Shipment
  upsertOneShippingMethod(query: ShippingMethodQueryInput, data: ShippingMethodInsertInput!): ShippingMethod
  upsertOneTour(query: TourQueryInput, data: TourInsertInput!): Tour
  upsertOneTransactionChannel(query: TransactionChannelQueryInput, data: TransactionChannelInsertInput!): TransactionChannel
  upsertOneVehicle(query: VehicleQueryInput, data: VehicleInsertInput!): Vehicle
  upsertOneWorkspace(data: WorkspaceInsertInput!, query: WorkspaceQueryInput): Workspace
}

type ShippingMethodPickupPoint {
  place: ObjectId
}

input ShipmentLineQuantityUpdateInput {
  value_unset: Boolean
  value: Int
  value_inc: Int
}

input PlaceAddressInsertInput {
  locality: String
  postalCode: String
  street: String
  country: PlaceAddressCountryInsertInput
}

input OrderLineProductInsertInput {
  _id: ObjectId
}

input OrderLineQuantityInsertInput {
  value: Int
  unit: OrderLineQuantityUnitInsertInput
}

input OrderLineQuantityUpdateInput {
  value: Int
  value_unset: Boolean
  value_inc: Int
  unit: OrderLineQuantityUnitUpdateInput
  unit_unset: Boolean
}

input VehicleCapacityVolumeUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TransactionChannelFilterQueryInput {
  AND: [TransactionChannelFilterQueryInput!]
  isOrdered: Boolean
  status: String
  status_gt: String
  status_lt: String
  status_gte: String
  status_exists: Boolean
  status_ne: String
  isOrdered_exists: Boolean
  status_nin: [String]
  OR: [TransactionChannelFilterQueryInput!]
  status_lte: String
  isOrdered_ne: Boolean
  status_in: [String]
}

input VehicleCostDriverQueryInput {
  factor_in: [Float]
  type: String
  unit: VehicleCostDriverUnitQueryInput
  factor_lte: Float
  OR: [VehicleCostDriverQueryInput!]
  type_exists: Boolean
  factor_lt: Float
  type_ne: String
  type_gte: String
  factor_exists: Boolean
  factor_gt: Float
  type_lt: String
  type_gt: String
  type_nin: [String]
  factor_gte: Float
  unit_exists: Boolean
  factor_nin: [Float]
  type_lte: String
  type_in: [String]
  factor: Float
  factor_ne: Float
  AND: [VehicleCostDriverQueryInput!]
}

input VehicleFeatureUpdateInput {
  name: String
  name_unset: Boolean
  key: String
  key_unset: Boolean
}

input CodeUpdateInput {
  list: CodeListRelationInput
  symbol: String
  key: String
  name: String
  _id_unset: Boolean
  key_unset: Boolean
  symbol_unset: Boolean
  _id: ObjectId
  list_unset: Boolean
  name_unset: Boolean
}

input TourUpdateInput {
  name_unset: Boolean
  _id: ObjectId
  legs_unset: Boolean
  vehicle: TourVehicleRelationInput
  _id_unset: Boolean
  date_unset: Boolean
  duration: TourDurationUpdateInput
  vehicle_unset: Boolean
  distance_unset: Boolean
  shipments_unset: Boolean
  legs: [TourLegUpdateInput]
  name: String
  distance: TourDistanceUpdateInput
  stops_unset: Boolean
  duration_unset: Boolean
  date: DateTime
  stops: [TourStopUpdateInput]
  shipments: TourShipmentsRelationInput
}

input ProductOwnerUpdateInput {
  workspace_unset: Boolean
  workspace: ProductOwnerWorkspaceRelationInput
}

input TourLegPayloadVolumeUpdateInput {
  unit_unset: Boolean
  value: Float
  value_unset: Boolean
  value_inc: Float
  unit: TourLegPayloadVolumeUnitUpdateInput
}

type OrderSeller {
  name: String
  workspace: Workspace
}

enum PlaceSortByInput {
  GLN_ASC
  GLN_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

input TransactionChannelInternalTargetWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input ShippingMethodOwnerUpdateInput {
  workspace: ShippingMethodOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

input ShipmentDeliveryUpdateInput {
  place: ShipmentDeliveryPlaceRelationInput
  place_unset: Boolean
}

input WorkspaceMarketplaceQueryInput {
  OR: [WorkspaceMarketplaceQueryInput!]
  key_lt: String
  key_nin: [String]
  key_ne: String
  key_in: [String]
  AND: [WorkspaceMarketplaceQueryInput!]
  key_gte: String
  key_exists: Boolean
  key: String
  key_lte: String
  key_gt: String
}

input VehicleCompartmentUpdateInput {
  name_unset: Boolean
  capacity: VehicleCompartmentCapacityUpdateInput
  capacity_unset: Boolean
  features: [VehicleCompartmentFeatureUpdateInput]
  features_unset: Boolean
  name: String
}

input VehicleCompartmentCapacityVolumeUpdateInput {
  unit: VehicleCompartmentCapacityVolumeUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input TourStopDeliveryQueryInput {
  shipments_in: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  AND: [TourStopDeliveryQueryInput!]
  OR: [TourStopDeliveryQueryInput!]
  shipments: [ObjectId]
}

enum ShipmentSortByInput {
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
}

input VehicleCostDriverUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourLegPayloadWeightInsertInput {
  unit: TourLegPayloadWeightUnitInsertInput
  value: Int
}

type ShippingMethod {
  _id: ObjectId
  description: String
  ids: [String]
  name: String
  owner: ShippingMethodOwner
  pickup: ShippingMethodPickup
  type: String
}

input ShippingMethodPickupInsertInput {
  points: [ShippingMethodPickupPointInsertInput]
}

input OrderShippingAddressCountryInsertInput {
  name: String
  code: String
}

type TourStop {
  actualTimeOfArrival: String
  actualTimeOfDeparture: String
  delivery: TourStopDelivery
  duration: TourStopDuration
  estimatedTimeOfArrival: String
  estimatedTimeOfDeparture: String
  pickup: TourStopPickup
  place: ObjectId
  tasks: [TourStopTask]
}

input OrderBrokerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input TourLegDestinationQueryInput {
  place_gt: ObjectId
  place_gte: ObjectId
  place: ObjectId
  place_nin: [ObjectId]
  AND: [TourLegDestinationQueryInput!]
  place_lte: ObjectId
  place_exists: Boolean
  place_ne: ObjectId
  OR: [TourLegDestinationQueryInput!]
  place_in: [ObjectId]
  place_lt: ObjectId
}

type TourLegDurationUnit {
  symbol: String
}

input VehicleCompartmentCapacityVolumeUnitInsertInput {
  symbol: String
}

input ProductClassificationUpdateInput {
  name_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  key: String
  key_unset: Boolean
  name: String
}

input CodeInsertInput {
  _id: ObjectId
  key: String
  list: CodeListRelationInput
  name: String
  symbol: String
}

input OrderLineItemUpdateInput {
  _id_unset: Boolean
  _id: ObjectId
}

type TourDurationUnit {
  symbol: String
}

input ProductGroupQueryInput {
  _id_in: [ObjectId]
  OR: [ProductGroupQueryInput!]
  name: String
  name_gte: String
  _id_lt: ObjectId
  name_in: [String]
  _id: ObjectId
  _id_nin: [ObjectId]
  name_lt: String
  _id_lte: ObjectId
  name_exists: Boolean
  AND: [ProductGroupQueryInput!]
  _id_exists: Boolean
  _id_gte: ObjectId
  name_nin: [String]
  name_ne: String
  name_gt: String
  name_lte: String
  _id_gt: ObjectId
  _id_ne: ObjectId
}

input VehicleCapacityWeightUnitInsertInput {
  symbol: String
}

input CatalogItemsRelationInput {
  create: [CatalogItemInsertInput]
  link: [ObjectId]
}

input TourLegDurationUnitQueryInput {
  OR: [TourLegDurationUnitQueryInput!]
  symbol_exists: Boolean
  symbol_in: [String]
  symbol_nin: [String]
  symbol_gt: String
  symbol_lte: String
  symbol_gte: String
  symbol_ne: String
  symbol_lt: String
  AND: [TourLegDurationUnitQueryInput!]
  symbol: String
}

type VehicleCapacityWeight {
  unit: VehicleCapacityWeightUnit
  value: Float
}

input OrderLineQuantityUnitQueryInput {
  text_in: [String]
  symbol_gt: String
  code_in: [String]
  code_exists: Boolean
  text_nin: [String]
  code: String
  symbol_in: [String]
  text_lt: String
  symbol_nin: [String]
  code_gte: String
  symbol_lte: String
  symbol_exists: Boolean
  OR: [OrderLineQuantityUnitQueryInput!]
  text_ne: String
  text_gte: String
  text_exists: Boolean
  code_lte: String
  code_ne: String
  symbol_lt: String
  symbol_ne: String
  AND: [OrderLineQuantityUnitQueryInput!]
  code_lt: String
  code_gt: String
  text_lte: String
  text_gt: String
  symbol: String
  symbol_gte: String
  text: String
  code_nin: [String]
}

input CatalogItemWeightUnitUpdateInput {
  code: String
  code_unset: Boolean
}

input TransactionChannelUpdateInput {
  direction: String
  internalTarget: TransactionChannelInternalTargetUpdateInput
  role_unset: Boolean
  _id: ObjectId
  externalTarget: TransactionChannelExternalTargetUpdateInput
  externalTarget_unset: Boolean
  filter: TransactionChannelFilterUpdateInput
  resource: String
  direction_unset: Boolean
  role: String
  _id_unset: Boolean
  resource_unset: Boolean
  internalTarget_unset: Boolean
  filter_unset: Boolean
}

input TransactionChannelExternalTargetEnterpriseUpdateInput {
  id_unset: Boolean
  id: String
}

input ShipmentQueryInput {
  date_exists: Boolean
  _id_gte: ObjectId
  date_lt: String
  date_nin: [String]
  lines_nin: [ShipmentLineQueryInput]
  lines_in: [ShipmentLineQueryInput]
  pickup_exists: Boolean
  _id_nin: [ObjectId]
  date_gt: String
  _id_exists: Boolean
  _id_ne: ObjectId
  date: String
  date_lte: String
  _id_lte: ObjectId
  _id_in: [ObjectId]
  date_in: [String]
  lines: [ShipmentLineQueryInput]
  AND: [ShipmentQueryInput!]
  date_gte: String
  _id: ObjectId
  OR: [ShipmentQueryInput!]
  _id_lt: ObjectId
  date_ne: String
  pickup: ShipmentPickupQueryInput
  delivery_exists: Boolean
  lines_exists: Boolean
  _id_gt: ObjectId
  delivery: ShipmentDeliveryQueryInput
}

input ShipmentPickupPlaceRelationInput {
  create: PlaceInsertInput
  link: ObjectId
}

input VehicleCapacityWeightInsertInput {
  unit: VehicleCapacityWeightUnitInsertInput
  value: Float
}

input VehicleCompartmentCapacityVolumeInsertInput {
  unit: VehicleCompartmentCapacityVolumeUnitInsertInput
  value: Float
}

input OrderLineQuantityUnitInsertInput {
  code: String
  symbol: String
  text: String
}

type CatalogItemOwner {
  workspace: Workspace
}

input TourStopTaskDurationUpdateInput {
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: TourStopTaskDurationUnitUpdateInput
}

type VehicleBrand {
  name: String
}

input CatalogItemOwnerQueryInput {
  OR: [CatalogItemOwnerQueryInput!]
  AND: [CatalogItemOwnerQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
}

type ProductWeight {
  unit: ProductWeightUnit
  value: Float
}

input VehicleCostUnitInsertInput {
  symbol: String
}

input ProductGroupRelationInput {
  create: ProductGroupInsertInput
  link: ObjectId
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type TransactionChannelFilter {
  isOrdered: Boolean
  status: String
}

input VehicleCompartmentCapacityWeightUnitQueryInput {
  symbol_gte: String
  symbol_lt: String
  symbol_nin: [String]
  symbol_exists: Boolean
  symbol_ne: String
  AND: [VehicleCompartmentCapacityWeightUnitQueryInput!]
  symbol_in: [String]
  symbol_gt: String
  OR: [VehicleCompartmentCapacityWeightUnitQueryInput!]
  symbol: String
  symbol_lte: String
}

type TourStopTaskDurationUnit {
  symbol: String
}

enum ProductGroupSortByInput {
  _ID_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
}

input VehicleCapacityInsertInput {
  volume: VehicleCapacityVolumeInsertInput
  weight: VehicleCapacityWeightInsertInput
}

input TourLegDistanceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input PlaceAddressCountryUpdateInput {
  ids_unset: Boolean
  name: String
  name_unset: Boolean
  code: String
  code_unset: Boolean
  ids: [String]
}

input WorkspaceEnterpriseQueryInput {
  ids: [String]
  name_lt: String
  name_nin: [String]
  name_ne: String
  ids_in: [String]
  ids_exists: Boolean
  name_in: [String]
  name_gt: String
  OR: [WorkspaceEnterpriseQueryInput!]
  name_gte: String
  name_exists: Boolean
  name_lte: String
  AND: [WorkspaceEnterpriseQueryInput!]
  ids_nin: [String]
  name: String
}

type VehicleCompartmentCapacityWeight {
  unit: VehicleCompartmentCapacityWeightUnit
  value: Float
}

input OrderLineQuantityQueryInput {
  value_in: [Int]
  AND: [OrderLineQuantityQueryInput!]
  value_ne: Int
  value_lt: Int
  value_lte: Int
  value_exists: Boolean
  value_gt: Int
  value_gte: Int
  value_nin: [Int]
  OR: [OrderLineQuantityQueryInput!]
  unit: OrderLineQuantityUnitQueryInput
  unit_exists: Boolean
  value: Int
}

input ProductWeightUnitInsertInput {
  code: String
}

input TourLegDestinationUpdateInput {
  place: ObjectId
  place_unset: Boolean
}

type Place {
  _id: ObjectId
  address: PlaceAddress
  geo: PlaceGeo
  gln: String
  ids: [String]
  name: String
  owner: PlaceOwner
}

input ShippingMethodPickupQueryInput {
  points_nin: [ShippingMethodPickupPointQueryInput]
  points_exists: Boolean
  AND: [ShippingMethodPickupQueryInput!]
  OR: [ShippingMethodPickupQueryInput!]
  points: [ShippingMethodPickupPointQueryInput]
  points_in: [ShippingMethodPickupPointQueryInput]
}

input TourStopTaskDurationQueryInput {
  unit_exists: Boolean
  value_gt: Float
  value_lte: Float
  value_in: [Float]
  unit: TourStopTaskDurationUnitQueryInput
  value_gte: Float
  value_nin: [Float]
  value_ne: Float
  OR: [TourStopTaskDurationQueryInput!]
  value: Float
  value_exists: Boolean
  value_lt: Float
  AND: [TourStopTaskDurationQueryInput!]
}

type OrderLineProduct {
  _id: ObjectId
}

input TransactionChannelFilterUpdateInput {
  isOrdered: Boolean
  isOrdered_unset: Boolean
  status: String
  status_unset: Boolean
}

type TourStopPickup {
  shipments: [ObjectId]
}

input VehicleCostResourceInsertInput {
  unit: VehicleCostResourceUnitInsertInput
  currency: VehicleCostResourceCurrencyInsertInput
  key: String
  type: String
}

input TransactionChannelInsertInput {
  role: String
  _id: ObjectId
  direction: String
  externalTarget: TransactionChannelExternalTargetInsertInput
  filter: TransactionChannelFilterInsertInput
  internalTarget: TransactionChannelInternalTargetInsertInput
  resource: String
}

input OrderShippingAddressUpdateInput {
  country: OrderShippingAddressCountryUpdateInput
  street: String
  place_unset: Boolean
  name: String
  geo_unset: Boolean
  locality: String
  country_unset: Boolean
  postalCode: String
  name_unset: Boolean
  geo: OrderShippingAddressGeoUpdateInput
  postalCode_unset: Boolean
  street_unset: Boolean
  locality_unset: Boolean
  phone: String
  phone_unset: Boolean
  place: OrderShippingAddressPlaceRelationInput
}

input VehicleBrandQueryInput {
  name_nin: [String]
  name_exists: Boolean
  OR: [VehicleBrandQueryInput!]
  name: String
  name_lte: String
  name_in: [String]
  name_gt: String
  name_gte: String
  name_lt: String
  name_ne: String
  AND: [VehicleBrandQueryInput!]
}

type TourDistance {
  unit: TourDistanceUnit
  value: Float
}

type TourStopTaskDuration {
  unit: TourStopTaskDurationUnit
  value: Float
}

type TourStopDuration {
  unit: TourStopDurationUnit
  value: Float
}

input TourDurationUpdateInput {
  unit: TourDurationUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input ProductWeightQueryInput {
  value_ne: Float
  value_in: [Float]
  value_nin: [Float]
  value_gte: Float
  value_lt: Float
  value_lte: Float
  value_exists: Boolean
  value: Float
  value_gt: Float
  AND: [ProductWeightQueryInput!]
  OR: [ProductWeightQueryInput!]
  unit: ProductWeightUnitQueryInput
  unit_exists: Boolean
}

type ProductClassification {
  _id: ObjectId
  key: String
  name: String
}

input VehicleCostDriverUpdateInput {
  unit: VehicleCostDriverUnitUpdateInput
  unit_unset: Boolean
  factor: Float
  factor_inc: Float
  factor_unset: Boolean
  type: String
  type_unset: Boolean
}

input OrderShippingAddressPlaceRelationInput {
  link: ObjectId
  create: PlaceInsertInput
}

input ProductCategoryInsertInput {
  hierarchyLevel: Int
  id: String
  name: String
  _id: ObjectId
  ids: [String]
  children: ProductCategoryChildrenRelationInput
  classification: ProductCategoryClassificationRelationInput
}

input ProductGroupUpdateInput {
  name_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  name: String
}

input TourDistanceUnitInsertInput {
  symbol: String
}

enum TourSortByInput {
  _ID_DESC
  DATE_ASC
  DATE_DESC
  NAME_ASC
  NAME_DESC
  VEHICLE_ASC
  VEHICLE_DESC
  _ID_ASC
}

input TourLegPayloadWeightUpdateInput {
  value: Int
  value_inc: Int
  value_unset: Boolean
  unit: TourLegPayloadWeightUnitUpdateInput
  unit_unset: Boolean
}

input TourVehicleRelationInput {
  link: ObjectId
  create: VehicleInsertInput
}

type PlaceAddressCountry {
  code: String
  ids: [String]
  name: String
}

type CodeList {
  _id: ObjectId
  ids: [String]
  items: [Code]
  key: String
  name: String
}

input VehicleCompartmentCapacityWeightQueryInput {
  value_nin: [Float]
  OR: [VehicleCompartmentCapacityWeightQueryInput!]
  unit_exists: Boolean
  value_gt: Float
  value_ne: Float
  value_gte: Float
  value_lte: Float
  value_in: [Float]
  value: Float
  AND: [VehicleCompartmentCapacityWeightQueryInput!]
  value_lt: Float
  value_exists: Boolean
  unit: VehicleCompartmentCapacityWeightUnitQueryInput
}

type Catalog {
  _id: ObjectId
  items: [CatalogItem]
}

input PlaceOwnerInsertInput {
  workspace: PlaceOwnerWorkspaceRelationInput
}

input VehicleWeightUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourLegUpdateInput {
  duration_unset: Boolean
  payload_unset: Boolean
  distance: TourLegDistanceUpdateInput
  origin: TourLegOriginUpdateInput
  payload: TourLegPayloadUpdateInput
  distance_unset: Boolean
  duration: TourLegDurationUpdateInput
  origin_unset: Boolean
  destination: TourLegDestinationUpdateInput
  destination_unset: Boolean
}

input TourLegDurationUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: TourLegDurationUnitUpdateInput
  unit_unset: Boolean
}

input VehicleCompartmentCapacityVolumeQueryInput {
  value_gte: Float
  unit: VehicleCompartmentCapacityVolumeUnitQueryInput
  value_ne: Float
  value_gt: Float
  value_in: [Float]
  value_exists: Boolean
  OR: [VehicleCompartmentCapacityVolumeQueryInput!]
  unit_exists: Boolean
  value_nin: [Float]
  value: Float
  value_lt: Float
  value_lte: Float
  AND: [VehicleCompartmentCapacityVolumeQueryInput!]
}

type Order {
  _id: ObjectId
  broker: OrderBroker
  buyer: OrderBuyer
  confirmed: Boolean
  date: DateTime
  lines: [OrderLine]
  number: String
  seller: OrderSeller
  shippingAddress: OrderShippingAddress
  shippingMethod: ShippingMethod
  url: String
}

type OrderLineItem {
  _id: ObjectId
}

input PlaceGeoInsertInput {
  coordinates: [Float]
  type: String
}

input CatalogItemProductRelationInput {
  create: ProductInsertInput
  link: ObjectId
}

input ProductWeightUpdateInput {
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: ProductWeightUnitUpdateInput
}

input VehicleWeightInsertInput {
  unit: VehicleWeightUnitInsertInput
  value: Float
}

input TourLegDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourInsertInput {
  legs: [TourLegInsertInput]
  name: String
  duration: TourDurationInsertInput
  shipments: TourShipmentsRelationInput
  stops: [TourStopInsertInput]
  vehicle: TourVehicleRelationInput
  distance: TourDistanceInsertInput
  _id: ObjectId
  date: DateTime
}

type TransactionChannelExternalTargetEnterprise {
  id: String
}

input PlaceAddressCountryInsertInput {
  name: String
  code: String
  ids: [String]
}

input ProductOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input VehicleCompartmentFeatureUpdateInput {
  name_unset: Boolean
  key: String
  key_unset: Boolean
  name: String
}

input TourStopTaskDurationInsertInput {
  unit: TourStopTaskDurationUnitInsertInput
  value: Float
}

type TourDuration {
  unit: TourDurationUnit
  value: Float
}

type TourLegPayload {
  shipments: [ObjectId]
  volume: TourLegPayloadVolume
  weight: TourLegPayloadWeight
}

input ShippingMethodPickupPointQueryInput {
  OR: [ShippingMethodPickupPointQueryInput!]
  place_nin: [ObjectId]
  place_exists: Boolean
  place_ne: ObjectId
  place_gte: ObjectId
  place: ObjectId
  place_gt: ObjectId
  AND: [ShippingMethodPickupPointQueryInput!]
  place_lt: ObjectId
  place_lte: ObjectId
  place_in: [ObjectId]
}

type OrderLinePriceCurrency {
  code: String
  symbol: String
  text: String
}

input CodeListRelationInput {
  create: CodeListInsertInput
  link: ObjectId
}

input VehicleBrandUpdateInput {
  name: String
  name_unset: Boolean
}

input VehicleCapacityWeightUpdateInput {
  value_unset: Boolean
  value_inc: Float
  unit: VehicleCapacityWeightUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

input TransactionChannelInternalTargetUpdateInput {
  workspace: TransactionChannelInternalTargetWorkspaceRelationInput
  workspace_unset: Boolean
}

input CatalogItemWeightQueryInput {
  value_gt: Float
  OR: [CatalogItemWeightQueryInput!]
  unit: CatalogItemWeightUnitQueryInput
  unit_exists: Boolean
  value_in: [Float]
  value_nin: [Float]
  value_exists: Boolean
  AND: [CatalogItemWeightQueryInput!]
  value: Float
  value_gte: Float
  value_lt: Float
  value_ne: Float
  value_lte: Float
}

input TourStopDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type TransactionChannel {
  _id: ObjectId
  direction: String
  externalTarget: TransactionChannelExternalTarget
  filter: TransactionChannelFilter
  internalTarget: TransactionChannelInternalTarget
  resource: String
  role: String
}

input VehicleCostResourceQueryInput {
  key_lte: String
  type_exists: Boolean
  key_lt: String
  type_gte: String
  currency: VehicleCostResourceCurrencyQueryInput
  type_in: [String]
  unit_exists: Boolean
  type_ne: String
  key_gt: String
  OR: [VehicleCostResourceQueryInput!]
  currency_exists: Boolean
  key_exists: Boolean
  type: String
  type_lte: String
  type_nin: [String]
  type_lt: String
  unit: VehicleCostResourceUnitQueryInput
  key_gte: String
  key: String
  key_nin: [String]
  key_ne: String
  type_gt: String
  AND: [VehicleCostResourceQueryInput!]
  key_in: [String]
}

input VehicleCompartmentFeatureInsertInput {
  key: String
  name: String
}

input TourDurationInsertInput {
  unit: TourDurationUnitInsertInput
  value: Float
}

input TourStopTaskDurationUnitQueryInput {
  symbol_lt: String
  AND: [TourStopTaskDurationUnitQueryInput!]
  symbol_lte: String
  symbol_exists: Boolean
  symbol_nin: [String]
  symbol_gt: String
  symbol: String
  symbol_ne: String
  symbol_gte: String
  OR: [TourStopTaskDurationUnitQueryInput!]
  symbol_in: [String]
}

input TransactionChannelInternalTargetInsertInput {
  workspace: TransactionChannelInternalTargetWorkspaceRelationInput
}

input VehicleModelQueryInput {
  name_nin: [String]
  name_exists: Boolean
  date_gt: DateTime
  date_gte: DateTime
  AND: [VehicleModelQueryInput!]
  date_nin: [DateTime]
  date: DateTime
  OR: [VehicleModelQueryInput!]
  date_lt: DateTime
  name: String
  name_lte: String
  name_gte: String
  name_lt: String
  name_in: [String]
  date_lte: DateTime
  date_ne: DateTime
  name_ne: String
  date_in: [DateTime]
  date_exists: Boolean
  name_gt: String
}

input VehicleCapacityQueryInput {
  volume: VehicleCapacityVolumeQueryInput
  volume_exists: Boolean
  weight: VehicleCapacityWeightQueryInput
  weight_exists: Boolean
  AND: [VehicleCapacityQueryInput!]
  OR: [VehicleCapacityQueryInput!]
}

input VehicleFeatureInsertInput {
  key: String
  name: String
}

input ProductCategoryChildrenRelationInput {
  link: [ObjectId]
  create: [ProductCategoryInsertInput]
}

input VehicleCostUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourLegInsertInput {
  origin: TourLegOriginInsertInput
  payload: TourLegPayloadInsertInput
  destination: TourLegDestinationInsertInput
  distance: TourLegDistanceInsertInput
  duration: TourLegDurationInsertInput
}

input ShippingMethodOwnerInsertInput {
  workspace: ShippingMethodOwnerWorkspaceRelationInput
}

input OrderBuyerInsertInput {
  person: ObjectId
  phone: String
  email: String
  name: String
}

input PlaceGeoQueryInput {
  coordinates_nin: [Float]
  type_gte: String
  type_ne: String
  OR: [PlaceGeoQueryInput!]
  type: String
  type_lt: String
  coordinates_in: [Float]
  AND: [PlaceGeoQueryInput!]
  coordinates: [Float]
  type_lte: String
  type_exists: Boolean
  type_in: [String]
  coordinates_exists: Boolean
  type_nin: [String]
  type_gt: String
}

type VehicleCostResourceUnit {
  symbol: String
}

input ShippingMethodUpdateInput {
  name: String
  description: String
  description_unset: Boolean
  pickup_unset: Boolean
  name_unset: Boolean
  owner: ShippingMethodOwnerUpdateInput
  _id_unset: Boolean
  ids: [String]
  type: String
  _id: ObjectId
  owner_unset: Boolean
  type_unset: Boolean
  pickup: ShippingMethodPickupUpdateInput
  ids_unset: Boolean
}

input ShippingMethodPickupUpdateInput {
  points: [ShippingMethodPickupPointUpdateInput]
  points_unset: Boolean
}

type CatalogItem {
  _id: ObjectId
  categories: [ObjectId]
  createdAt: DateTime
  ids: [String]
  name: String
  owner: CatalogItemOwner
  product: Product
  sku: String
  weight: CatalogItemWeight
}

input ProductCategoryClassificationRelationInput {
  create: ProductClassificationInsertInput
  link: ObjectId
}

input VehicleCostResourceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type ShipmentLine {
  name: String
  product: ObjectId
  quantity: ShipmentLineQuantity
}

type VehicleCapacityVolume {
  unit: VehicleCapacityVolumeUnit
  value: Float
}

input VehicleModelInsertInput {
  date: DateTime
  name: String
}

input PlaceUpdateInput {
  owner_unset: Boolean
  ids_unset: Boolean
  gln_unset: Boolean
  geo: PlaceGeoUpdateInput
  _id: ObjectId
  name_unset: Boolean
  address_unset: Boolean
  geo_unset: Boolean
  _id_unset: Boolean
  ids: [String]
  owner: PlaceOwnerUpdateInput
  address: PlaceAddressUpdateInput
  gln: String
  name: String
}
