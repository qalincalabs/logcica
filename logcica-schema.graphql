input TourDistanceQueryInput {
  unit_exists: Boolean
  value_in: [Float]
  value_gt: Float
  value_lte: Float
  value_nin: [Float]
  value_ne: Float
  AND: [TourDistanceQueryInput!]
  value_exists: Boolean
  value_gte: Float
  OR: [TourDistanceQueryInput!]
  unit: TourDistanceUnitQueryInput
  value: Float
  value_lt: Float
}

type TourLegDestination {
  place: ObjectId
}

type ProductProducer {
  workspace: Workspace
}

enum TourSortByInput {
  _ID_DESC
  DATE_ASC
  DATE_DESC
  NAME_ASC
  NAME_DESC
  VEHICLE_ASC
  VEHICLE_DESC
  _ID_ASC
}

input VehicleBrandInsertInput {
  name: String
}

input ProductNutrientListInsertInput {
  nutrient: ObjectId
  quantity: ProductNutrientListQuantityInsertInput
}

type OrderSeller {
  name: String
  workspace: Workspace
}

input TourLegDistanceUnitQueryInput {
  symbol_lte: String
  symbol_exists: Boolean
  symbol_ne: String
  symbol_lt: String
  AND: [TourLegDistanceUnitQueryInput!]
  symbol_nin: [String]
  OR: [TourLegDistanceUnitQueryInput!]
  symbol_gt: String
  symbol_gte: String
  symbol_in: [String]
  symbol: String
}

input VehicleCompartmentCapacityWeightQueryInput {
  value_ne: Float
  value_lte: Float
  value_exists: Boolean
  value_gte: Float
  value_lt: Float
  value_gt: Float
  value_in: [Float]
  AND: [VehicleCompartmentCapacityWeightQueryInput!]
  unit_exists: Boolean
  value: Float
  value_nin: [Float]
  OR: [VehicleCompartmentCapacityWeightQueryInput!]
  unit: VehicleCompartmentCapacityWeightUnitQueryInput
}

input TourDurationUnitInsertInput {
  symbol: String
}

input PlaceAddressCountryInsertInput {
  code: String
  ids: [String]
  name: String
}

input InventoryItemQuantityUnitUpdateInput {
  code: String
  code_unset: Boolean
}

input ProductNutrientListQuantityQueryInput {
  unit_nin: [ObjectId]
  unit_exists: Boolean
  value_nin: [Int]
  AND: [ProductNutrientListQuantityQueryInput!]
  unit_gt: ObjectId
  unit_lt: ObjectId
  unit_ne: ObjectId
  value_ne: Int
  unit: ObjectId
  value: Int
  value_lte: Int
  unit_in: [ObjectId]
  unit_gte: ObjectId
  value_gte: Int
  value_lt: Int
  value_in: [Int]
  value_gt: Int
  OR: [ProductNutrientListQuantityQueryInput!]
  unit_lte: ObjectId
  value_exists: Boolean
}

input ProductNutrientListQueryInput {
  nutrient_lte: ObjectId
  nutrient_nin: [ObjectId]
  nutrient_ne: ObjectId
  nutrient_lt: ObjectId
  quantity: ProductNutrientListQuantityQueryInput
  nutrient_gte: ObjectId
  nutrient: ObjectId
  nutrient_exists: Boolean
  nutrient_gt: ObjectId
  AND: [ProductNutrientListQueryInput!]
  nutrient_in: [ObjectId]
  quantity_exists: Boolean
  OR: [ProductNutrientListQueryInput!]
}

input OrderLinePriceQueryInput {
  value_ne: Float
  value_lt: Float
  AND: [OrderLinePriceQueryInput!]
  currency: OrderLinePriceCurrencyQueryInput
  value: Float
  value_exists: Boolean
  value_gt: Float
  value_nin: [Float]
  OR: [OrderLinePriceQueryInput!]
  currency_exists: Boolean
  value_gte: Float
  value_lte: Float
  value_in: [Float]
}

type TourDraftOptimisation {
  status: String
}

enum AreaSortByInput {
  _ID_ASC
  _ID_DESC
  CODE_ASC
  CODE_DESC
  NAME_ASC
  NAME_DESC
}

input OrderShippingAddressCountryInsertInput {
  name: String
  code: String
}

input CatalogOwnerUpdateInput {
  workspace: CatalogOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

type Area {
  _id: ObjectId
  code: String
  name: String
  types: [String]
  withinAreas: [ObjectId]
}

input TourLegQueryInput {
  duration_exists: Boolean
  origin: TourLegOriginQueryInput
  payload: TourLegPayloadQueryInput
  destination_exists: Boolean
  distance_exists: Boolean
  duration: TourLegDurationQueryInput
  destination: TourLegDestinationQueryInput
  distance: TourLegDistanceQueryInput
  origin_exists: Boolean
  payload_exists: Boolean
  OR: [TourLegQueryInput!]
  AND: [TourLegQueryInput!]
}

input TourStopDurationQueryInput {
  value_gt: Float
  value_lte: Float
  value_in: [Float]
  value: Float
  value_lt: Float
  value_ne: Float
  value_nin: [Float]
  unit: TourStopDurationUnitQueryInput
  OR: [TourStopDurationQueryInput!]
  value_gte: Float
  value_exists: Boolean
  AND: [TourStopDurationQueryInput!]
  unit_exists: Boolean
}

input TourDraftDistanceQueryInput {
  OR: [TourDraftDistanceQueryInput!]
  value_nin: [Float]
  unit: TourDraftDistanceUnitQueryInput
  value_gt: Float
  value_in: [Float]
  value_exists: Boolean
  AND: [TourDraftDistanceQueryInput!]
  value_lt: Float
  value_lte: Float
  value_ne: Float
  unit_exists: Boolean
  value: Float
  value_gte: Float
}

type ShippingMethodPickupPoint {
  place: ObjectId
}

type TourLegDurationUnit {
  symbol: String
}

type OfferPrice {
  currency: OfferPriceCurrency
  value: Float
}

input ShipmentWeightInsertInput {
  value: Float
}

input ShipmentWeightQueryInput {
  value_lt: Float
  value_lte: Float
  value_exists: Boolean
  AND: [ShipmentWeightQueryInput!]
  value_ne: Float
  value: Float
  value_in: [Float]
  value_gte: Float
  OR: [ShipmentWeightQueryInput!]
  value_nin: [Float]
  value_gt: Float
}

input ShipmentLineQuantityQueryInput {
  value_lt: Int
  OR: [ShipmentLineQuantityQueryInput!]
  value_gte: Int
  value_nin: [Int]
  AND: [ShipmentLineQuantityQueryInput!]
  value: Int
  value_ne: Int
  value_in: [Int]
  value_exists: Boolean
  value_gt: Int
  value_lte: Int
}

enum ProductCategorySortByInput {
  _ID_ASC
  _ID_DESC
  CLASSIFICATION_ASC
  HIERARCHYLEVEL_ASC
  ID_ASC
  NAME_ASC
  NAME_DESC
  CLASSIFICATION_DESC
  HIERARCHYLEVEL_DESC
  ID_DESC
}

input ProductCategoryChildrenRelationInput {
  create: [ProductCategoryInsertInput]
  link: [ObjectId]
}

input ProductClassificationQueryInput {
  name_in: [String]
  key_in: [String]
  key_lt: String
  AND: [ProductClassificationQueryInput!]
  name_gt: String
  key_gt: String
  key_exists: Boolean
  _id_nin: [ObjectId]
  name_gte: String
  _id_ne: ObjectId
  _id_lte: ObjectId
  name_lte: String
  name_lt: String
  _id: ObjectId
  OR: [ProductClassificationQueryInput!]
  name: String
  key_lte: String
  name_exists: Boolean
  _id_gt: ObjectId
  _id_exists: Boolean
  _id_gte: ObjectId
  key_gte: String
  key_nin: [String]
  key: String
  key_ne: String
  _id_in: [ObjectId]
  name_ne: String
  name_nin: [String]
  _id_lt: ObjectId
}

type OrderBuyer {
  email: String
  name: String
  person: ObjectId
  phone: String
}

input CatalogUpdateInput {
  owner_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  enterprise: ObjectId
  enterprise_unset: Boolean
  owner: CatalogOwnerUpdateInput
}

input ProductOwnerInsertInput {
  place: ProductOwnerPlaceRelationInput
  workspace: ProductOwnerWorkspaceRelationInput
}

input VehicleCompartmentUpdateInput {
  name_unset: Boolean
  capacity: VehicleCompartmentCapacityUpdateInput
  capacity_unset: Boolean
  features: [VehicleCompartmentFeatureUpdateInput]
  features_unset: Boolean
  name: String
}

input TourLegPayloadVolumeUpdateInput {
  value_inc: Float
  value_unset: Boolean
  unit: TourLegPayloadVolumeUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

input VehicleModelQueryInput {
  date_exists: Boolean
  date_gte: DateTime
  OR: [VehicleModelQueryInput!]
  date: DateTime
  name_gt: String
  AND: [VehicleModelQueryInput!]
  name_ne: String
  date_in: [DateTime]
  date_nin: [DateTime]
  date_gt: DateTime
  name: String
  date_lt: DateTime
  name_lte: String
  name_exists: Boolean
  name_gte: String
  name_lt: String
  name_in: [String]
  date_ne: DateTime
  date_lte: DateTime
  name_nin: [String]
}

input OfferQueryInput {
  price: OfferPriceQueryInput
  _id_lt: ObjectId
  price_exists: Boolean
  _id_lte: ObjectId
  OR: [OfferQueryInput!]
  _id: ObjectId
  _id_ne: ObjectId
  _id_gt: ObjectId
  AND: [OfferQueryInput!]
  _id_nin: [ObjectId]
  _id_exists: Boolean
  _id_gte: ObjectId
  _id_in: [ObjectId]
}

input CatalogItemOwnerQueryInput {
  workspace_exists: Boolean
  AND: [CatalogItemOwnerQueryInput!]
  OR: [CatalogItemOwnerQueryInput!]
  workspace: WorkspaceQueryInput
}

input TourStopDurationUnitInsertInput {
  symbol: String
}

input TourOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input ProductNutrientListQuantityUpdateInput {
  value: Int
  value_inc: Int
  value_unset: Boolean
  unit: ObjectId
  unit_unset: Boolean
}

input TourDistanceUpdateInput {
  value_inc: Float
  value_unset: Boolean
  unit: TourDistanceUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

type OrderLineProduct {
  _id: ObjectId
}

input VehicleCostDriverQueryInput {
  type_nin: [String]
  OR: [VehicleCostDriverQueryInput!]
  type_exists: Boolean
  unit_exists: Boolean
  unit: VehicleCostDriverUnitQueryInput
  factor_lt: Float
  type: String
  factor_in: [Float]
  type_in: [String]
  AND: [VehicleCostDriverQueryInput!]
  factor_ne: Float
  type_ne: String
  factor: Float
  factor_lte: Float
  factor_gt: Float
  factor_gte: Float
  type_gt: String
  type_lt: String
  factor_nin: [Float]
  type_gte: String
  factor_exists: Boolean
  type_lte: String
}

input TransactionChannelExternalTargetEnterpriseQueryInput {
  id: String
  id_gte: String
  id_lt: String
  id_gt: String
  OR: [TransactionChannelExternalTargetEnterpriseQueryInput!]
  id_in: [String]
  id_exists: Boolean
  id_lte: String
  AND: [TransactionChannelExternalTargetEnterpriseQueryInput!]
  id_ne: String
  id_nin: [String]
}

enum VehicleSortByInput {
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  _ID_ASC
  _ID_DESC
  NAME_ASC
}

input TourDraftStopDeliveryInsertInput {
  shipments: [ObjectId]
}

input CatalogItemCatalogRelationInput {
  create: CatalogInsertInput
  link: ObjectId
}

type ProductNetWeight {
  unit: Code
  value: Float
}

type VehicleCompartmentCapacity {
  volume: VehicleCompartmentCapacityVolume
  weight: VehicleCompartmentCapacityWeight
}

type TourDurationUnit {
  symbol: String
}

type Mutation {
  deleteManyAreas(query: AreaQueryInput): DeleteManyPayload
  deleteManyCatalogItems(query: CatalogItemQueryInput): DeleteManyPayload
  deleteManyCatalogs(query: CatalogQueryInput): DeleteManyPayload
  deleteManyCodeLists(query: CodeListQueryInput): DeleteManyPayload
  deleteManyCodes(query: CodeQueryInput): DeleteManyPayload
  deleteManyInventoryItems(query: InventoryItemQueryInput): DeleteManyPayload
  deleteManyOffers(query: OfferQueryInput): DeleteManyPayload
  deleteManyOrders(query: OrderQueryInput): DeleteManyPayload
  deleteManyPlaces(query: PlaceQueryInput): DeleteManyPayload
  deleteManyProductCategories(
    query: ProductCategoryQueryInput
  ): DeleteManyPayload
  deleteManyProductClassifications(
    query: ProductClassificationQueryInput
  ): DeleteManyPayload
  deleteManyProductGroups(query: ProductGroupQueryInput): DeleteManyPayload
  deleteManyProducts(query: ProductQueryInput): DeleteManyPayload
  deleteManyShipments(query: ShipmentQueryInput): DeleteManyPayload
  deleteManyShippingMethods(query: ShippingMethodQueryInput): DeleteManyPayload
  deleteManyTourDrafts(query: TourDraftQueryInput): DeleteManyPayload
  deleteManyTours(query: TourQueryInput): DeleteManyPayload
  deleteManyTransactionChannels(
    query: TransactionChannelQueryInput
  ): DeleteManyPayload
  deleteManyVehicles(query: VehicleQueryInput): DeleteManyPayload
  deleteManyWorkspaces(query: WorkspaceQueryInput): DeleteManyPayload
  deleteOneArea(query: AreaQueryInput!): Area
  deleteOneCatalog(query: CatalogQueryInput!): Catalog
  deleteOneCatalogItem(query: CatalogItemQueryInput!): CatalogItem
  deleteOneCode(query: CodeQueryInput!): Code
  deleteOneCodeList(query: CodeListQueryInput!): CodeList
  deleteOneInventoryItem(query: InventoryItemQueryInput!): InventoryItem
  deleteOneOffer(query: OfferQueryInput!): Offer
  deleteOneOrder(query: OrderQueryInput!): Order
  deleteOnePlace(query: PlaceQueryInput!): Place
  deleteOneProduct(query: ProductQueryInput!): Product
  deleteOneProductCategory(query: ProductCategoryQueryInput!): ProductCategory
  deleteOneProductClassification(
    query: ProductClassificationQueryInput!
  ): ProductClassification
  deleteOneProductGroup(query: ProductGroupQueryInput!): ProductGroup
  deleteOneShipment(query: ShipmentQueryInput!): Shipment
  deleteOneShippingMethod(query: ShippingMethodQueryInput!): ShippingMethod
  deleteOneTour(query: TourQueryInput!): Tour
  deleteOneTourDraft(query: TourDraftQueryInput!): TourDraft
  deleteOneTransactionChannel(
    query: TransactionChannelQueryInput!
  ): TransactionChannel
  deleteOneVehicle(query: VehicleQueryInput!): Vehicle
  deleteOneWorkspace(query: WorkspaceQueryInput!): Workspace
  insertManyAreas(data: [AreaInsertInput!]!): InsertManyPayload
  insertManyCatalogItems(data: [CatalogItemInsertInput!]!): InsertManyPayload
  insertManyCatalogs(data: [CatalogInsertInput!]!): InsertManyPayload
  insertManyCodeLists(data: [CodeListInsertInput!]!): InsertManyPayload
  insertManyCodes(data: [CodeInsertInput!]!): InsertManyPayload
  insertManyInventoryItems(
    data: [InventoryItemInsertInput!]!
  ): InsertManyPayload
  insertManyOffers(data: [OfferInsertInput!]!): InsertManyPayload
  insertManyOrders(data: [OrderInsertInput!]!): InsertManyPayload
  insertManyPlaces(data: [PlaceInsertInput!]!): InsertManyPayload
  insertManyProductCategories(
    data: [ProductCategoryInsertInput!]!
  ): InsertManyPayload
  insertManyProductClassifications(
    data: [ProductClassificationInsertInput!]!
  ): InsertManyPayload
  insertManyProductGroups(data: [ProductGroupInsertInput!]!): InsertManyPayload
  insertManyProducts(data: [ProductInsertInput!]!): InsertManyPayload
  insertManyShipments(data: [ShipmentInsertInput!]!): InsertManyPayload
  insertManyShippingMethods(
    data: [ShippingMethodInsertInput!]!
  ): InsertManyPayload
  insertManyTourDrafts(data: [TourDraftInsertInput!]!): InsertManyPayload
  insertManyTours(data: [TourInsertInput!]!): InsertManyPayload
  insertManyTransactionChannels(
    data: [TransactionChannelInsertInput!]!
  ): InsertManyPayload
  insertManyVehicles(data: [VehicleInsertInput!]!): InsertManyPayload
  insertManyWorkspaces(data: [WorkspaceInsertInput!]!): InsertManyPayload
  insertOneArea(data: AreaInsertInput!): Area
  insertOneCatalog(data: CatalogInsertInput!): Catalog
  insertOneCatalogItem(data: CatalogItemInsertInput!): CatalogItem
  insertOneCode(data: CodeInsertInput!): Code
  insertOneCodeList(data: CodeListInsertInput!): CodeList
  insertOneInventoryItem(data: InventoryItemInsertInput!): InventoryItem
  insertOneOffer(data: OfferInsertInput!): Offer
  insertOneOrder(data: OrderInsertInput!): Order
  insertOnePlace(data: PlaceInsertInput!): Place
  insertOneProduct(data: ProductInsertInput!): Product
  insertOneProductCategory(data: ProductCategoryInsertInput!): ProductCategory
  insertOneProductClassification(
    data: ProductClassificationInsertInput!
  ): ProductClassification
  insertOneProductGroup(data: ProductGroupInsertInput!): ProductGroup
  insertOneShipment(data: ShipmentInsertInput!): Shipment
  insertOneShippingMethod(data: ShippingMethodInsertInput!): ShippingMethod
  insertOneTour(data: TourInsertInput!): Tour
  insertOneTourDraft(data: TourDraftInsertInput!): TourDraft
  insertOneTransactionChannel(
    data: TransactionChannelInsertInput!
  ): TransactionChannel
  insertOneVehicle(data: VehicleInsertInput!): Vehicle
  insertOneWorkspace(data: WorkspaceInsertInput!): Workspace
  replaceOneArea(data: AreaInsertInput!, query: AreaQueryInput): Area
  replaceOneCatalog(
    data: CatalogInsertInput!
    query: CatalogQueryInput
  ): Catalog
  replaceOneCatalogItem(
    query: CatalogItemQueryInput
    data: CatalogItemInsertInput!
  ): CatalogItem
  replaceOneCode(query: CodeQueryInput, data: CodeInsertInput!): Code
  replaceOneCodeList(
    query: CodeListQueryInput
    data: CodeListInsertInput!
  ): CodeList
  replaceOneInventoryItem(
    query: InventoryItemQueryInput
    data: InventoryItemInsertInput!
  ): InventoryItem
  replaceOneOffer(query: OfferQueryInput, data: OfferInsertInput!): Offer
  replaceOneOrder(query: OrderQueryInput, data: OrderInsertInput!): Order
  replaceOnePlace(query: PlaceQueryInput, data: PlaceInsertInput!): Place
  replaceOneProduct(
    query: ProductQueryInput
    data: ProductInsertInput!
  ): Product
  replaceOneProductCategory(
    query: ProductCategoryQueryInput
    data: ProductCategoryInsertInput!
  ): ProductCategory
  replaceOneProductClassification(
    query: ProductClassificationQueryInput
    data: ProductClassificationInsertInput!
  ): ProductClassification
  replaceOneProductGroup(
    query: ProductGroupQueryInput
    data: ProductGroupInsertInput!
  ): ProductGroup
  replaceOneShipment(
    query: ShipmentQueryInput
    data: ShipmentInsertInput!
  ): Shipment
  replaceOneShippingMethod(
    query: ShippingMethodQueryInput
    data: ShippingMethodInsertInput!
  ): ShippingMethod
  replaceOneTour(query: TourQueryInput, data: TourInsertInput!): Tour
  replaceOneTourDraft(
    query: TourDraftQueryInput
    data: TourDraftInsertInput!
  ): TourDraft
  replaceOneTransactionChannel(
    query: TransactionChannelQueryInput
    data: TransactionChannelInsertInput!
  ): TransactionChannel
  replaceOneVehicle(
    data: VehicleInsertInput!
    query: VehicleQueryInput
  ): Vehicle
  replaceOneWorkspace(
    query: WorkspaceQueryInput
    data: WorkspaceInsertInput!
  ): Workspace
  updateManyAreas(
    query: AreaQueryInput
    set: AreaUpdateInput!
  ): UpdateManyPayload
  updateManyCatalogItems(
    set: CatalogItemUpdateInput!
    query: CatalogItemQueryInput
  ): UpdateManyPayload
  updateManyCatalogs(
    query: CatalogQueryInput
    set: CatalogUpdateInput!
  ): UpdateManyPayload
  updateManyCodeLists(
    query: CodeListQueryInput
    set: CodeListUpdateInput!
  ): UpdateManyPayload
  updateManyCodes(
    query: CodeQueryInput
    set: CodeUpdateInput!
  ): UpdateManyPayload
  updateManyInventoryItems(
    query: InventoryItemQueryInput
    set: InventoryItemUpdateInput!
  ): UpdateManyPayload
  updateManyOffers(
    query: OfferQueryInput
    set: OfferUpdateInput!
  ): UpdateManyPayload
  updateManyOrders(
    set: OrderUpdateInput!
    query: OrderQueryInput
  ): UpdateManyPayload
  updateManyPlaces(
    query: PlaceQueryInput
    set: PlaceUpdateInput!
  ): UpdateManyPayload
  updateManyProductCategories(
    query: ProductCategoryQueryInput
    set: ProductCategoryUpdateInput!
  ): UpdateManyPayload
  updateManyProductClassifications(
    query: ProductClassificationQueryInput
    set: ProductClassificationUpdateInput!
  ): UpdateManyPayload
  updateManyProductGroups(
    query: ProductGroupQueryInput
    set: ProductGroupUpdateInput!
  ): UpdateManyPayload
  updateManyProducts(
    query: ProductQueryInput
    set: ProductUpdateInput!
  ): UpdateManyPayload
  updateManyShipments(
    set: ShipmentUpdateInput!
    query: ShipmentQueryInput
  ): UpdateManyPayload
  updateManyShippingMethods(
    set: ShippingMethodUpdateInput!
    query: ShippingMethodQueryInput
  ): UpdateManyPayload
  updateManyTourDrafts(
    query: TourDraftQueryInput
    set: TourDraftUpdateInput!
  ): UpdateManyPayload
  updateManyTours(
    query: TourQueryInput
    set: TourUpdateInput!
  ): UpdateManyPayload
  updateManyTransactionChannels(
    query: TransactionChannelQueryInput
    set: TransactionChannelUpdateInput!
  ): UpdateManyPayload
  updateManyVehicles(
    query: VehicleQueryInput
    set: VehicleUpdateInput!
  ): UpdateManyPayload
  updateManyWorkspaces(
    query: WorkspaceQueryInput
    set: WorkspaceUpdateInput!
  ): UpdateManyPayload
  updateOneArea(set: AreaUpdateInput!, query: AreaQueryInput): Area
  updateOneCatalog(query: CatalogQueryInput, set: CatalogUpdateInput!): Catalog
  updateOneCatalogItem(
    query: CatalogItemQueryInput
    set: CatalogItemUpdateInput!
  ): CatalogItem
  updateOneCode(query: CodeQueryInput, set: CodeUpdateInput!): Code
  updateOneCodeList(
    query: CodeListQueryInput
    set: CodeListUpdateInput!
  ): CodeList
  updateOneInventoryItem(
    query: InventoryItemQueryInput
    set: InventoryItemUpdateInput!
  ): InventoryItem
  updateOneOffer(set: OfferUpdateInput!, query: OfferQueryInput): Offer
  updateOneOrder(query: OrderQueryInput, set: OrderUpdateInput!): Order
  updateOnePlace(query: PlaceQueryInput, set: PlaceUpdateInput!): Place
  updateOneProduct(query: ProductQueryInput, set: ProductUpdateInput!): Product
  updateOneProductCategory(
    query: ProductCategoryQueryInput
    set: ProductCategoryUpdateInput!
  ): ProductCategory
  updateOneProductClassification(
    query: ProductClassificationQueryInput
    set: ProductClassificationUpdateInput!
  ): ProductClassification
  updateOneProductGroup(
    query: ProductGroupQueryInput
    set: ProductGroupUpdateInput!
  ): ProductGroup
  updateOneShipment(
    query: ShipmentQueryInput
    set: ShipmentUpdateInput!
  ): Shipment
  updateOneShippingMethod(
    query: ShippingMethodQueryInput
    set: ShippingMethodUpdateInput!
  ): ShippingMethod
  updateOneTour(set: TourUpdateInput!, query: TourQueryInput): Tour
  updateOneTourDraft(
    query: TourDraftQueryInput
    set: TourDraftUpdateInput!
  ): TourDraft
  updateOneTransactionChannel(
    query: TransactionChannelQueryInput
    set: TransactionChannelUpdateInput!
  ): TransactionChannel
  updateOneVehicle(query: VehicleQueryInput, set: VehicleUpdateInput!): Vehicle
  updateOneWorkspace(
    query: WorkspaceQueryInput
    set: WorkspaceUpdateInput!
  ): Workspace
  upsertOneArea(query: AreaQueryInput, data: AreaInsertInput!): Area
  upsertOneCatalog(query: CatalogQueryInput, data: CatalogInsertInput!): Catalog
  upsertOneCatalogItem(
    query: CatalogItemQueryInput
    data: CatalogItemInsertInput!
  ): CatalogItem
  upsertOneCode(query: CodeQueryInput, data: CodeInsertInput!): Code
  upsertOneCodeList(
    query: CodeListQueryInput
    data: CodeListInsertInput!
  ): CodeList
  upsertOneInventoryItem(
    query: InventoryItemQueryInput
    data: InventoryItemInsertInput!
  ): InventoryItem
  upsertOneOffer(query: OfferQueryInput, data: OfferInsertInput!): Offer
  upsertOneOrder(query: OrderQueryInput, data: OrderInsertInput!): Order
  upsertOnePlace(query: PlaceQueryInput, data: PlaceInsertInput!): Place
  upsertOneProduct(query: ProductQueryInput, data: ProductInsertInput!): Product
  upsertOneProductCategory(
    query: ProductCategoryQueryInput
    data: ProductCategoryInsertInput!
  ): ProductCategory
  upsertOneProductClassification(
    query: ProductClassificationQueryInput
    data: ProductClassificationInsertInput!
  ): ProductClassification
  upsertOneProductGroup(
    query: ProductGroupQueryInput
    data: ProductGroupInsertInput!
  ): ProductGroup
  upsertOneShipment(
    query: ShipmentQueryInput
    data: ShipmentInsertInput!
  ): Shipment
  upsertOneShippingMethod(
    query: ShippingMethodQueryInput
    data: ShippingMethodInsertInput!
  ): ShippingMethod
  upsertOneTour(data: TourInsertInput!, query: TourQueryInput): Tour
  upsertOneTourDraft(
    query: TourDraftQueryInput
    data: TourDraftInsertInput!
  ): TourDraft
  upsertOneTransactionChannel(
    query: TransactionChannelQueryInput
    data: TransactionChannelInsertInput!
  ): TransactionChannel
  upsertOneVehicle(query: VehicleQueryInput, data: VehicleInsertInput!): Vehicle
  upsertOneWorkspace(
    query: WorkspaceQueryInput
    data: WorkspaceInsertInput!
  ): Workspace
}

input VehicleCompartmentCapacityWeightInsertInput {
  value: Float
  unit: VehicleCompartmentCapacityWeightUnitInsertInput
}

input ProductOwnerUpdateInput {
  place: ProductOwnerPlaceRelationInput
  place_unset: Boolean
  workspace: ProductOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

input TourQueryInput {
  name_gte: String
  stops_in: [TourStopQueryInput]
  AND: [TourQueryInput!]
  name_nin: [String]
  name_exists: Boolean
  _id_exists: Boolean
  name_gt: String
  name_in: [String]
  _id: ObjectId
  _id_nin: [ObjectId]
  duration: TourDurationQueryInput
  name: String
  name_lt: String
  shipments_nin: [ShipmentQueryInput]
  date_lt: DateTime
  owner: TourOwnerQueryInput
  owner_exists: Boolean
  date_gt: DateTime
  legs_nin: [TourLegQueryInput]
  date_lte: DateTime
  vehicle_exists: Boolean
  _id_in: [ObjectId]
  date_gte: DateTime
  _id_gte: ObjectId
  duration_exists: Boolean
  _id_lt: ObjectId
  _id_gt: ObjectId
  stops: [TourStopQueryInput]
  name_ne: String
  vehicle: VehicleQueryInput
  shipments: [ShipmentQueryInput]
  stops_exists: Boolean
  legs: [TourLegQueryInput]
  date: DateTime
  legs_exists: Boolean
  date_exists: Boolean
  distance_exists: Boolean
  _id_lte: ObjectId
  OR: [TourQueryInput!]
  date_nin: [DateTime]
  name_lte: String
  shipments_in: [ShipmentQueryInput]
  date_ne: DateTime
  shipments_exists: Boolean
  distance: TourDistanceQueryInput
  stops_nin: [TourStopQueryInput]
  _id_ne: ObjectId
  date_in: [DateTime]
  legs_in: [TourLegQueryInput]
}

input ShipmentLineWeightInsertInput {
  unit: ObjectId
  value: Float
}

input OrderLinePriceCurrencyQueryInput {
  symbol_gt: String
  text_ne: String
  code_exists: Boolean
  symbol_ne: String
  symbol_in: [String]
  symbol_lt: String
  code_lte: String
  OR: [OrderLinePriceCurrencyQueryInput!]
  code_gt: String
  symbol_gte: String
  symbol_lte: String
  code_gte: String
  text_lte: String
  text_gt: String
  code_nin: [String]
  text_nin: [String]
  code: String
  code_in: [String]
  code_ne: String
  symbol_nin: [String]
  AND: [OrderLinePriceCurrencyQueryInput!]
  text_lt: String
  symbol_exists: Boolean
  text_exists: Boolean
  text: String
  text_in: [String]
  symbol: String
  code_lt: String
  text_gte: String
}

input VehicleCapacityVolumeUnitQueryInput {
  symbol_lte: String
  symbol_exists: Boolean
  symbol_ne: String
  symbol_gt: String
  symbol_lt: String
  OR: [VehicleCapacityVolumeUnitQueryInput!]
  symbol_in: [String]
  AND: [VehicleCapacityVolumeUnitQueryInput!]
  symbol: String
  symbol_gte: String
  symbol_nin: [String]
}

type TourDraftDistanceUnit {
  symbol: String
}

input TourLegPayloadVolumeUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourLegPayloadWeightUnitQueryInput {
  symbol_lte: String
  symbol_gt: String
  symbol_gte: String
  symbol_nin: [String]
  symbol_exists: Boolean
  AND: [TourLegPayloadWeightUnitQueryInput!]
  symbol: String
  symbol_lt: String
  symbol_ne: String
  symbol_in: [String]
  OR: [TourLegPayloadWeightUnitQueryInput!]
}

type ProductAllergenListQuantity {
  level: ObjectId
}

input ShippingMethodOwnerQueryInput {
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [ShippingMethodOwnerQueryInput!]
  OR: [ShippingMethodOwnerQueryInput!]
}

type ShipmentLineWeight {
  unit: ObjectId
  value: Float
}

type TourOwner {
  workspace: Workspace
}

type InventoryItem {
  _id: ObjectId
  product: ObjectId
  quantity: InventoryItemQuantity
}

input TourDraftStopDeliveryUpdateInput {
  shipments: [ObjectId]
  shipments_unset: Boolean
}

input VehicleWeightUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type ProductIngredientList {
  ingredient: ProductIngredientListIngredient
  quantity: ProductIngredientListQuantity
  sequence: String
}

input TransactionChannelExternalTargetQueryInput {
  AND: [TransactionChannelExternalTargetQueryInput!]
  OR: [TransactionChannelExternalTargetQueryInput!]
  enterprise: TransactionChannelExternalTargetEnterpriseQueryInput
  enterprise_exists: Boolean
  marketplace: TransactionChannelExternalTargetMarketplaceQueryInput
  marketplace_exists: Boolean
  platform: TransactionChannelExternalTargetPlatformQueryInput
  platform_exists: Boolean
}

input ProductNetWeightInsertInput {
  unit: ProductNetWeightUnitRelationInput
  value: Float
}

input CatalogItemUpdateInput {
  catalog_unset: Boolean
  categories: [ObjectId]
  offers: CatalogItemOffersRelationInput
  owner: CatalogItemOwnerUpdateInput
  categories_unset: Boolean
  inventoryItems: CatalogItemInventoryItemsRelationInput
  name: String
  name_unset: Boolean
  weight_unset: Boolean
  offers_unset: Boolean
  product_unset: Boolean
  inventoryItems_unset: Boolean
  createdAt: DateTime
  ids: [String]
  createdAt_unset: Boolean
  ids_unset: Boolean
  _id_unset: Boolean
  product: CatalogItemProductRelationInput
  owner_unset: Boolean
  sku: String
  weight: CatalogItemWeightUpdateInput
  catalog: CatalogItemCatalogRelationInput
  sku_unset: Boolean
  _id: ObjectId
}

type Order {
  _id: ObjectId
  broker: OrderBroker
  buyer: OrderBuyer
  confirmed: Boolean
  date: DateTime
  lines: [OrderLine]
  number: String
  seller: OrderSeller
  shippingAddress: OrderShippingAddress
  shippingMethod: ShippingMethod
  url: String
}

input ShipmentDeliveryCountryInsertInput {
  name: String
}

input WorkspaceAddressUpdateInput {
  postalCode_unset: Boolean
  street: String
  street_unset: Boolean
  country: WorkspaceAddressCountryUpdateInput
  country_unset: Boolean
  locality: String
  locality_unset: Boolean
  postalCode: String
}

input TourDraftStopQueryInput {
  name_in: [String]
  order_nin: [Int]
  order_gt: Int
  name_gt: String
  delivery_exists: Boolean
  estimatedTimeOfArrival_ne: DateTime
  place_lte: ObjectId
  name_exists: Boolean
  estimatedTimeOfDeparture_gt: DateTime
  estimatedTimeOfDeparture_lte: DateTime
  estimatedTimeOfDeparture_gte: DateTime
  order_in: [Int]
  duration_exists: Boolean
  place_in: [ObjectId]
  order: Int
  estimatedTimeOfArrival_gt: DateTime
  order_gte: Int
  duration: TourDraftStopDurationQueryInput
  estimatedTimeOfDeparture_nin: [DateTime]
  estimatedTimeOfDeparture: DateTime
  place_nin: [ObjectId]
  name_lt: String
  estimatedTimeOfArrival_gte: DateTime
  name_ne: String
  estimatedTimeOfArrival: DateTime
  place_gte: ObjectId
  place_gt: ObjectId
  estimatedTimeOfArrival_in: [DateTime]
  estimatedTimeOfDeparture_ne: DateTime
  name_gte: String
  place_lt: ObjectId
  estimatedTimeOfArrival_exists: Boolean
  place: ObjectId
  OR: [TourDraftStopQueryInput!]
  name: String
  pickup_exists: Boolean
  place_ne: ObjectId
  estimatedTimeOfArrival_lt: DateTime
  estimatedTimeOfDeparture_exists: Boolean
  delivery: TourDraftStopDeliveryQueryInput
  estimatedTimeOfDeparture_lt: DateTime
  estimatedTimeOfDeparture_in: [DateTime]
  estimatedTimeOfArrival_nin: [DateTime]
  order_ne: Int
  name_nin: [String]
  pickup: TourDraftStopPickupQueryInput
  AND: [TourDraftStopQueryInput!]
  place_exists: Boolean
  order_lte: Int
  geo_exists: Boolean
  order_exists: Boolean
  order_lt: Int
  geo: TourDraftStopGeoQueryInput
  estimatedTimeOfArrival_lte: DateTime
  name_lte: String
}

type Shipment {
  _id: ObjectId
  date: DateTime
  delivery: ShipmentDelivery
  key: String
  lines: [ShipmentLine]
  method: ShippingMethod
  order: Order
  pickup: ShipmentPickup
  status: String
  weight: ShipmentWeight
}

type OrderShippingAddress {
  country: OrderShippingAddressCountry
  geo: OrderShippingAddressGeo
  locality: String
  name: String
  phone: String
  place: Place
  postalCode: String
  street: String
}

input ShippingMethodOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input WorkspaceEnterpriseInsertInput {
  ids: [String]
  name: String
  vatId: String
}

input OrderBrokerInsertInput {
  marketplace: ObjectId
  name: String
  workspace: OrderBrokerWorkspaceRelationInput
}

input VehicleCapacityVolumeUnitInsertInput {
  symbol: String
}

input TourLegInsertInput {
  distance: TourLegDistanceInsertInput
  duration: TourLegDurationInsertInput
  origin: TourLegOriginInsertInput
  payload: TourLegPayloadInsertInput
  destination: TourLegDestinationInsertInput
}

input TourLegPayloadQueryInput {
  volume_exists: Boolean
  weight_exists: Boolean
  OR: [TourLegPayloadQueryInput!]
  shipments_in: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  volume: TourLegPayloadVolumeQueryInput
  shipments: [ObjectId]
  AND: [TourLegPayloadQueryInput!]
  weight: TourLegPayloadWeightQueryInput
}

type VehicleCapacityVolumeUnit {
  symbol: String
}

type VehicleCapacityWeight {
  unit: VehicleCapacityWeightUnit
  value: Float
}

enum CatalogItemSortByInput {
  CREATEDAT_ASC
  CREATEDAT_DESC
  NAME_ASC
  PRODUCT_DESC
  _ID_ASC
  _ID_DESC
  CATALOG_ASC
  CATALOG_DESC
  SKU_DESC
  NAME_DESC
  PRODUCT_ASC
  SKU_ASC
}

input ShipmentWeightUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
}

scalar DateTime

input ShippingMethodPickupPointQueryInput {
  place_in: [ObjectId]
  place_ne: ObjectId
  AND: [ShippingMethodPickupPointQueryInput!]
  place_lt: ObjectId
  place: ObjectId
  place_lte: ObjectId
  place_nin: [ObjectId]
  place_exists: Boolean
  place_gte: ObjectId
  place_gt: ObjectId
  OR: [ShippingMethodPickupPointQueryInput!]
}

input TourDraftDistanceUnitQueryInput {
  symbol_lt: String
  symbol_lte: String
  symbol_ne: String
  OR: [TourDraftDistanceUnitQueryInput!]
  AND: [TourDraftDistanceUnitQueryInput!]
  symbol_gte: String
  symbol_in: [String]
  symbol_nin: [String]
  symbol: String
  symbol_gt: String
  symbol_exists: Boolean
}

type VehicleBrand {
  name: String
}

input OrderLineInsertInput {
  name: String
  price: OrderLinePriceInsertInput
  product: OrderLineProductInsertInput
  product1: ObjectId
  quantity: OrderLineQuantityInsertInput
  sku: String
  gtin: String
  item: OrderLineItemInsertInput
}

input TourLegPayloadVolumeInsertInput {
  value: Float
  unit: TourLegPayloadVolumeUnitInsertInput
}

input OfferInsertInput {
  price: OfferPriceInsertInput
  _id: ObjectId
}

type ProductImage {
  url: String
}

input VehicleCostDriverInsertInput {
  type: String
  unit: VehicleCostDriverUnitInsertInput
  factor: Float
}

input TourDraftStopUpdateInput {
  order: Int
  pickup: TourDraftStopPickupUpdateInput
  estimatedTimeOfArrival_unset: Boolean
  geo_unset: Boolean
  geo: TourDraftStopGeoUpdateInput
  duration: TourDraftStopDurationUpdateInput
  estimatedTimeOfDeparture_unset: Boolean
  name_unset: Boolean
  duration_unset: Boolean
  estimatedTimeOfArrival: DateTime
  order_unset: Boolean
  name: String
  order_inc: Int
  delivery: TourDraftStopDeliveryUpdateInput
  estimatedTimeOfDeparture: DateTime
  pickup_unset: Boolean
  place: ObjectId
  place_unset: Boolean
  delivery_unset: Boolean
}

input CatalogItemOwnerWorkspaceRelationInput {
  link: ObjectId
  create: WorkspaceInsertInput
}

enum CatalogSortByInput {
  ENTERPRISE_DESC
  _ID_ASC
  _ID_DESC
  ENTERPRISE_ASC
}

type PlaceOwner {
  workspace: Workspace
}

enum ShippingMethodSortByInput {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  NAME_ASC
  NAME_DESC
  TYPE_ASC
  TYPE_DESC
  _ID_ASC
  _ID_DESC
}

input PlaceWithinAreasRelationInput {
  link: [ObjectId]
  create: [AreaInsertInput]
}

input VehicleOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input ProductNetWeightUnitRelationInput {
  link: ObjectId
  create: CodeInsertInput
}

input ProductBrandUpdateInput {
  name: String
  name_unset: Boolean
}

input ProductIngredientListQuantityUpdateInput {
  percentage_inc: Int
  percentage_unset: Boolean
  percentage: Int
}

type Place {
  _id: ObjectId
  address: PlaceAddress
  code: String
  geo: PlaceGeo
  gln: String
  ids: [String]
  name: String
  owner: PlaceOwner
  types: [String]
  withinAreas: [Area]
}

input TourDraftStopPickupQueryInput {
  shipments_in: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  OR: [TourDraftStopPickupQueryInput!]
  AND: [TourDraftStopPickupQueryInput!]
  shipments: [ObjectId]
}

input TourOwnerInsertInput {
  workspace: TourOwnerWorkspaceRelationInput
}

input ProductCategoryInsertInput {
  children: ProductCategoryChildrenRelationInput
  classification: ProductCategoryClassificationRelationInput
  hierarchyLevel: Int
  id: String
  name: String
  _id: ObjectId
  ids: [String]
}

input PlaceUpdateInput {
  owner_unset: Boolean
  owner: PlaceOwnerUpdateInput
  code_unset: Boolean
  address: PlaceAddressUpdateInput
  geo: PlaceGeoUpdateInput
  code: String
  name_unset: Boolean
  types: [String]
  gln: String
  types_unset: Boolean
  gln_unset: Boolean
  _id_unset: Boolean
  withinAreas: PlaceWithinAreasRelationInput
  _id: ObjectId
  withinAreas_unset: Boolean
  ids_unset: Boolean
  geo_unset: Boolean
  ids: [String]
  address_unset: Boolean
  name: String
}

input TourDistanceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourStopGeoUpdateInput {
  coordinates: [Float]
  coordinates_unset: Boolean
  type: String
  type_unset: Boolean
}

input ShipmentPickupQueryInput {
  OR: [ShipmentPickupQueryInput!]
  AND: [ShipmentPickupQueryInput!]
  place: PlaceQueryInput
  place_exists: Boolean
}

input VehicleCostResourceCurrencyInsertInput {
  symbol: String
}

input VehicleModelUpdateInput {
  date: DateTime
  date_unset: Boolean
  name: String
  name_unset: Boolean
}

input TourLegDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type VehicleCostUnit {
  symbol: String
}

input InventoryItemQuantityInsertInput {
  value: Float
  unit: InventoryItemQuantityUnitInsertInput
}

input TourDraftOptimisationQueryInput {
  status_lt: String
  status_in: [String]
  status_lte: String
  status_nin: [String]
  OR: [TourDraftOptimisationQueryInput!]
  status_exists: Boolean
  status: String
  status_gt: String
  status_ne: String
  status_gte: String
  AND: [TourDraftOptimisationQueryInput!]
}

type VehicleFeature {
  key: String
  name: String
}

type VehicleCompartmentFeature {
  key: String
  name: String
}

input CatalogItemWeightUnitQueryInput {
  code: String
  code_lte: String
  code_nin: [String]
  code_ne: String
  code_lt: String
  code_exists: Boolean
  code_gte: String
  AND: [CatalogItemWeightUnitQueryInput!]
  OR: [CatalogItemWeightUnitQueryInput!]
  code_in: [String]
  code_gt: String
}

input CatalogInsertInput {
  _id: ObjectId
  enterprise: ObjectId
  owner: CatalogOwnerInsertInput
}

input ShipmentPickupUpdateInput {
  place: ShipmentPickupPlaceRelationInput
  place_unset: Boolean
}

type ProductClassification {
  _id: ObjectId
  key: String
  name: String
}

input ShipmentDeliveryQueryInput {
  phone_nin: [String]
  locality_gt: String
  street_lt: String
  locality_nin: [String]
  locality_lt: String
  locality_exists: Boolean
  street_gte: String
  street_ne: String
  postalCode_exists: Boolean
  phone_lt: String
  OR: [ShipmentDeliveryQueryInput!]
  name_nin: [String]
  phone_exists: Boolean
  postalCode_lt: String
  locality_in: [String]
  street_in: [String]
  name_lt: String
  phone_ne: String
  locality: String
  postalCode_gt: String
  phone_gte: String
  name: String
  name_in: [String]
  name_gt: String
  phone_lte: String
  locality_ne: String
  postalCode_in: [String]
  place: PlaceQueryInput
  street_nin: [String]
  postalCode_gte: String
  locality_gte: String
  postalCode_nin: [String]
  locality_lte: String
  phone_in: [String]
  country_exists: Boolean
  street_lte: String
  name_gte: String
  postalCode_ne: String
  street_exists: Boolean
  country: ShipmentDeliveryCountryQueryInput
  name_lte: String
  postalCode: String
  AND: [ShipmentDeliveryQueryInput!]
  name_ne: String
  place_exists: Boolean
  street: String
  phone: String
  street_gt: String
  postalCode_lte: String
  name_exists: Boolean
  phone_gt: String
}

input ProductNetWeightUpdateInput {
  value_inc: Float
  value_unset: Boolean
  unit: ProductNetWeightUnitRelationInput
  unit_unset: Boolean
  value: Float
}

input ProductGroupQueryInput {
  _id_gt: ObjectId
  _id_lte: ObjectId
  name_exists: Boolean
  name_lte: String
  _id_gte: ObjectId
  name_gt: String
  name_nin: [String]
  _id_exists: Boolean
  name: String
  _id_nin: [ObjectId]
  AND: [ProductGroupQueryInput!]
  OR: [ProductGroupQueryInput!]
  _id: ObjectId
  name_gte: String
  name_in: [String]
  name_ne: String
  name_lt: String
  _id_in: [ObjectId]
  _id_ne: ObjectId
  _id_lt: ObjectId
}

type TourDraftDuration {
  unit: TourDraftDurationUnit
  value: Float
}

enum CodeListSortByInput {
  _ID_ASC
  _ID_DESC
  KEY_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
}

input WorkspaceGeoInsertInput {
  coordinates: [Float]
  type: String
}

input TourDraftOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input ProductBrandInsertInput {
  name: String
}

input OrderShippingAddressGeoQueryInput {
  type_lte: String
  type_lt: String
  type: String
  type_gte: String
  type_ne: String
  coordinates: [Float]
  coordinates_exists: Boolean
  coordinates_in: [Float]
  coordinates_nin: [Float]
  type_in: [String]
  type_nin: [String]
  type_gt: String
  type_exists: Boolean
  OR: [OrderShippingAddressGeoQueryInput!]
  AND: [OrderShippingAddressGeoQueryInput!]
}

input VehicleWeightQueryInput {
  OR: [VehicleWeightQueryInput!]
  unit: VehicleWeightUnitQueryInput
  value: Float
  value_gte: Float
  value_lt: Float
  unit_exists: Boolean
  value_in: [Float]
  value_ne: Float
  value_nin: [Float]
  value_gt: Float
  value_lte: Float
  value_exists: Boolean
  AND: [VehicleWeightQueryInput!]
}

type VehicleCostDriver {
  factor: Float
  type: String
  unit: VehicleCostDriverUnit
}

input TourInsertInput {
  duration: TourDurationInsertInput
  shipments: TourShipmentsRelationInput
  vehicle: TourVehicleRelationInput
  date: DateTime
  distance: TourDistanceInsertInput
  legs: [TourLegInsertInput]
  stops: [TourStopInsertInput]
  _id: ObjectId
  name: String
  owner: TourOwnerInsertInput
}

input OrderLinePriceCurrencyInsertInput {
  text: String
  code: String
  symbol: String
}

type DeleteManyPayload {
  deletedCount: Int!
}

input TourStopPickupUpdateInput {
  shipments: [ObjectId]
  shipments_unset: Boolean
}

input ProductNetWeightQueryInput {
  value_gt: Float
  OR: [ProductNetWeightQueryInput!]
  value: Float
  value_gte: Float
  value_nin: [Float]
  value_lt: Float
  value_in: [Float]
  value_ne: Float
  unit: CodeQueryInput
  value_lte: Float
  value_exists: Boolean
  AND: [ProductNetWeightQueryInput!]
  unit_exists: Boolean
}

type TourDraftStopPickup {
  shipments: [ObjectId]
}

input TourDraftOptimisationUpdateInput {
  status: String
  status_unset: Boolean
}

input TourDraftStopInsertInput {
  geo: TourDraftStopGeoInsertInput
  pickup: TourDraftStopPickupInsertInput
  duration: TourDraftStopDurationInsertInput
  order: Int
  estimatedTimeOfArrival: DateTime
  estimatedTimeOfDeparture: DateTime
  place: ObjectId
  delivery: TourDraftStopDeliveryInsertInput
  name: String
}

input WorkspaceGeoUpdateInput {
  coordinates: [Float]
  coordinates_unset: Boolean
  type: String
  type_unset: Boolean
}

input ShippingMethodQueryInput {
  name_lte: String
  pickup_exists: Boolean
  _id_ne: ObjectId
  _id: ObjectId
  _id_lt: ObjectId
  _id_gte: ObjectId
  description: String
  description_ne: String
  name_gt: String
  type_lte: String
  description_gte: String
  type_gt: String
  type_gte: String
  name_lt: String
  owner_exists: Boolean
  type_lt: String
  _id_exists: Boolean
  ids_exists: Boolean
  type_nin: [String]
  description_lte: String
  name_in: [String]
  description_lt: String
  description_in: [String]
  type_ne: String
  name_gte: String
  pickup: ShippingMethodPickupQueryInput
  ids: [String]
  _id_in: [ObjectId]
  name_nin: [String]
  AND: [ShippingMethodQueryInput!]
  type_exists: Boolean
  owner: ShippingMethodOwnerQueryInput
  name_ne: String
  _id_lte: ObjectId
  description_gt: String
  ids_in: [String]
  _id_gt: ObjectId
  _id_nin: [ObjectId]
  OR: [ShippingMethodQueryInput!]
  name_exists: Boolean
  description_exists: Boolean
  name: String
  description_nin: [String]
  type: String
  type_in: [String]
  ids_nin: [String]
}

type ProductNutrientListQuantity {
  unit: ObjectId
  value: Int
}

input CatalogItemWeightQueryInput {
  OR: [CatalogItemWeightQueryInput!]
  value_nin: [Float]
  value: Float
  value_in: [Float]
  value_lte: Float
  AND: [CatalogItemWeightQueryInput!]
  value_ne: Float
  unit: CatalogItemWeightUnitQueryInput
  value_exists: Boolean
  value_gt: Float
  value_lt: Float
  unit_exists: Boolean
  value_gte: Float
}

type CatalogItemWeight {
  unit: CatalogItemWeightUnit
  value: Float
}

input TourStopDeliveryInsertInput {
  shipments: [ObjectId]
}

input VehicleCostResourceUpdateInput {
  key_unset: Boolean
  type: String
  type_unset: Boolean
  unit: VehicleCostResourceUnitUpdateInput
  unit_unset: Boolean
  currency: VehicleCostResourceCurrencyUpdateInput
  currency_unset: Boolean
  key: String
}

input VehicleCapacityUpdateInput {
  weight_unset: Boolean
  volume: VehicleCapacityVolumeUpdateInput
  volume_unset: Boolean
  weight: VehicleCapacityWeightUpdateInput
}

input TourLegPayloadWeightUpdateInput {
  unit: TourLegPayloadWeightUnitUpdateInput
  unit_unset: Boolean
  value: Int
  value_inc: Int
  value_unset: Boolean
}

type ProductAllergenList {
  allergen: ObjectId
  quantity: ProductAllergenListQuantity
}

type ProductGroup {
  _id: ObjectId
  name: String
}

input TourLegDestinationQueryInput {
  place_in: [ObjectId]
  place_exists: Boolean
  place_ne: ObjectId
  place_gt: ObjectId
  place_lt: ObjectId
  AND: [TourLegDestinationQueryInput!]
  OR: [TourLegDestinationQueryInput!]
  place: ObjectId
  place_nin: [ObjectId]
  place_lte: ObjectId
  place_gte: ObjectId
}

type TourStopDelivery {
  shipments: [ObjectId]
}

input TransactionChannelInternalTargetQueryInput {
  AND: [TransactionChannelInternalTargetQueryInput!]
  OR: [TransactionChannelInternalTargetQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
}

enum ProductClassificationSortByInput {
  _ID_DESC
  KEY_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
}

input VehicleCostDriverUnitInsertInput {
  symbol: String
}

input TourLegPayloadWeightUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input ProductIngredientListQueryInput {
  sequence_gt: String
  AND: [ProductIngredientListQueryInput!]
  sequence_nin: [String]
  ingredient: ProductIngredientListIngredientQueryInput
  sequence_in: [String]
  sequence_exists: Boolean
  sequence_lt: String
  OR: [ProductIngredientListQueryInput!]
  sequence_lte: String
  quantity: ProductIngredientListQuantityQueryInput
  sequence_ne: String
  ingredient_exists: Boolean
  sequence: String
  quantity_exists: Boolean
  sequence_gte: String
}

input TourStopTaskDurationUnitUpdateInput {
  symbol_unset: Boolean
  symbol: String
}

input VehicleCapacityInsertInput {
  volume: VehicleCapacityVolumeInsertInput
  weight: VehicleCapacityWeightInsertInput
}

input TourDraftValidationInsertInput {
  status: String
}

input ProductCategoriesRelationInput {
  create: [ProductCategoryInsertInput]
  link: [ObjectId]
}

input PlaceAddressCountryQueryInput {
  code_in: [String]
  name_gte: String
  OR: [PlaceAddressCountryQueryInput!]
  name_nin: [String]
  name_lt: String
  name: String
  code_gt: String
  code_gte: String
  ids: [String]
  code_nin: [String]
  code_ne: String
  name_exists: Boolean
  AND: [PlaceAddressCountryQueryInput!]
  ids_exists: Boolean
  code_lte: String
  ids_in: [String]
  name_in: [String]
  name_gt: String
  name_lte: String
  code_exists: Boolean
  code_lt: String
  code: String
  ids_nin: [String]
  name_ne: String
}

type TourDraftValidation {
  status: String
}

input TransactionChannelExternalTargetPlatformUpdateInput {
  key_unset: Boolean
  key: String
}

input CodeListInsertInput {
  _id: ObjectId
  ids: [String]
  items: CodeListItemsRelationInput
  key: String
  name: String
}

input CatalogItemInsertInput {
  ids: [String]
  inventoryItems: CatalogItemInventoryItemsRelationInput
  offers: CatalogItemOffersRelationInput
  product: CatalogItemProductRelationInput
  _id: ObjectId
  categories: [ObjectId]
  weight: CatalogItemWeightInsertInput
  catalog: CatalogItemCatalogRelationInput
  name: String
  owner: CatalogItemOwnerInsertInput
  createdAt: DateTime
  sku: String
}

type WorkspaceMarketplace {
  key: String
}

type TourLegPayloadVolumeUnit {
  symbol: String
}

input TourDraftInsertInput {
  vehicle: TourDraftVehicleRelationInput
  shipments: TourDraftShipmentsRelationInput
  stops: [TourDraftStopInsertInput]
  distance: TourDraftDistanceInsertInput
  duration: TourDraftDurationInsertInput
  validation: TourDraftValidationInsertInput
  optimisation: TourDraftOptimisationInsertInput
  owner: TourDraftOwnerInsertInput
  _id: ObjectId
  tour: TourDraftTourRelationInput
}

input TourDraftOwnerInsertInput {
  workspace: TourDraftOwnerWorkspaceRelationInput
}

input TransactionChannelExternalTargetInsertInput {
  enterprise: TransactionChannelExternalTargetEnterpriseInsertInput
  marketplace: TransactionChannelExternalTargetMarketplaceInsertInput
  platform: TransactionChannelExternalTargetPlatformInsertInput
}

type WorkspaceEnterprise {
  ids: [String]
  name: String
  vatId: String
}

type OrderShippingAddressCountry {
  code: String
  name: String
}

type OrderLinePriceCurrency {
  code: String
  symbol: String
  text: String
}

type TourStopDuration {
  unit: TourStopDurationUnit
  value: Float
}

enum CodeSortByInput {
  SEQUENCE_ASC
  KEY_DESC
  NAME_ASC
  NAME_DESC
  LIST_ASC
  LIST_DESC
  SYMBOL_ASC
  SYMBOL_DESC
  SEQUENCE_DESC
  _ID_ASC
  _ID_DESC
  KEY_ASC
}

input ProductAllergenListQuantityInsertInput {
  level: ObjectId
}

input ProductProducerUpdateInput {
  workspace_unset: Boolean
  workspace: ProductProducerWorkspaceRelationInput
}

input TourLegOriginUpdateInput {
  place: ObjectId
  place_unset: Boolean
}

type Workspace {
  _id: ObjectId
  address: WorkspaceAddress
  enterprise: WorkspaceEnterprise
  geo: WorkspaceGeo
  ids: [String]
  key: String
  marketplace: WorkspaceMarketplace
  name: String
  person: ObjectId
  place: Place
  type: String
}

type TourLegOrigin {
  place: ObjectId
}

type TourDraftDurationUnit {
  symbol: String
}

input InventoryItemQuantityQueryInput {
  value_lt: Float
  value_in: [Float]
  AND: [InventoryItemQuantityQueryInput!]
  unit: InventoryItemQuantityUnitQueryInput
  value_lte: Float
  unit_exists: Boolean
  value_ne: Float
  value_gt: Float
  OR: [InventoryItemQuantityQueryInput!]
  value: Float
  value_nin: [Float]
  value_exists: Boolean
  value_gte: Float
}

input TourStopTaskDurationUnitQueryInput {
  symbol_gte: String
  symbol_lt: String
  symbol_nin: [String]
  symbol_exists: Boolean
  AND: [TourStopTaskDurationUnitQueryInput!]
  symbol_gt: String
  symbol_in: [String]
  symbol: String
  OR: [TourStopTaskDurationUnitQueryInput!]
  symbol_lte: String
  symbol_ne: String
}

type ProductNutrientList {
  nutrient: ObjectId
  quantity: ProductNutrientListQuantity
}

input ProductBrandQueryInput {
  AND: [ProductBrandQueryInput!]
  name_exists: Boolean
  name_in: [String]
  name_gte: String
  name_nin: [String]
  name_ne: String
  name_gt: String
  name_lt: String
  OR: [ProductBrandQueryInput!]
  name: String
  name_lte: String
}

type TransactionChannelFilter {
  isOrdered: Boolean
  status: String
}

input TourDraftDurationUpdateInput {
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: TourDraftDurationUnitUpdateInput
}

input CodeListRelationInput {
  create: CodeListInsertInput
  link: ObjectId
}

input ProductIngredientListIngredientInsertInput {
  name: String
}

input ProductNutrientListUpdateInput {
  nutrient: ObjectId
  nutrient_unset: Boolean
  quantity: ProductNutrientListQuantityUpdateInput
  quantity_unset: Boolean
}

input InventoryItemInsertInput {
  _id: ObjectId
  product: ObjectId
  quantity: InventoryItemQuantityInsertInput
}

input VehicleWeightUnitQueryInput {
  symbol_gt: String
  symbol_lt: String
  symbol: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String]
  AND: [VehicleWeightUnitQueryInput!]
  OR: [VehicleWeightUnitQueryInput!]
  symbol_nin: [String]
  symbol_exists: Boolean
  symbol_ne: String
}

input TourLegDurationUnitQueryInput {
  symbol_gt: String
  AND: [TourLegDurationUnitQueryInput!]
  OR: [TourLegDurationUnitQueryInput!]
  symbol: String
  symbol_in: [String]
  symbol_nin: [String]
  symbol_exists: Boolean
  symbol_ne: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
}

input TourDraftOwnerQueryInput {
  AND: [TourDraftOwnerQueryInput!]
  OR: [TourDraftOwnerQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
}

type VehicleCapacity {
  volume: VehicleCapacityVolume
  weight: VehicleCapacityWeight
}

input TransactionChannelFilterQueryInput {
  status_lt: String
  status_lte: String
  isOrdered_ne: Boolean
  isOrdered: Boolean
  status: String
  OR: [TransactionChannelFilterQueryInput!]
  status_ne: String
  AND: [TransactionChannelFilterQueryInput!]
  isOrdered_exists: Boolean
  status_nin: [String]
  status_in: [String]
  status_exists: Boolean
  status_gte: String
  status_gt: String
}

input VehicleCostResourceInsertInput {
  type: String
  unit: VehicleCostResourceUnitInsertInput
  currency: VehicleCostResourceCurrencyInsertInput
  key: String
}

input TourLegPayloadVolumeQueryInput {
  AND: [TourLegPayloadVolumeQueryInput!]
  unit_exists: Boolean
  value_exists: Boolean
  value_lte: Float
  OR: [TourLegPayloadVolumeQueryInput!]
  value: Float
  value_in: [Float]
  value_ne: Float
  value_lt: Float
  unit: TourLegPayloadVolumeUnitQueryInput
  value_nin: [Float]
  value_gt: Float
  value_gte: Float
}

input CatalogItemWeightInsertInput {
  value: Float
  unit: CatalogItemWeightUnitInsertInput
}

type OrderShippingAddressGeo {
  coordinates: [Float]
  type: String
}

enum OrderSortByInput {
  DATE_DESC
  NUMBER_ASC
  URL_ASC
  URL_DESC
  SHIPPINGMETHOD_ASC
  _ID_ASC
  DATE_ASC
  NUMBER_DESC
  SHIPPINGMETHOD_DESC
  _ID_DESC
}

input OfferPriceInsertInput {
  currency: OfferPriceCurrencyInsertInput
  value: Float
}

input TransactionChannelExternalTargetEnterpriseInsertInput {
  id: String
}

input TourDraftValidationQueryInput {
  status_gt: String
  status_gte: String
  status_lte: String
  status_ne: String
  AND: [TourDraftValidationQueryInput!]
  status_in: [String]
  OR: [TourDraftValidationQueryInput!]
  status: String
  status_exists: Boolean
  status_nin: [String]
  status_lt: String
}

type VehicleCapacityVolume {
  unit: VehicleCapacityVolumeUnit
  value: Float
}

input VehicleInsertInput {
  brand: VehicleBrandInsertInput
  type: String
  weight: VehicleWeightInsertInput
  costs: [VehicleCostInsertInput]
  name: String
  owner: VehicleOwnerInsertInput
  _id: ObjectId
  capacity: VehicleCapacityInsertInput
  model: VehicleModelInsertInput
  compartments: [VehicleCompartmentInsertInput]
  features: [VehicleFeatureInsertInput]
}

input VehicleWeightInsertInput {
  unit: VehicleWeightUnitInsertInput
  value: Float
}

input TourLegPayloadWeightInsertInput {
  unit: TourLegPayloadWeightUnitInsertInput
  value: Int
}

input TransactionChannelExternalTargetEnterpriseUpdateInput {
  id_unset: Boolean
  id: String
}

input CatalogOwnerQueryInput {
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [CatalogOwnerQueryInput!]
  OR: [CatalogOwnerQueryInput!]
}

input TourDraftShipmentsRelationInput {
  create: [ShipmentInsertInput]
  link: [ObjectId]
}

input OfferPriceCurrencyInsertInput {
  code: String
}

input ProductUpdateInput {
  countryOfOrigin: ProductCountryOfOriginRelationInput
  countryOfOrigin_unset: Boolean
  sku: String
  allergenList_unset: Boolean
  group_unset: Boolean
  gtin_unset: Boolean
  _id_unset: Boolean
  name_unset: Boolean
  nutrientList_unset: Boolean
  producer: ProductProducerUpdateInput
  ingredientList: [ProductIngredientListUpdateInput]
  netWeight: ProductNetWeightUpdateInput
  ids_unset: Boolean
  nutrientList: [ProductNutrientListUpdateInput]
  weight_unset: Boolean
  netWeight_unset: Boolean
  allergenList: [ProductAllergenListUpdateInput]
  brand_unset: Boolean
  images_unset: Boolean
  owner_unset: Boolean
  producer_unset: Boolean
  publishedAt_unset: Boolean
  categories: ProductCategoriesRelationInput
  ingredientList_unset: Boolean
  _id: ObjectId
  createdAt: DateTime
  ids: [String]
  owner: ProductOwnerUpdateInput
  images: [ProductImageUpdateInput]
  publishedAt: DateTime
  sku_unset: Boolean
  weight: ProductWeightUpdateInput
  gtin: String
  brand: ProductBrandUpdateInput
  name: String
  categories_unset: Boolean
  createdAt_unset: Boolean
  group: ProductGroupRelationInput
}

input ShipmentLineWeightUpdateInput {
  unit: ObjectId
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input PlaceInsertInput {
  _id: ObjectId
  address: PlaceAddressInsertInput
  geo: PlaceGeoInsertInput
  ids: [String]
  code: String
  name: String
  owner: PlaceOwnerInsertInput
  withinAreas: PlaceWithinAreasRelationInput
  gln: String
  types: [String]
}

input ProductQueryInput {
  producer_exists: Boolean
  createdAt_gt: DateTime
  name_exists: Boolean
  _id_lte: ObjectId
  sku_in: [String]
  AND: [ProductQueryInput!]
  owner_exists: Boolean
  gtin_gte: String
  ingredientList_nin: [ProductIngredientListQueryInput]
  sku_lt: String
  images_nin: [ProductImageQueryInput]
  publishedAt_lte: DateTime
  name_lte: String
  group_exists: Boolean
  gtin_exists: Boolean
  allergenList_exists: Boolean
  createdAt_lte: DateTime
  publishedAt_nin: [DateTime]
  netWeight_exists: Boolean
  sku_ne: String
  publishedAt_ne: DateTime
  name_ne: String
  allergenList_in: [ProductAllergenListQueryInput]
  gtin_gt: String
  publishedAt_exists: Boolean
  producer: ProductProducerQueryInput
  createdAt_lt: DateTime
  nutrientList_nin: [ProductNutrientListQueryInput]
  createdAt: DateTime
  images_exists: Boolean
  ids: [String]
  name_gte: String
  sku_lte: String
  images: [ProductImageQueryInput]
  gtin_nin: [String]
  publishedAt_gte: DateTime
  sku_gt: String
  _id_lt: ObjectId
  createdAt_nin: [DateTime]
  createdAt_exists: Boolean
  _id_ne: ObjectId
  brand: ProductBrandQueryInput
  categories_nin: [ProductCategoryQueryInput]
  images_in: [ProductImageQueryInput]
  gtin_ne: String
  sku: String
  categories_in: [ProductCategoryQueryInput]
  publishedAt: DateTime
  name_gt: String
  ids_nin: [String]
  name_nin: [String]
  allergenList: [ProductAllergenListQueryInput]
  group: ProductGroupQueryInput
  ids_in: [String]
  name_in: [String]
  nutrientList_exists: Boolean
  createdAt_gte: DateTime
  createdAt_ne: DateTime
  _id: ObjectId
  countryOfOrigin: CodeQueryInput
  nutrientList_in: [ProductNutrientListQueryInput]
  countryOfOrigin_exists: Boolean
  sku_exists: Boolean
  _id_in: [ObjectId]
  ingredientList: [ProductIngredientListQueryInput]
  brand_exists: Boolean
  name: String
  publishedAt_gt: DateTime
  weight_exists: Boolean
  _id_exists: Boolean
  netWeight: ProductNetWeightQueryInput
  weight: ProductWeightQueryInput
  gtin_lt: String
  sku_gte: String
  gtin_in: [String]
  publishedAt_lt: DateTime
  categories_exists: Boolean
  _id_gte: ObjectId
  categories: [ProductCategoryQueryInput]
  gtin: String
  name_lt: String
  ingredientList_exists: Boolean
  createdAt_in: [DateTime]
  OR: [ProductQueryInput!]
  _id_gt: ObjectId
  owner: ProductOwnerQueryInput
  allergenList_nin: [ProductAllergenListQueryInput]
  sku_nin: [String]
  ingredientList_in: [ProductIngredientListQueryInput]
  nutrientList: [ProductNutrientListQueryInput]
  gtin_lte: String
  ids_exists: Boolean
  _id_nin: [ObjectId]
  publishedAt_in: [DateTime]
}

type TourLegPayloadWeight {
  unit: TourLegPayloadWeightUnit
  value: Int
}

input ShippingMethodInsertInput {
  _id: ObjectId
  description: String
  ids: [String]
  name: String
  owner: ShippingMethodOwnerInsertInput
  pickup: ShippingMethodPickupInsertInput
  type: String
}

input VehicleCapacityWeightInsertInput {
  unit: VehicleCapacityWeightUnitInsertInput
  value: Float
}

input TransactionChannelInternalTargetWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input CatalogItemWeightUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: CatalogItemWeightUnitUpdateInput
  unit_unset: Boolean
}

input WorkspaceGeoQueryInput {
  OR: [WorkspaceGeoQueryInput!]
  type: String
  type_exists: Boolean
  AND: [WorkspaceGeoQueryInput!]
  coordinates_exists: Boolean
  type_lte: String
  coordinates: [Float]
  coordinates_in: [Float]
  type_in: [String]
  type_gte: String
  type_gt: String
  coordinates_nin: [Float]
  type_nin: [String]
  type_ne: String
  type_lt: String
}

input VehicleCapacityWeightUnitQueryInput {
  symbol_lt: String
  symbol_gte: String
  symbol_ne: String
  symbol_exists: Boolean
  symbol_lte: String
  symbol_in: [String]
  AND: [VehicleCapacityWeightUnitQueryInput!]
  symbol: String
  symbol_gt: String
  OR: [VehicleCapacityWeightUnitQueryInput!]
  symbol_nin: [String]
}

type VehicleCapacityWeightUnit {
  symbol: String
}

input TourDraftUpdateInput {
  distance_unset: Boolean
  owner: TourDraftOwnerUpdateInput
  _id: ObjectId
  owner_unset: Boolean
  distance: TourDraftDistanceUpdateInput
  optimisation_unset: Boolean
  tour: TourDraftTourRelationInput
  vehicle_unset: Boolean
  tour_unset: Boolean
  validation: TourDraftValidationUpdateInput
  _id_unset: Boolean
  optimisation: TourDraftOptimisationUpdateInput
  duration_unset: Boolean
  shipments: TourDraftShipmentsRelationInput
  stops_unset: Boolean
  vehicle: TourDraftVehicleRelationInput
  stops: [TourDraftStopUpdateInput]
  shipments_unset: Boolean
  validation_unset: Boolean
  duration: TourDraftDurationUpdateInput
}

input OrderShippingAddressPlaceRelationInput {
  create: PlaceInsertInput
  link: ObjectId
}

input VehicleWeightUnitInsertInput {
  symbol: String
}

input VehicleCostUpdateInput {
  value_unset: Boolean
  driver: VehicleCostDriverUpdateInput
  value_inc: Float
  driver_unset: Boolean
  resource: VehicleCostResourceUpdateInput
  value: Float
  unit_unset: Boolean
  unit: VehicleCostUnitUpdateInput
  resource_unset: Boolean
}

input OrderBuyerQueryInput {
  person_lt: ObjectId
  AND: [OrderBuyerQueryInput!]
  email_nin: [String]
  phone_gte: String
  name_lte: String
  name_gte: String
  name_ne: String
  person: ObjectId
  phone_gt: String
  email: String
  email_gt: String
  person_exists: Boolean
  phone_lt: String
  name_lt: String
  name_nin: [String]
  phone_nin: [String]
  phone_lte: String
  phone_in: [String]
  person_in: [ObjectId]
  email_gte: String
  email_in: [String]
  person_lte: ObjectId
  person_gt: ObjectId
  email_ne: String
  email_lt: String
  name_gt: String
  person_gte: ObjectId
  name_in: [String]
  name_exists: Boolean
  OR: [OrderBuyerQueryInput!]
  email_lte: String
  name: String
  person_ne: ObjectId
  phone_exists: Boolean
  person_nin: [ObjectId]
  phone: String
  phone_ne: String
  email_exists: Boolean
}

type ShippingMethodOwner {
  workspace: Workspace
}

input TourDraftTourRelationInput {
  link: ObjectId
  create: TourInsertInput
}

input TourLegUpdateInput {
  duration_unset: Boolean
  origin: TourLegOriginUpdateInput
  origin_unset: Boolean
  payload: TourLegPayloadUpdateInput
  destination: TourLegDestinationUpdateInput
  destination_unset: Boolean
  distance: TourLegDistanceUpdateInput
  distance_unset: Boolean
  duration: TourLegDurationUpdateInput
  payload_unset: Boolean
}

input PlaceAddressQueryInput {
  AND: [PlaceAddressQueryInput!]
  postalCode_nin: [String]
  street_nin: [String]
  locality_exists: Boolean
  OR: [PlaceAddressQueryInput!]
  postalCode_lt: String
  postalCode: String
  postalCode_in: [String]
  street_exists: Boolean
  postalCode_gt: String
  street_gte: String
  street_ne: String
  locality_gt: String
  country_exists: Boolean
  locality_ne: String
  postalCode_exists: Boolean
  street_in: [String]
  locality_lte: String
  locality: String
  street_gt: String
  street_lt: String
  postalCode_lte: String
  street_lte: String
  postalCode_ne: String
  postalCode_gte: String
  locality_nin: [String]
  street: String
  locality_lt: String
  country: PlaceAddressCountryQueryInput
  locality_in: [String]
  locality_gte: String
}

input TransactionChannelExternalTargetMarketplaceQueryInput {
  key_lt: String
  key_in: [String]
  key_nin: [String]
  OR: [TransactionChannelExternalTargetMarketplaceQueryInput!]
  key_lte: String
  AND: [TransactionChannelExternalTargetMarketplaceQueryInput!]
  key: String
  key_gte: String
  key_ne: String
  key_gt: String
  key_exists: Boolean
}

input VehicleCompartmentCapacityUpdateInput {
  volume_unset: Boolean
  weight: VehicleCompartmentCapacityWeightUpdateInput
  weight_unset: Boolean
  volume: VehicleCompartmentCapacityVolumeUpdateInput
}

type ShippingMethodPickup {
  points: [ShippingMethodPickupPoint]
}

input ShipmentDeliveryCountryQueryInput {
  OR: [ShipmentDeliveryCountryQueryInput!]
  name_gt: String
  name_in: [String]
  name: String
  name_nin: [String]
  name_lt: String
  name_gte: String
  name_lte: String
  AND: [ShipmentDeliveryCountryQueryInput!]
  name_exists: Boolean
  name_ne: String
}

input VehicleCompartmentFeatureQueryInput {
  key_lte: String
  key_ne: String
  AND: [VehicleCompartmentFeatureQueryInput!]
  key_lt: String
  key_nin: [String]
  key_exists: Boolean
  name_gte: String
  name_nin: [String]
  name_in: [String]
  name_ne: String
  OR: [VehicleCompartmentFeatureQueryInput!]
  key_gte: String
  name: String
  name_lte: String
  key_in: [String]
  key_gt: String
  name_gt: String
  name_lt: String
  key: String
  name_exists: Boolean
}

type OrderLineQuantity {
  unit: OrderLineQuantityUnit
  value: Int
}

type VehicleCompartmentCapacityVolume {
  unit: VehicleCompartmentCapacityVolumeUnit
  value: Float
}

type VehicleCostDriverUnit {
  symbol: String
}

type TourLegDistanceUnit {
  symbol: String
}

type TourDraftStopDuration {
  unit: TourDraftStopDurationUnit
  value: Float
}

input OrderShippingAddressCountryQueryInput {
  code: String
  name_lte: String
  code_gte: String
  name_lt: String
  name_ne: String
  name_gt: String
  code_nin: [String]
  AND: [OrderShippingAddressCountryQueryInput!]
  code_in: [String]
  OR: [OrderShippingAddressCountryQueryInput!]
  name_exists: Boolean
  name_nin: [String]
  name_gte: String
  code_exists: Boolean
  code_ne: String
  code_gt: String
  code_lt: String
  code_lte: String
  name: String
  name_in: [String]
}

input TourLegDurationUpdateInput {
  unit: TourLegDurationUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input TourDraftOptimisationInsertInput {
  status: String
}

input VehicleCompartmentCapacityVolumeQueryInput {
  value: Float
  value_lt: Float
  AND: [VehicleCompartmentCapacityVolumeQueryInput!]
  unit: VehicleCompartmentCapacityVolumeUnitQueryInput
  value_gte: Float
  OR: [VehicleCompartmentCapacityVolumeQueryInput!]
  unit_exists: Boolean
  value_exists: Boolean
  value_lte: Float
  value_in: [Float]
  value_ne: Float
  value_gt: Float
  value_nin: [Float]
}

input TourDraftDurationUnitInsertInput {
  symbol: String
}

input VehicleCapacityWeightUnitUpdateInput {
  symbol_unset: Boolean
  symbol: String
}

input OrderLinePriceCurrencyUpdateInput {
  code: String
  code_unset: Boolean
  symbol: String
  symbol_unset: Boolean
  text: String
  text_unset: Boolean
}

input OrderLineQuantityUnitUpdateInput {
  text_unset: Boolean
  code: String
  code_unset: Boolean
  symbol: String
  symbol_unset: Boolean
  text: String
}

input OrderLineProductUpdateInput {
  _id: ObjectId
  _id_unset: Boolean
}

input ShipmentLineQueryInput {
  quantity: ShipmentLineQuantityQueryInput
  product: ObjectId
  product_nin: [ObjectId]
  product_in: [ObjectId]
  name_lte: String
  product_lt: ObjectId
  product_exists: Boolean
  name_lt: String
  product_lte: ObjectId
  product_gt: ObjectId
  AND: [ShipmentLineQueryInput!]
  name_exists: Boolean
  name_gt: String
  product_gte: ObjectId
  name_ne: String
  name_gte: String
  name_nin: [String]
  product_ne: ObjectId
  name: String
  quantity_exists: Boolean
  weight: ShipmentLineWeightQueryInput
  name_in: [String]
  weight_exists: Boolean
  OR: [ShipmentLineQueryInput!]
}

type CatalogItemWeightUnit {
  code: String
}

input CatalogItemOwnerInsertInput {
  workspace: CatalogItemOwnerWorkspaceRelationInput
}

input CatalogOwnerInsertInput {
  workspace: CatalogOwnerWorkspaceRelationInput
}

input ShipmentUpdateInput {
  status: String
  order: ShipmentOrderRelationInput
  _id_unset: Boolean
  weight: ShipmentWeightUpdateInput
  method: ShipmentMethodRelationInput
  _id: ObjectId
  delivery: ShipmentDeliveryUpdateInput
  date: DateTime
  delivery_unset: Boolean
  weight_unset: Boolean
  status_unset: Boolean
  lines: [ShipmentLineUpdateInput]
  key_unset: Boolean
  pickup: ShipmentPickupUpdateInput
  key: String
  date_unset: Boolean
  order_unset: Boolean
  pickup_unset: Boolean
  lines_unset: Boolean
  method_unset: Boolean
}

input ShipmentDeliveryCountryUpdateInput {
  name_unset: Boolean
  name: String
}

type ProductCategory {
  _id: ObjectId
  children: [ProductCategory]
  classification: ProductClassification
  hierarchyLevel: Int
  id: String
  ids: [String]
  name: String
}

type ProductIngredientListIngredient {
  name: String
}

input TourLegPayloadWeightQueryInput {
  value_gte: Int
  value_lte: Int
  OR: [TourLegPayloadWeightQueryInput!]
  value_lt: Int
  value_nin: [Int]
  value_gt: Int
  unit_exists: Boolean
  value_exists: Boolean
  value_ne: Int
  AND: [TourLegPayloadWeightQueryInput!]
  value: Int
  value_in: [Int]
  unit: TourLegPayloadWeightUnitQueryInput
}

input VehicleCostResourceQueryInput {
  key_gt: String
  key_gte: String
  key_exists: Boolean
  unit_exists: Boolean
  type_nin: [String]
  type_gt: String
  AND: [VehicleCostResourceQueryInput!]
  key: String
  type_gte: String
  key_lte: String
  OR: [VehicleCostResourceQueryInput!]
  key_nin: [String]
  key_lt: String
  type_lt: String
  unit: VehicleCostResourceUnitQueryInput
  type_in: [String]
  currency: VehicleCostResourceCurrencyQueryInput
  type: String
  type_exists: Boolean
  type_lte: String
  type_ne: String
  currency_exists: Boolean
  key_ne: String
  key_in: [String]
}

input VehicleCostUnitQueryInput {
  OR: [VehicleCostUnitQueryInput!]
  AND: [VehicleCostUnitQueryInput!]
  symbol: String
  symbol_in: [String]
  symbol_nin: [String]
  symbol_exists: Boolean
  symbol_ne: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
}

input TourStopTaskDurationQueryInput {
  AND: [TourStopTaskDurationQueryInput!]
  OR: [TourStopTaskDurationQueryInput!]
  value_lt: Float
  value_gt: Float
  value: Float
  value_in: [Float]
  value_nin: [Float]
  value_gte: Float
  unit_exists: Boolean
  value_exists: Boolean
  value_ne: Float
  unit: TourStopTaskDurationUnitQueryInput
  value_lte: Float
}

type VehicleOwner {
  workspace: Workspace
}

input TourDraftDistanceInsertInput {
  unit: TourDraftDistanceUnitInsertInput
  value: Float
}

input VehicleCompartmentCapacityVolumeUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input ProductIngredientListInsertInput {
  ingredient: ProductIngredientListIngredientInsertInput
  sequence: String
  quantity: ProductIngredientListQuantityInsertInput
}

input TourVehicleRelationInput {
  create: VehicleInsertInput
  link: ObjectId
}

input TourDraftStopDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input TourStopTaskUpdateInput {
  duration: TourStopTaskDurationUpdateInput
  duration_unset: Boolean
  name: String
  name_unset: Boolean
  shipments: [ObjectId]
  shipments_unset: Boolean
}

input InventoryItemQueryInput {
  product_lte: ObjectId
  _id_nin: [ObjectId]
  _id_lte: ObjectId
  _id_in: [ObjectId]
  product_gte: ObjectId
  _id: ObjectId
  OR: [InventoryItemQueryInput!]
  product_gt: ObjectId
  quantity: InventoryItemQuantityQueryInput
  _id_lt: ObjectId
  _id_exists: Boolean
  product_lt: ObjectId
  product_in: [ObjectId]
  AND: [InventoryItemQueryInput!]
  product_exists: Boolean
  _id_ne: ObjectId
  quantity_exists: Boolean
  _id_gte: ObjectId
  product_nin: [ObjectId]
  _id_gt: ObjectId
  product: ObjectId
  product_ne: ObjectId
}

input TourStopTaskDurationUpdateInput {
  unit: TourStopTaskDurationUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input VehicleCostDriverUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type ShipmentPickup {
  place: Place
}

input OrderLinePriceInsertInput {
  currency: OrderLinePriceCurrencyInsertInput
  value: Float
}

input TourLegDistanceUnitInsertInput {
  symbol: String
}

input TourStopTaskDurationUnitInsertInput {
  symbol: String
}

input TransactionChannelFilterUpdateInput {
  isOrdered_unset: Boolean
  status: String
  status_unset: Boolean
  isOrdered: Boolean
}

input ShippingMethodPickupPointUpdateInput {
  place_unset: Boolean
  place: ObjectId
}

input OfferPriceUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  currency: OfferPriceCurrencyUpdateInput
  currency_unset: Boolean
}

input CodeQueryInput {
  AND: [CodeQueryInput!]
  name: String
  _id: ObjectId
  sequence_gte: String
  _id_gt: ObjectId
  _id_lte: ObjectId
  symbol_exists: Boolean
  list: CodeListQueryInput
  key_ne: String
  list_exists: Boolean
  key_lte: String
  name_nin: [String]
  name_gte: String
  symbol_gte: String
  key_in: [String]
  name_in: [String]
  symbol_ne: String
  key_nin: [String]
  sequence_in: [String]
  sequence_nin: [String]
  key_exists: Boolean
  key_gt: String
  name_gt: String
  _id_ne: ObjectId
  name_lt: String
  _id_exists: Boolean
  _id_nin: [ObjectId]
  symbol_lte: String
  name_lte: String
  sequence_exists: Boolean
  sequence_lt: String
  _id_gte: ObjectId
  name_ne: String
  key: String
  symbol_lt: String
  key_gte: String
  name_exists: Boolean
  _id_lt: ObjectId
  symbol_gt: String
  symbol_nin: [String]
  _id_in: [ObjectId]
  sequence_lte: String
  sequence_ne: String
  OR: [CodeQueryInput!]
  symbol_in: [String]
  key_lt: String
  sequence: String
  sequence_gt: String
  symbol: String
}

type TourLeg {
  destination: TourLegDestination
  distance: TourLegDistance
  duration: TourLegDuration
  origin: TourLegOrigin
  payload: TourLegPayload
}

input OrderShippingAddressInsertInput {
  name: String
  phone: String
  place: OrderShippingAddressPlaceRelationInput
  postalCode: String
  street: String
  country: OrderShippingAddressCountryInsertInput
  geo: OrderShippingAddressGeoInsertInput
  locality: String
}

input OrderShippingAddressGeoInsertInput {
  coordinates: [Float]
  type: String
}

input ProductGroupInsertInput {
  name: String
  _id: ObjectId
}

input TransactionChannelFilterInsertInput {
  isOrdered: Boolean
  status: String
}

input OrderBuyerUpdateInput {
  email_unset: Boolean
  name: String
  name_unset: Boolean
  person: ObjectId
  person_unset: Boolean
  phone: String
  phone_unset: Boolean
  email: String
}

scalar ObjectId

input TransactionChannelQueryInput {
  resource_gte: String
  _id_in: [ObjectId]
  role: String
  direction_in: [String]
  filter_exists: Boolean
  resource_exists: Boolean
  role_lt: String
  _id_lte: ObjectId
  _id_gt: ObjectId
  _id_lt: ObjectId
  resource_gt: String
  direction: String
  internalTarget_exists: Boolean
  direction_nin: [String]
  AND: [TransactionChannelQueryInput!]
  role_lte: String
  _id_exists: Boolean
  resource_nin: [String]
  _id_ne: ObjectId
  role_gte: String
  resource_in: [String]
  direction_lte: String
  direction_gt: String
  externalTarget_exists: Boolean
  role_in: [String]
  _id_gte: ObjectId
  _id: ObjectId
  resource_ne: String
  role_ne: String
  direction_ne: String
  role_nin: [String]
  direction_exists: Boolean
  role_gt: String
  internalTarget: TransactionChannelInternalTargetQueryInput
  resource_lt: String
  direction_lt: String
  resource_lte: String
  role_exists: Boolean
  externalTarget: TransactionChannelExternalTargetQueryInput
  _id_nin: [ObjectId]
  filter: TransactionChannelFilterQueryInput
  resource: String
  OR: [TransactionChannelQueryInput!]
  direction_gte: String
}

input VehicleModelInsertInput {
  name: String
  date: DateTime
}

input VehicleCostResourceUnitInsertInput {
  symbol: String
}

input TransactionChannelExternalTargetUpdateInput {
  platform_unset: Boolean
  enterprise: TransactionChannelExternalTargetEnterpriseUpdateInput
  enterprise_unset: Boolean
  marketplace: TransactionChannelExternalTargetMarketplaceUpdateInput
  marketplace_unset: Boolean
  platform: TransactionChannelExternalTargetPlatformUpdateInput
}

input VehicleCostUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input VehicleCostDriverUpdateInput {
  unit_unset: Boolean
  factor: Float
  factor_inc: Float
  factor_unset: Boolean
  type: String
  type_unset: Boolean
  unit: VehicleCostDriverUnitUpdateInput
}

type TourDraftStopDurationUnit {
  symbol: String
}

input TourLegDurationQueryInput {
  value_gte: Float
  value_in: [Float]
  AND: [TourLegDurationQueryInput!]
  value_lt: Float
  unit_exists: Boolean
  value_nin: [Float]
  value_exists: Boolean
  value_ne: Float
  value_gt: Float
  value: Float
  OR: [TourLegDurationQueryInput!]
  unit: TourLegDurationUnitQueryInput
  value_lte: Float
}

input VehicleCompartmentFeatureInsertInput {
  key: String
  name: String
}

input ProductOwnerQueryInput {
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [ProductOwnerQueryInput!]
  OR: [ProductOwnerQueryInput!]
  place: PlaceQueryInput
  place_exists: Boolean
}

input OrderShippingMethodRelationInput {
  link: ObjectId
  create: ShippingMethodInsertInput
}

input TourStopPickupInsertInput {
  shipments: [ObjectId]
}

input ProductAllergenListUpdateInput {
  quantity: ProductAllergenListQuantityUpdateInput
  quantity_unset: Boolean
  allergen: ObjectId
  allergen_unset: Boolean
}

input TourDurationInsertInput {
  unit: TourDurationUnitInsertInput
  value: Float
}

input WorkspaceAddressCountryInsertInput {
  name: String
}

input ShipmentLineInsertInput {
  quantity: ShipmentLineQuantityInsertInput
  weight: ShipmentLineWeightInsertInput
  name: String
  product: ObjectId
}

input OrderLineProductInsertInput {
  _id: ObjectId
}

input TourStopTaskDurationInsertInput {
  unit: TourStopTaskDurationUnitInsertInput
  value: Float
}

input TourDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input ShipmentQueryInput {
  key_exists: Boolean
  status_ne: String
  date_nin: [DateTime]
  lines_in: [ShipmentLineQueryInput]
  key_in: [String]
  _id: ObjectId
  status_gte: String
  delivery_exists: Boolean
  delivery: ShipmentDeliveryQueryInput
  status_gt: String
  order: OrderQueryInput
  key_lte: String
  key_nin: [String]
  date_lte: DateTime
  AND: [ShipmentQueryInput!]
  date_exists: Boolean
  date_lt: DateTime
  key_lt: String
  _id_nin: [ObjectId]
  _id_lte: ObjectId
  _id_in: [ObjectId]
  status_exists: Boolean
  date_gt: DateTime
  date: DateTime
  key: String
  key_gte: String
  key_gt: String
  _id_gte: ObjectId
  status_nin: [String]
  status: String
  lines_exists: Boolean
  weight: ShipmentWeightQueryInput
  date_gte: DateTime
  date_in: [DateTime]
  order_exists: Boolean
  weight_exists: Boolean
  _id_lt: ObjectId
  method_exists: Boolean
  OR: [ShipmentQueryInput!]
  _id_gt: ObjectId
  pickup: ShipmentPickupQueryInput
  lines_nin: [ShipmentLineQueryInput]
  key_ne: String
  date_ne: DateTime
  status_lte: String
  method: ShippingMethodQueryInput
  pickup_exists: Boolean
  _id_ne: ObjectId
  status_in: [String]
  status_lt: String
  lines: [ShipmentLineQueryInput]
  _id_exists: Boolean
}

enum InventoryItemSortByInput {
  _ID_ASC
  _ID_DESC
  PRODUCT_ASC
  PRODUCT_DESC
}

input TourLegDestinationInsertInput {
  place: ObjectId
}

input VehicleCompartmentCapacityVolumeUpdateInput {
  value_inc: Float
  unit: VehicleCompartmentCapacityVolumeUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_unset: Boolean
}

type WorkspaceAddress {
  country: WorkspaceAddressCountry
  locality: String
  postalCode: String
  street: String
}

type Vehicle {
  _id: ObjectId
  brand: VehicleBrand
  capacity: VehicleCapacity
  compartments: [VehicleCompartment]
  costs: [VehicleCost]
  features: [VehicleFeature]
  model: VehicleModel
  name: String
  owner: VehicleOwner
  type: String
  weight: VehicleWeight
}

input TourStopDurationUnitQueryInput {
  AND: [TourStopDurationUnitQueryInput!]
  symbol_exists: Boolean
  symbol_ne: String
  symbol_lt: String
  symbol_in: [String]
  symbol_lte: String
  symbol: String
  symbol_gt: String
  symbol_gte: String
  OR: [TourStopDurationUnitQueryInput!]
  symbol_nin: [String]
}

type TourDraftStopDelivery {
  shipments: [ObjectId]
}

input TourDurationUpdateInput {
  value_unset: Boolean
  value_inc: Float
  unit: TourDurationUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

input ProductCategoryQueryInput {
  name_lt: String
  hierarchyLevel: Int
  id: String
  id_in: [String]
  ids_exists: Boolean
  children_exists: Boolean
  hierarchyLevel_nin: [Int]
  _id_lt: ObjectId
  hierarchyLevel_gte: Int
  hierarchyLevel_exists: Boolean
  _id_gt: ObjectId
  id_ne: String
  hierarchyLevel_lte: Int
  id_gte: String
  name_lte: String
  hierarchyLevel_gt: Int
  name: String
  id_gt: String
  _id_in: [ObjectId]
  children_in: [ProductCategoryQueryInput]
  name_ne: String
  name_exists: Boolean
  id_lt: String
  ids: [String]
  OR: [ProductCategoryQueryInput!]
  ids_in: [String]
  _id_lte: ObjectId
  name_gte: String
  _id_ne: ObjectId
  id_lte: String
  _id: ObjectId
  name_in: [String]
  hierarchyLevel_in: [Int]
  id_nin: [String]
  children: [ProductCategoryQueryInput]
  AND: [ProductCategoryQueryInput!]
  children_nin: [ProductCategoryQueryInput]
  hierarchyLevel_ne: Int
  _id_exists: Boolean
  _id_nin: [ObjectId]
  id_exists: Boolean
  _id_gte: ObjectId
  ids_nin: [String]
  name_gt: String
  classification: ProductClassificationQueryInput
  classification_exists: Boolean
  name_nin: [String]
  hierarchyLevel_lt: Int
}

type VehicleCost {
  driver: VehicleCostDriver
  resource: VehicleCostResource
  unit: VehicleCostUnit
  value: Float
}

input VehicleCompartmentCapacityVolumeUnitInsertInput {
  symbol: String
}

input ProductNutrientListQuantityInsertInput {
  unit: ObjectId
  value: Int
}

input TourDurationQueryInput {
  AND: [TourDurationQueryInput!]
  value: Float
  value_ne: Float
  value_exists: Boolean
  OR: [TourDurationQueryInput!]
  unit_exists: Boolean
  value_nin: [Float]
  unit: TourDurationUnitQueryInput
  value_gte: Float
  value_gt: Float
  value_lt: Float
  value_lte: Float
  value_in: [Float]
}

input VehicleCompartmentCapacityVolumeUnitQueryInput {
  symbol_gt: String
  OR: [VehicleCompartmentCapacityVolumeUnitQueryInput!]
  symbol_lt: String
  symbol: String
  symbol_exists: Boolean
  symbol_nin: [String]
  AND: [VehicleCompartmentCapacityVolumeUnitQueryInput!]
  symbol_gte: String
  symbol_ne: String
  symbol_lte: String
  symbol_in: [String]
}

input TourDistanceUnitInsertInput {
  symbol: String
}

input PlaceGeoUpdateInput {
  coordinates_unset: Boolean
  type: String
  type_unset: Boolean
  coordinates: [Float]
}

input ProductIngredientListIngredientQueryInput {
  name_nin: [String]
  name_gte: String
  name: String
  name_lte: String
  name_in: [String]
  name_lt: String
  name_ne: String
  name_gt: String
  OR: [ProductIngredientListIngredientQueryInput!]
  name_exists: Boolean
  AND: [ProductIngredientListIngredientQueryInput!]
}

input ProductAllergenListQueryInput {
  allergen_ne: ObjectId
  allergen_gt: ObjectId
  allergen: ObjectId
  allergen_in: [ObjectId]
  allergen_exists: Boolean
  quantity_exists: Boolean
  OR: [ProductAllergenListQueryInput!]
  allergen_nin: [ObjectId]
  AND: [ProductAllergenListQueryInput!]
  allergen_gte: ObjectId
  allergen_lte: ObjectId
  allergen_lt: ObjectId
  quantity: ProductAllergenListQuantityQueryInput
}

input VehicleCapacityWeightQueryInput {
  OR: [VehicleCapacityWeightQueryInput!]
  unit: VehicleCapacityWeightUnitQueryInput
  AND: [VehicleCapacityWeightQueryInput!]
  value: Float
  value_exists: Boolean
  value_ne: Float
  value_lt: Float
  value_in: [Float]
  unit_exists: Boolean
  value_gt: Float
  value_gte: Float
  value_nin: [Float]
  value_lte: Float
}

type Tour {
  _id: ObjectId
  date: DateTime
  distance: TourDistance
  duration: TourDuration
  legs: [TourLeg]
  name: String
  owner: TourOwner
  shipments: [Shipment]
  stops: [TourStop]
  vehicle: Vehicle
}

enum TransactionChannelSortByInput {
  _ID_ASC
  _ID_DESC
  DIRECTION_ASC
  DIRECTION_DESC
  RESOURCE_ASC
  RESOURCE_DESC
  ROLE_ASC
  ROLE_DESC
}

input TourShipmentsRelationInput {
  link: [ObjectId]
  create: [ShipmentInsertInput]
}

input ShipmentMethodRelationInput {
  create: ShippingMethodInsertInput
  link: ObjectId
}

input WorkspaceMarketplaceInsertInput {
  key: String
}

enum ProductSortByInput {
  COUNTRYOFORIGIN_ASC
  GROUP_ASC
  NAME_ASC
  NAME_DESC
  GTIN_ASC
  GTIN_DESC
  CREATEDAT_ASC
  CREATEDAT_DESC
  PUBLISHEDAT_DESC
  SKU_ASC
  SKU_DESC
  _ID_ASC
  _ID_DESC
  COUNTRYOFORIGIN_DESC
  PUBLISHEDAT_ASC
  GROUP_DESC
}

input VehicleCapacityWeightUnitInsertInput {
  symbol: String
}

input VehicleCompartmentQueryInput {
  capacity_exists: Boolean
  name_lte: String
  features_exists: Boolean
  name_exists: Boolean
  features_in: [VehicleCompartmentFeatureQueryInput]
  name: String
  name_nin: [String]
  name_in: [String]
  capacity: VehicleCompartmentCapacityQueryInput
  features: [VehicleCompartmentFeatureQueryInput]
  AND: [VehicleCompartmentQueryInput!]
  name_gt: String
  OR: [VehicleCompartmentQueryInput!]
  name_ne: String
  features_nin: [VehicleCompartmentFeatureQueryInput]
  name_gte: String
  name_lt: String
}

input TourDraftStopGeoQueryInput {
  coordinates_nin: [Float]
  type_in: [String]
  type_exists: Boolean
  type_gte: String
  type_lt: String
  coordinates: [Float]
  type_nin: [String]
  OR: [TourDraftStopGeoQueryInput!]
  coordinates_exists: Boolean
  type: String
  coordinates_in: [Float]
  type_ne: String
  AND: [TourDraftStopGeoQueryInput!]
  type_lte: String
  type_gt: String
}

type VehicleWeight {
  unit: VehicleWeightUnit
  value: Float
}

input VehicleFeatureInsertInput {
  key: String
  name: String
}

input VehicleCostResourceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input OrderLineUpdateInput {
  price: OrderLinePriceUpdateInput
  item: OrderLineItemUpdateInput
  name_unset: Boolean
  name: String
  gtin: String
  sku: String
  quantity: OrderLineQuantityUpdateInput
  product1: ObjectId
  product1_unset: Boolean
  product: OrderLineProductUpdateInput
  quantity_unset: Boolean
  item_unset: Boolean
  gtin_unset: Boolean
  price_unset: Boolean
  sku_unset: Boolean
  product_unset: Boolean
}

type Product {
  _id: ObjectId
  allergenList: [ProductAllergenList]
  brand: ProductBrand
  categories: [ProductCategory]
  countryOfOrigin: Code
  createdAt: DateTime
  group: ProductGroup
  gtin: String
  ids: [String]
  images: [ProductImage]
  ingredientList: [ProductIngredientList]
  name: String
  netWeight: ProductNetWeight
  nutrientList: [ProductNutrientList]
  owner: ProductOwner
  producer: ProductProducer
  publishedAt: DateTime
  sku: String
  weight: ProductWeight
}

type TourLegDistance {
  unit: TourLegDistanceUnit
  value: Float
}

input OrderBuyerInsertInput {
  email: String
  name: String
  person: ObjectId
  phone: String
}

input WorkspaceEnterpriseUpdateInput {
  vatId_unset: Boolean
  ids: [String]
  ids_unset: Boolean
  name: String
  name_unset: Boolean
  vatId: String
}

type Query {
  area(query: AreaQueryInput): Area
  areas(
    query: AreaQueryInput
    limit: Int = 100
    sortBy: AreaSortByInput
  ): [Area]!
  catalog(query: CatalogQueryInput): Catalog
  catalogItem(query: CatalogItemQueryInput): CatalogItem
  catalogItems(
    query: CatalogItemQueryInput
    limit: Int = 100
    sortBy: CatalogItemSortByInput
  ): [CatalogItem]!
  catalogs(
    query: CatalogQueryInput
    limit: Int = 100
    sortBy: CatalogSortByInput
  ): [Catalog]!
  code(query: CodeQueryInput): Code
  codeList(query: CodeListQueryInput): CodeList
  codeLists(
    query: CodeListQueryInput
    limit: Int = 100
    sortBy: CodeListSortByInput
  ): [CodeList]!
  codes(
    query: CodeQueryInput
    limit: Int = 100
    sortBy: CodeSortByInput
  ): [Code]!
  inventoryItem(query: InventoryItemQueryInput): InventoryItem
  inventoryItems(
    query: InventoryItemQueryInput
    limit: Int = 100
    sortBy: InventoryItemSortByInput
  ): [InventoryItem]!
  offer(query: OfferQueryInput): Offer
  offers(
    query: OfferQueryInput
    limit: Int = 100
    sortBy: OfferSortByInput
  ): [Offer]!
  order(query: OrderQueryInput): Order
  orders(
    query: OrderQueryInput
    limit: Int = 100
    sortBy: OrderSortByInput
  ): [Order]!
  place(query: PlaceQueryInput): Place
  places(
    limit: Int = 100
    sortBy: PlaceSortByInput
    query: PlaceQueryInput
  ): [Place]!
  product(query: ProductQueryInput): Product
  productCategories(
    query: ProductCategoryQueryInput
    limit: Int = 100
    sortBy: ProductCategorySortByInput
  ): [ProductCategory]!
  productCategory(query: ProductCategoryQueryInput): ProductCategory
  productClassification(
    query: ProductClassificationQueryInput
  ): ProductClassification
  productClassifications(
    query: ProductClassificationQueryInput
    limit: Int = 100
    sortBy: ProductClassificationSortByInput
  ): [ProductClassification]!
  productGroup(query: ProductGroupQueryInput): ProductGroup
  productGroups(
    query: ProductGroupQueryInput
    limit: Int = 100
    sortBy: ProductGroupSortByInput
  ): [ProductGroup]!
  products(
    sortBy: ProductSortByInput
    query: ProductQueryInput
    limit: Int = 100
  ): [Product]!
  shipment(query: ShipmentQueryInput): Shipment
  shipments(
    query: ShipmentQueryInput
    limit: Int = 100
    sortBy: ShipmentSortByInput
  ): [Shipment]!
  shippingMethod(query: ShippingMethodQueryInput): ShippingMethod
  shippingMethods(
    query: ShippingMethodQueryInput
    limit: Int = 100
    sortBy: ShippingMethodSortByInput
  ): [ShippingMethod]!
  tour(query: TourQueryInput): Tour
  tourDraft(query: TourDraftQueryInput): TourDraft
  tourDrafts(
    query: TourDraftQueryInput
    limit: Int = 100
    sortBy: TourDraftSortByInput
  ): [TourDraft]!
  tours(
    query: TourQueryInput
    limit: Int = 100
    sortBy: TourSortByInput
  ): [Tour]!
  transactionChannel(query: TransactionChannelQueryInput): TransactionChannel
  transactionChannels(
    query: TransactionChannelQueryInput
    limit: Int = 100
    sortBy: TransactionChannelSortByInput
  ): [TransactionChannel]!
  vehicle(query: VehicleQueryInput): Vehicle
  vehicles(
    query: VehicleQueryInput
    limit: Int = 100
    sortBy: VehicleSortByInput
  ): [Vehicle]!
  workspace(query: WorkspaceQueryInput): Workspace
  workspaces(
    query: WorkspaceQueryInput
    limit: Int = 100
    sortBy: WorkspaceSortByInput
  ): [Workspace]!
}

type TourLegDuration {
  unit: TourLegDurationUnit
  value: Float
}

input TourLegOriginInsertInput {
  place: ObjectId
}

input VehicleCompartmentCapacityWeightUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input CatalogQueryInput {
  _id_ne: ObjectId
  enterprise_lte: ObjectId
  _id_nin: [ObjectId]
  enterprise_exists: Boolean
  owner_exists: Boolean
  enterprise_gte: ObjectId
  enterprise_nin: [ObjectId]
  _id_lte: ObjectId
  enterprise_in: [ObjectId]
  _id_gte: ObjectId
  _id_in: [ObjectId]
  enterprise_ne: ObjectId
  _id_gt: ObjectId
  _id_exists: Boolean
  enterprise: ObjectId
  owner: CatalogOwnerQueryInput
  enterprise_lt: ObjectId
  AND: [CatalogQueryInput!]
  _id: ObjectId
  enterprise_gt: ObjectId
  OR: [CatalogQueryInput!]
  _id_lt: ObjectId
}

input TourDraftDurationQueryInput {
  value: Float
  value_ne: Float
  value_lte: Float
  value_nin: [Float]
  value_gte: Float
  OR: [TourDraftDurationQueryInput!]
  unit_exists: Boolean
  AND: [TourDraftDurationQueryInput!]
  unit: TourDraftDurationUnitQueryInput
  value_lt: Float
  value_exists: Boolean
  value_gt: Float
  value_in: [Float]
}

type TransactionChannel {
  _id: ObjectId
  direction: String
  externalTarget: TransactionChannelExternalTarget
  filter: TransactionChannelFilter
  internalTarget: TransactionChannelInternalTarget
  resource: String
  role: String
}

input TourLegDurationUnitInsertInput {
  symbol: String
}

input ProductWeightUnitInsertInput {
  code: String
}

input TransactionChannelExternalTargetMarketplaceInsertInput {
  key: String
}

input TransactionChannelInternalTargetInsertInput {
  workspace: TransactionChannelInternalTargetWorkspaceRelationInput
}

type ProductIngredientListQuantity {
  percentage: Int
}

type TourStopTaskDurationUnit {
  symbol: String
}

input ProductProducerWorkspaceRelationInput {
  link: ObjectId
  create: WorkspaceInsertInput
}

input ProductIngredientListIngredientUpdateInput {
  name: String
  name_unset: Boolean
}

type TourStopTaskDuration {
  unit: TourStopTaskDurationUnit
  value: Float
}

enum TourDraftSortByInput {
  _ID_ASC
  _ID_DESC
  TOUR_ASC
  TOUR_DESC
  VEHICLE_ASC
  VEHICLE_DESC
}

type TourLegPayload {
  shipments: [ObjectId]
  volume: TourLegPayloadVolume
  weight: TourLegPayloadWeight
}

input TourStopInsertInput {
  estimatedTimeOfDeparture: DateTime
  estimatedTimeOfArrival: DateTime
  geo: TourStopGeoInsertInput
  tasks: [TourStopTaskInsertInput]
  actualTimeOfArrival: DateTime
  delivery: TourStopDeliveryInsertInput
  order: Int
  duration: TourStopDurationInsertInput
  place: ObjectId
  actualTimeOfDeparture: DateTime
  name: String
  pickup: TourStopPickupInsertInput
}

input TourLegDistanceQueryInput {
  value_ne: Float
  value_lt: Float
  AND: [TourLegDistanceQueryInput!]
  OR: [TourLegDistanceQueryInput!]
  unit: TourLegDistanceUnitQueryInput
  value_gte: Float
  value_nin: [Float]
  value_exists: Boolean
  unit_exists: Boolean
  value: Float
  value_lte: Float
  value_gt: Float
  value_in: [Float]
}

input VehicleCompartmentCapacityQueryInput {
  weight: VehicleCompartmentCapacityWeightQueryInput
  weight_exists: Boolean
  AND: [VehicleCompartmentCapacityQueryInput!]
  OR: [VehicleCompartmentCapacityQueryInput!]
  volume: VehicleCompartmentCapacityVolumeQueryInput
  volume_exists: Boolean
}

input TourLegDistanceInsertInput {
  unit: TourLegDistanceUnitInsertInput
  value: Float
}

input TourStopGeoInsertInput {
  coordinates: [Float]
  type: String
}

input VehicleWeightUpdateInput {
  value_inc: Float
  value_unset: Boolean
  unit: VehicleWeightUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

input VehicleCapacityVolumeUpdateInput {
  value_unset: Boolean
  value_inc: Float
  unit: VehicleCapacityVolumeUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

input PlaceAddressCountryUpdateInput {
  code_unset: Boolean
  ids: [String]
  ids_unset: Boolean
  name: String
  name_unset: Boolean
  code: String
}

input OrderBrokerQueryInput {
  name_gte: String
  name_exists: Boolean
  marketplace_gte: ObjectId
  workspace_exists: Boolean
  marketplace_lte: ObjectId
  name_lte: String
  marketplace_ne: ObjectId
  workspace: WorkspaceQueryInput
  name_nin: [String]
  marketplace_lt: ObjectId
  name_ne: String
  OR: [OrderBrokerQueryInput!]
  AND: [OrderBrokerQueryInput!]
  marketplace_exists: Boolean
  name_lt: String
  marketplace: ObjectId
  marketplace_in: [ObjectId]
  name_in: [String]
  name_gt: String
  name: String
  marketplace_gt: ObjectId
  marketplace_nin: [ObjectId]
}

input OrderBrokerUpdateInput {
  marketplace_unset: Boolean
  name: String
  name_unset: Boolean
  workspace: OrderBrokerWorkspaceRelationInput
  workspace_unset: Boolean
  marketplace: ObjectId
}

input OfferUpdateInput {
  _id_unset: Boolean
  price: OfferPriceUpdateInput
  price_unset: Boolean
  _id: ObjectId
}

type TourLegPayloadVolume {
  unit: TourLegPayloadVolumeUnit
  value: Float
}

input CodeListQueryInput {
  key: String
  items: [CodeQueryInput]
  _id_in: [ObjectId]
  AND: [CodeListQueryInput!]
  _id_exists: Boolean
  ids: [String]
  _id_nin: [ObjectId]
  _id_gt: ObjectId
  name_gte: String
  _id_gte: ObjectId
  key_exists: Boolean
  _id_lt: ObjectId
  _id_lte: ObjectId
  key_nin: [String]
  key_gt: String
  name: String
  key_ne: String
  _id: ObjectId
  key_gte: String
  items_in: [CodeQueryInput]
  name_lte: String
  name_ne: String
  ids_nin: [String]
  ids_exists: Boolean
  key_lt: String
  name_nin: [String]
  _id_ne: ObjectId
  key_lte: String
  ids_in: [String]
  name_lt: String
  key_in: [String]
  name_gt: String
  OR: [CodeListQueryInput!]
  items_nin: [CodeQueryInput]
  items_exists: Boolean
  name_exists: Boolean
  name_in: [String]
}

input OrderShippingAddressQueryInput {
  name_lte: String
  geo: OrderShippingAddressGeoQueryInput
  place: PlaceQueryInput
  phone_nin: [String]
  street_gt: String
  postalCode_nin: [String]
  phone_lt: String
  postalCode_lte: String
  name_nin: [String]
  locality_nin: [String]
  postalCode_in: [String]
  postalCode: String
  postalCode_gte: String
  postalCode_exists: Boolean
  geo_exists: Boolean
  locality_gte: String
  locality_lt: String
  name_lt: String
  street_lte: String
  street_exists: Boolean
  street_gte: String
  street_lt: String
  name_gt: String
  phone_ne: String
  locality_exists: Boolean
  country: OrderShippingAddressCountryQueryInput
  locality_in: [String]
  street_ne: String
  name_exists: Boolean
  country_exists: Boolean
  phone_in: [String]
  name_ne: String
  name_gte: String
  postalCode_gt: String
  postalCode_lt: String
  name: String
  postalCode_ne: String
  locality: String
  phone_lte: String
  OR: [OrderShippingAddressQueryInput!]
  locality_gt: String
  street_in: [String]
  name_in: [String]
  AND: [OrderShippingAddressQueryInput!]
  street_nin: [String]
  locality_ne: String
  locality_lte: String
  street: String
  phone_gt: String
  phone_gte: String
  phone: String
  place_exists: Boolean
  phone_exists: Boolean
}

input TourDraftStopDeliveryQueryInput {
  OR: [TourDraftStopDeliveryQueryInput!]
  shipments: [ObjectId]
  shipments_in: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  AND: [TourDraftStopDeliveryQueryInput!]
}

type OrderBroker {
  marketplace: ObjectId
  name: String
  workspace: Workspace
}

type TourStopDurationUnit {
  symbol: String
}

input CatalogItemWeightUnitInsertInput {
  code: String
}

input WorkspaceAddressCountryQueryInput {
  name_in: [String]
  OR: [WorkspaceAddressCountryQueryInput!]
  name: String
  name_lt: String
  name_ne: String
  name_gt: String
  name_gte: String
  name_nin: [String]
  name_lte: String
  name_exists: Boolean
  AND: [WorkspaceAddressCountryQueryInput!]
}

type VehicleCompartmentCapacityWeight {
  unit: VehicleCompartmentCapacityWeightUnit
  value: Float
}

type TransactionChannelExternalTarget {
  enterprise: TransactionChannelExternalTargetEnterprise
  marketplace: TransactionChannelExternalTargetMarketplace
  platform: TransactionChannelExternalTargetPlatform
}

enum OfferSortByInput {
  _ID_ASC
  _ID_DESC
}

input AreaQueryInput {
  withinAreas_in: [ObjectId]
  _id_lte: ObjectId
  _id_exists: Boolean
  name_nin: [String]
  name_ne: String
  _id_nin: [ObjectId]
  code_exists: Boolean
  code: String
  code_ne: String
  withinAreas_exists: Boolean
  name_exists: Boolean
  code_gt: String
  name_in: [String]
  _id_in: [ObjectId]
  _id_lt: ObjectId
  code_lt: String
  types_nin: [String]
  types: [String]
  name_lt: String
  code_gte: String
  _id_gt: ObjectId
  AND: [AreaQueryInput!]
  _id_gte: ObjectId
  OR: [AreaQueryInput!]
  code_in: [String]
  types_exists: Boolean
  name_gt: String
  _id: ObjectId
  code_lte: String
  code_nin: [String]
  name_gte: String
  withinAreas_nin: [ObjectId]
  _id_ne: ObjectId
  name_lte: String
  types_in: [String]
  withinAreas: [ObjectId]
  name: String
}

input ProductInsertInput {
  weight: ProductWeightInsertInput
  producer: ProductProducerInsertInput
  _id: ObjectId
  images: [ProductImageInsertInput]
  createdAt: DateTime
  nutrientList: [ProductNutrientListInsertInput]
  allergenList: [ProductAllergenListInsertInput]
  owner: ProductOwnerInsertInput
  publishedAt: DateTime
  group: ProductGroupRelationInput
  categories: ProductCategoriesRelationInput
  ids: [String]
  sku: String
  gtin: String
  ingredientList: [ProductIngredientListInsertInput]
  netWeight: ProductNetWeightInsertInput
  countryOfOrigin: ProductCountryOfOriginRelationInput
  name: String
  brand: ProductBrandInsertInput
}

input ProductWeightInsertInput {
  unit: ProductWeightUnitInsertInput
  value: Float
}

input ProductOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input TransactionChannelInternalTargetUpdateInput {
  workspace: TransactionChannelInternalTargetWorkspaceRelationInput
  workspace_unset: Boolean
}

input TourStopGeoQueryInput {
  type_gt: String
  type: String
  coordinates_exists: Boolean
  type_lte: String
  type_in: [String]
  OR: [TourStopGeoQueryInput!]
  type_lt: String
  AND: [TourStopGeoQueryInput!]
  coordinates_nin: [Float]
  type_nin: [String]
  type_ne: String
  type_exists: Boolean
  coordinates: [Float]
  type_gte: String
  coordinates_in: [Float]
}

type OrderLinePrice {
  currency: OrderLinePriceCurrency
  value: Float
}

input WorkspaceAddressInsertInput {
  street: String
  country: WorkspaceAddressCountryInsertInput
  locality: String
  postalCode: String
}

input VehicleBrandUpdateInput {
  name_unset: Boolean
  name: String
}

input VehicleCapacityVolumeUnitUpdateInput {
  symbol_unset: Boolean
  symbol: String
}

input ShippingMethodPickupUpdateInput {
  points_unset: Boolean
  points: [ShippingMethodPickupPointUpdateInput]
}

type ProductWeight {
  unit: ProductWeightUnit
  value: Float
}

input VehicleCompartmentCapacityWeightUnitInsertInput {
  symbol: String
}

input TourDraftDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input CodeListUpdateInput {
  _id: ObjectId
  ids_unset: Boolean
  items: CodeListItemsRelationInput
  items_unset: Boolean
  name: String
  name_unset: Boolean
  ids: [String]
  key: String
  key_unset: Boolean
  _id_unset: Boolean
}

input OrderShippingAddressUpdateInput {
  geo_unset: Boolean
  phone_unset: Boolean
  street_unset: Boolean
  country: OrderShippingAddressCountryUpdateInput
  country_unset: Boolean
  name: String
  place: OrderShippingAddressPlaceRelationInput
  locality: String
  phone: String
  postalCode_unset: Boolean
  postalCode: String
  name_unset: Boolean
  locality_unset: Boolean
  place_unset: Boolean
  geo: OrderShippingAddressGeoUpdateInput
  street: String
}

input OrderLineItemUpdateInput {
  _id: ObjectId
  _id_unset: Boolean
}

input ShippingMethodPickupQueryInput {
  points_nin: [ShippingMethodPickupPointQueryInput]
  points_exists: Boolean
  AND: [ShippingMethodPickupQueryInput!]
  OR: [ShippingMethodPickupQueryInput!]
  points: [ShippingMethodPickupPointQueryInput]
  points_in: [ShippingMethodPickupPointQueryInput]
}

input OrderLineQuantityQueryInput {
  value: Int
  unit: OrderLineQuantityUnitQueryInput
  value_ne: Int
  value_in: [Int]
  AND: [OrderLineQuantityQueryInput!]
  unit_exists: Boolean
  value_lte: Int
  OR: [OrderLineQuantityQueryInput!]
  value_gt: Int
  value_gte: Int
  value_lt: Int
  value_nin: [Int]
  value_exists: Boolean
}

type InventoryItemQuantityUnit {
  code: String
}

input OrderInsertInput {
  url: String
  shippingAddress: OrderShippingAddressInsertInput
  confirmed: Boolean
  date: DateTime
  shippingMethod: OrderShippingMethodRelationInput
  lines: [OrderLineInsertInput]
  buyer: OrderBuyerInsertInput
  number: String
  seller: OrderSellerInsertInput
  _id: ObjectId
  broker: OrderBrokerInsertInput
}

input TransactionChannelUpdateInput {
  filter_unset: Boolean
  resource_unset: Boolean
  role_unset: Boolean
  internalTarget_unset: Boolean
  direction_unset: Boolean
  _id: ObjectId
  direction: String
  internalTarget: TransactionChannelInternalTargetUpdateInput
  externalTarget: TransactionChannelExternalTargetUpdateInput
  externalTarget_unset: Boolean
  filter: TransactionChannelFilterUpdateInput
  role: String
  resource: String
  _id_unset: Boolean
}

input ShippingMethodOwnerUpdateInput {
  workspace: ShippingMethodOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

type PlaceAddress {
  country: PlaceAddressCountry
  locality: String
  postalCode: String
  street: String
}

type ProductWeightUnit {
  code: String
}

input VehicleCostDriverUnitQueryInput {
  symbol_lt: String
  OR: [VehicleCostDriverUnitQueryInput!]
  symbol_in: [String]
  symbol_ne: String
  symbol_gte: String
  AND: [VehicleCostDriverUnitQueryInput!]
  symbol_exists: Boolean
  symbol_gt: String
  symbol_lte: String
  symbol: String
  symbol_nin: [String]
}

input VehicleCapacityQueryInput {
  weight: VehicleCapacityWeightQueryInput
  weight_exists: Boolean
  AND: [VehicleCapacityQueryInput!]
  OR: [VehicleCapacityQueryInput!]
  volume: VehicleCapacityVolumeQueryInput
  volume_exists: Boolean
}

type VehicleModel {
  date: DateTime
  name: String
}

input OfferPriceQueryInput {
  value_lt: Float
  value_exists: Boolean
  value_nin: [Float]
  currency: OfferPriceCurrencyQueryInput
  value_lte: Float
  value_in: [Float]
  currency_exists: Boolean
  value: Float
  value_ne: Float
  AND: [OfferPriceQueryInput!]
  value_gte: Float
  value_gt: Float
  OR: [OfferPriceQueryInput!]
}

input ProductCategoryClassificationRelationInput {
  create: ProductClassificationInsertInput
  link: ObjectId
}

input TourDraftDistanceUnitInsertInput {
  symbol: String
}

type Catalog {
  _id: ObjectId
  enterprise: ObjectId
  owner: CatalogOwner
}

input TourDraftStopGeoUpdateInput {
  coordinates: [Float]
  coordinates_unset: Boolean
  type: String
  type_unset: Boolean
}

type VehicleCompartment {
  capacity: VehicleCompartmentCapacity
  features: [VehicleCompartmentFeature]
  name: String
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

input VehicleCompartmentCapacityWeightUpdateInput {
  unit: VehicleCompartmentCapacityWeightUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input ShipmentPickupPlaceRelationInput {
  create: PlaceInsertInput
  link: ObjectId
}

type VehicleCostResourceUnit {
  symbol: String
}

type TourDraftStop {
  delivery: TourDraftStopDelivery
  duration: TourDraftStopDuration
  estimatedTimeOfArrival: DateTime
  estimatedTimeOfDeparture: DateTime
  geo: TourDraftStopGeo
  name: String
  order: Int
  pickup: TourDraftStopPickup
  place: ObjectId
}

type OfferPriceCurrency {
  code: String
}

input ProductWeightUpdateInput {
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: ProductWeightUnitUpdateInput
}

input TourLegDistanceUpdateInput {
  unit: TourLegDistanceUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input TourStopDurationUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input ProductImageQueryInput {
  AND: [ProductImageQueryInput!]
  OR: [ProductImageQueryInput!]
  url_gte: String
  url_in: [String]
  url_nin: [String]
  url: String
  url_lte: String
  url_lt: String
  url_ne: String
  url_exists: Boolean
  url_gt: String
}

input CatalogItemQueryInput {
  name_lt: String
  sku: String
  inventoryItems_exists: Boolean
  createdAt: DateTime
  name_lte: String
  createdAt_lt: DateTime
  ids_nin: [String]
  _id_nin: [ObjectId]
  createdAt_lte: DateTime
  weight: CatalogItemWeightQueryInput
  _id_gt: ObjectId
  _id_in: [ObjectId]
  ids_in: [String]
  AND: [CatalogItemQueryInput!]
  sku_gt: String
  name_in: [String]
  name: String
  _id_exists: Boolean
  _id_lt: ObjectId
  product: ProductQueryInput
  createdAt_in: [DateTime]
  _id_lte: ObjectId
  inventoryItems_nin: [InventoryItemQueryInput]
  name_gt: String
  offers: [OfferQueryInput]
  _id_ne: ObjectId
  createdAt_exists: Boolean
  inventoryItems: [InventoryItemQueryInput]
  name_ne: String
  categories: [ObjectId]
  _id: ObjectId
  createdAt_gte: DateTime
  createdAt_ne: DateTime
  product_exists: Boolean
  inventoryItems_in: [InventoryItemQueryInput]
  name_nin: [String]
  offers_in: [OfferQueryInput]
  OR: [CatalogItemQueryInput!]
  weight_exists: Boolean
  sku_nin: [String]
  categories_exists: Boolean
  name_gte: String
  createdAt_nin: [DateTime]
  name_exists: Boolean
  ids_exists: Boolean
  catalog: CatalogQueryInput
  sku_ne: String
  createdAt_gt: DateTime
  sku_exists: Boolean
  offers_exists: Boolean
  owner: CatalogItemOwnerQueryInput
  sku_in: [String]
  owner_exists: Boolean
  catalog_exists: Boolean
  sku_gte: String
  offers_nin: [OfferQueryInput]
  sku_lte: String
  categories_nin: [ObjectId]
  ids: [String]
  sku_lt: String
  categories_in: [ObjectId]
  _id_gte: ObjectId
}

input VehicleCostInsertInput {
  value: Float
  driver: VehicleCostDriverInsertInput
  resource: VehicleCostResourceInsertInput
  unit: VehicleCostUnitInsertInput
}

input VehicleUpdateInput {
  model: VehicleModelUpdateInput
  brand: VehicleBrandUpdateInput
  brand_unset: Boolean
  compartments: [VehicleCompartmentUpdateInput]
  compartments_unset: Boolean
  capacity: VehicleCapacityUpdateInput
  _id: ObjectId
  features_unset: Boolean
  capacity_unset: Boolean
  name: String
  owner: VehicleOwnerUpdateInput
  model_unset: Boolean
  type_unset: Boolean
  owner_unset: Boolean
  weight: VehicleWeightUpdateInput
  weight_unset: Boolean
  name_unset: Boolean
  costs: [VehicleCostUpdateInput]
  costs_unset: Boolean
  type: String
  _id_unset: Boolean
  features: [VehicleFeatureUpdateInput]
}

input TourDistanceUnitQueryInput {
  symbol_gt: String
  symbol_lte: String
  symbol_exists: Boolean
  symbol_ne: String
  symbol_gte: String
  symbol_lt: String
  symbol_nin: [String]
  AND: [TourDistanceUnitQueryInput!]
  symbol: String
  symbol_in: [String]
  OR: [TourDistanceUnitQueryInput!]
}

input WorkspaceEnterpriseQueryInput {
  vatId_nin: [String]
  vatId_lt: String
  vatId_lte: String
  name_lte: String
  vatId: String
  ids_in: [String]
  OR: [WorkspaceEnterpriseQueryInput!]
  ids: [String]
  vatId_ne: String
  ids_exists: Boolean
  name: String
  name_gte: String
  name_nin: [String]
  ids_nin: [String]
  name_lt: String
  vatId_gt: String
  vatId_gte: String
  name_exists: Boolean
  name_in: [String]
  name_gt: String
  vatId_in: [String]
  vatId_exists: Boolean
  AND: [WorkspaceEnterpriseQueryInput!]
  name_ne: String
}

input TourDraftQueryInput {
  shipments: [ShipmentQueryInput]
  _id_gte: ObjectId
  AND: [TourDraftQueryInput!]
  optimisation_exists: Boolean
  stops: [TourDraftStopQueryInput]
  shipments_exists: Boolean
  distance_exists: Boolean
  owner_exists: Boolean
  duration: TourDraftDurationQueryInput
  _id_ne: ObjectId
  validation_exists: Boolean
  _id_nin: [ObjectId]
  tour: TourQueryInput
  _id_exists: Boolean
  distance: TourDraftDistanceQueryInput
  shipments_in: [ShipmentQueryInput]
  tour_exists: Boolean
  OR: [TourDraftQueryInput!]
  stops_nin: [TourDraftStopQueryInput]
  owner: TourDraftOwnerQueryInput
  vehicle: VehicleQueryInput
  optimisation: TourDraftOptimisationQueryInput
  shipments_nin: [ShipmentQueryInput]
  _id_lt: ObjectId
  stops_in: [TourDraftStopQueryInput]
  _id: ObjectId
  _id_in: [ObjectId]
  _id_lte: ObjectId
  _id_gt: ObjectId
  duration_exists: Boolean
  stops_exists: Boolean
  validation: TourDraftValidationQueryInput
  vehicle_exists: Boolean
}

input TourStopTaskQueryInput {
  name: String
  shipments_exists: Boolean
  name_exists: Boolean
  name_lt: String
  AND: [TourStopTaskQueryInput!]
  shipments: [ObjectId]
  name_gt: String
  duration_exists: Boolean
  name_in: [String]
  OR: [TourStopTaskQueryInput!]
  duration: TourStopTaskDurationQueryInput
  name_ne: String
  shipments_nin: [ObjectId]
  name_nin: [String]
  name_gte: String
  name_lte: String
  shipments_in: [ObjectId]
}

input TourStopDurationInsertInput {
  unit: TourStopDurationUnitInsertInput
  value: Float
}

input ProductGroupRelationInput {
  link: ObjectId
  create: ProductGroupInsertInput
}

input WorkspaceAddressQueryInput {
  postalCode: String
  postalCode_nin: [String]
  postalCode_lt: String
  postalCode_lte: String
  OR: [WorkspaceAddressQueryInput!]
  locality_in: [String]
  street_in: [String]
  postalCode_ne: String
  AND: [WorkspaceAddressQueryInput!]
  postalCode_gt: String
  country_exists: Boolean
  street_gte: String
  postalCode_exists: Boolean
  locality_lte: String
  street: String
  locality_gte: String
  locality_ne: String
  postalCode_in: [String]
  country: WorkspaceAddressCountryQueryInput
  street_lt: String
  postalCode_gte: String
  locality: String
  street_lte: String
  street_exists: Boolean
  locality_lt: String
  locality_gt: String
  street_gt: String
  street_nin: [String]
  locality_nin: [String]
  locality_exists: Boolean
  street_ne: String
}

input TourLegOriginQueryInput {
  AND: [TourLegOriginQueryInput!]
  place: ObjectId
  place_nin: [ObjectId]
  place_exists: Boolean
  place_gte: ObjectId
  place_gt: ObjectId
  place_lt: ObjectId
  OR: [TourLegOriginQueryInput!]
  place_in: [ObjectId]
  place_lte: ObjectId
  place_ne: ObjectId
}

input OrderLineProductQueryInput {
  _id_exists: Boolean
  _id_ne: ObjectId
  _id: ObjectId
  _id_lte: ObjectId
  _id_in: [ObjectId]
  _id_nin: [ObjectId]
  AND: [OrderLineProductQueryInput!]
  OR: [OrderLineProductQueryInput!]
  _id_gt: ObjectId
  _id_lt: ObjectId
  _id_gte: ObjectId
}

type TourDraftStopGeo {
  coordinates: [Float]
  type: String
}

input ShipmentDeliveryInsertInput {
  country: ShipmentDeliveryCountryInsertInput
  locality: String
  name: String
  phone: String
  place: ShipmentDeliveryPlaceRelationInput
  postalCode: String
  street: String
}

input TourDraftVehicleRelationInput {
  create: VehicleInsertInput
  link: ObjectId
}

input WorkspaceUpdateInput {
  address: WorkspaceAddressUpdateInput
  ids: [String]
  key_unset: Boolean
  enterprise: WorkspaceEnterpriseUpdateInput
  geo_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  marketplace_unset: Boolean
  name: String
  marketplace: WorkspaceMarketplaceUpdateInput
  name_unset: Boolean
  key: String
  place: WorkspacePlaceRelationInput
  enterprise_unset: Boolean
  person: ObjectId
  place_unset: Boolean
  type_unset: Boolean
  ids_unset: Boolean
  type: String
  person_unset: Boolean
  address_unset: Boolean
  geo: WorkspaceGeoUpdateInput
}

type ProductOwner {
  place: Place
  workspace: Workspace
}

input WorkspaceInsertInput {
  enterprise: WorkspaceEnterpriseInsertInput
  place: WorkspacePlaceRelationInput
  geo: WorkspaceGeoInsertInput
  key: String
  ids: [String]
  marketplace: WorkspaceMarketplaceInsertInput
  name: String
  type: String
  _id: ObjectId
  person: ObjectId
  address: WorkspaceAddressInsertInput
}

input WorkspacePlaceRelationInput {
  create: PlaceInsertInput
  link: ObjectId
}

input TourDistanceInsertInput {
  value: Float
  unit: TourDistanceUnitInsertInput
}

input ProductProducerInsertInput {
  workspace: ProductProducerWorkspaceRelationInput
}

input TourDurationUnitQueryInput {
  AND: [TourDurationUnitQueryInput!]
  symbol: String
  symbol_gt: String
  symbol_ne: String
  symbol_lte: String
  OR: [TourDurationUnitQueryInput!]
  symbol_exists: Boolean
  symbol_in: [String]
  symbol_nin: [String]
  symbol_lt: String
  symbol_gte: String
}

type TransactionChannelExternalTargetEnterprise {
  id: String
}

input VehicleCostUnitInsertInput {
  symbol: String
}

input CatalogItemWeightUnitUpdateInput {
  code: String
  code_unset: Boolean
}

input TransactionChannelExternalTargetPlatformQueryInput {
  OR: [TransactionChannelExternalTargetPlatformQueryInput!]
  key: String
  key_lte: String
  key_in: [String]
  key_gt: String
  key_lt: String
  key_gte: String
  key_nin: [String]
  key_exists: Boolean
  key_ne: String
  AND: [TransactionChannelExternalTargetPlatformQueryInput!]
}

type Code {
  _id: ObjectId
  key: String
  list: CodeList
  name: String
  sequence: String
  symbol: String
}

type TourDraftOwner {
  workspace: Workspace
}

input InventoryItemQuantityUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: InventoryItemQuantityUnitUpdateInput
  unit_unset: Boolean
}

input ProductAllergenListInsertInput {
  quantity: ProductAllergenListQuantityInsertInput
  allergen: ObjectId
}

input ProductIngredientListQuantityInsertInput {
  percentage: Int
}

type ProductBrand {
  name: String
}

type ShippingMethod {
  _id: ObjectId
  description: String
  ids: [String]
  name: String
  owner: ShippingMethodOwner
  pickup: ShippingMethodPickup
  type: String
}

type OrderLine {
  gtin: String
  item: OrderLineItem
  name: String
  price: OrderLinePrice
  product: OrderLineProduct
  product1: ObjectId
  quantity: OrderLineQuantity
  sku: String
}

type InventoryItemQuantity {
  unit: InventoryItemQuantityUnit
  value: Float
}

input VehicleCompartmentFeatureUpdateInput {
  name: String
  name_unset: Boolean
  key: String
  key_unset: Boolean
}

input OrderLineQuantityUnitQueryInput {
  code_nin: [String]
  code_ne: String
  code_gte: String
  text_lte: String
  code_lte: String
  text: String
  code_gt: String
  symbol_ne: String
  text_nin: [String]
  symbol_gt: String
  text_gt: String
  code: String
  code_lt: String
  text_gte: String
  symbol_exists: Boolean
  text_lt: String
  code_in: [String]
  symbol_gte: String
  text_in: [String]
  text_ne: String
  AND: [OrderLineQuantityUnitQueryInput!]
  symbol: String
  code_exists: Boolean
  symbol_lte: String
  symbol_lt: String
  OR: [OrderLineQuantityUnitQueryInput!]
  text_exists: Boolean
  symbol_in: [String]
  symbol_nin: [String]
}

input TourOwnerQueryInput {
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [TourOwnerQueryInput!]
  OR: [TourOwnerQueryInput!]
}

type OrderLineItem {
  _id: ObjectId
}

input ProductClassificationInsertInput {
  _id: ObjectId
  key: String
  name: String
}

input WorkspaceAddressCountryUpdateInput {
  name: String
  name_unset: Boolean
}

input TourLegDistanceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type PlaceAddressCountry {
  code: String
  ids: [String]
  name: String
}

type VehicleCompartmentCapacityVolumeUnit {
  symbol: String
}

input InventoryItemQuantityUnitInsertInput {
  code: String
}

input TransactionChannelInsertInput {
  resource: String
  role: String
  _id: ObjectId
  direction: String
  externalTarget: TransactionChannelExternalTargetInsertInput
  filter: TransactionChannelFilterInsertInput
  internalTarget: TransactionChannelInternalTargetInsertInput
}

input TourUpdateInput {
  owner: TourOwnerUpdateInput
  date_unset: Boolean
  duration: TourDurationUpdateInput
  legs_unset: Boolean
  vehicle: TourVehicleRelationInput
  _id: ObjectId
  shipments_unset: Boolean
  owner_unset: Boolean
  duration_unset: Boolean
  name: String
  vehicle_unset: Boolean
  date: DateTime
  distance: TourDistanceUpdateInput
  name_unset: Boolean
  legs: [TourLegUpdateInput]
  stops: [TourStopUpdateInput]
  stops_unset: Boolean
  _id_unset: Boolean
  distance_unset: Boolean
  shipments: TourShipmentsRelationInput
}

input OrderSellerQueryInput {
  name_lte: String
  name_nin: [String]
  workspace: WorkspaceQueryInput
  AND: [OrderSellerQueryInput!]
  name_ne: String
  name_in: [String]
  workspace_exists: Boolean
  name_lt: String
  name: String
  name_gte: String
  name_exists: Boolean
  name_gt: String
  OR: [OrderSellerQueryInput!]
}

type ShipmentDelivery {
  country: ShipmentDeliveryCountry
  locality: String
  name: String
  phone: String
  place: Place
  postalCode: String
  street: String
}

type VehicleCompartmentCapacityWeightUnit {
  symbol: String
}

input TourStopDeliveryQueryInput {
  shipments: [ObjectId]
  shipments_in: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  AND: [TourStopDeliveryQueryInput!]
  OR: [TourStopDeliveryQueryInput!]
}

input ProductAllergenListQuantityQueryInput {
  AND: [ProductAllergenListQuantityQueryInput!]
  level_gte: ObjectId
  level_in: [ObjectId]
  OR: [ProductAllergenListQuantityQueryInput!]
  level: ObjectId
  level_lte: ObjectId
  level_nin: [ObjectId]
  level_ne: ObjectId
  level_gt: ObjectId
  level_lt: ObjectId
  level_exists: Boolean
}

type TourLegPayloadWeightUnit {
  symbol: String
}

input TourDraftDistanceUpdateInput {
  unit: TourDraftDistanceUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
  value_unset: Boolean
}

input TourDraftDistanceUnitUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

input ShipmentDeliveryPlaceRelationInput {
  link: ObjectId
  create: PlaceInsertInput
}

input VehicleOwnerInsertInput {
  workspace: VehicleOwnerWorkspaceRelationInput
}

input VehicleCostResourceCurrencyUpdateInput {
  symbol: String
  symbol_unset: Boolean
}

type CatalogOwner {
  workspace: Workspace
}

input PlaceAddressUpdateInput {
  postalCode: String
  postalCode_unset: Boolean
  street: String
  street_unset: Boolean
  country: PlaceAddressCountryUpdateInput
  country_unset: Boolean
  locality: String
  locality_unset: Boolean
}

input TourStopPickupQueryInput {
  AND: [TourStopPickupQueryInput!]
  shipments: [ObjectId]
  shipments_nin: [ObjectId]
  shipments_exists: Boolean
  shipments_in: [ObjectId]
  OR: [TourStopPickupQueryInput!]
}

type TourDraft {
  _id: ObjectId
  distance: TourDraftDistance
  duration: TourDraftDuration
  optimisation: TourDraftOptimisation
  owner: TourDraftOwner
  shipments: [Shipment]
  stops: [TourDraftStop]
  tour: Tour
  validation: TourDraftValidation
  vehicle: Vehicle
}

input PlaceAddressInsertInput {
  country: PlaceAddressCountryInsertInput
  locality: String
  postalCode: String
  street: String
}

input ProductOwnerPlaceRelationInput {
  create: PlaceInsertInput
  link: ObjectId
}

input ProductIngredientListQuantityQueryInput {
  percentage_ne: Int
  percentage_lt: Int
  percentage_lte: Int
  percentage_exists: Boolean
  OR: [ProductIngredientListQuantityQueryInput!]
  percentage: Int
  percentage_gte: Int
  percentage_in: [Int]
  percentage_nin: [Int]
  percentage_gt: Int
  AND: [ProductIngredientListQuantityQueryInput!]
}

input ShipmentLineQuantityInsertInput {
  value: Int
}

input TourOwnerUpdateInput {
  workspace: TourOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

input ProductWeightQueryInput {
  OR: [ProductWeightQueryInput!]
  value_gte: Float
  value_lt: Float
  value_ne: Float
  value: Float
  value_lte: Float
  unit_exists: Boolean
  value_nin: [Float]
  value_exists: Boolean
  AND: [ProductWeightQueryInput!]
  unit: ProductWeightUnitQueryInput
  value_gt: Float
  value_in: [Float]
}

input VehicleCapacityWeightUpdateInput {
  value_inc: Float
  value_unset: Boolean
  unit: VehicleCapacityWeightUnitUpdateInput
  unit_unset: Boolean
  value: Float
}

type TransactionChannelExternalTargetPlatform {
  key: String
}

input ProductImageUpdateInput {
  url: String
  url_unset: Boolean
}

input VehicleOwnerUpdateInput {
  workspace: VehicleOwnerWorkspaceRelationInput
  workspace_unset: Boolean
}

input VehicleCostResourceUnitQueryInput {
  symbol_lte: String
  AND: [VehicleCostResourceUnitQueryInput!]
  symbol_gt: String
  symbol_exists: Boolean
  OR: [VehicleCostResourceUnitQueryInput!]
  symbol: String
  symbol_gte: String
  symbol_lt: String
  symbol_ne: String
  symbol_in: [String]
  symbol_nin: [String]
}

input VehicleOwnerQueryInput {
  OR: [VehicleOwnerQueryInput!]
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [VehicleOwnerQueryInput!]
}

input ShipmentInsertInput {
  weight: ShipmentWeightInsertInput
  method: ShipmentMethodRelationInput
  _id: ObjectId
  date: DateTime
  status: String
  delivery: ShipmentDeliveryInsertInput
  lines: [ShipmentLineInsertInput]
  key: String
  order: ShipmentOrderRelationInput
  pickup: ShipmentPickupInsertInput
}

input OrderLineQuantityUnitInsertInput {
  code: String
  symbol: String
  text: String
}

input TourDraftStopDurationUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  unit: TourDraftStopDurationUnitUpdateInput
  unit_unset: Boolean
}

input TransactionChannelExternalTargetMarketplaceUpdateInput {
  key: String
  key_unset: Boolean
}

input ProductWeightUnitUpdateInput {
  code: String
  code_unset: Boolean
}

input CatalogItemOwnerUpdateInput {
  workspace_unset: Boolean
  workspace: CatalogItemOwnerWorkspaceRelationInput
}

type WorkspaceGeo {
  coordinates: [Float]
  type: String
}

type ShipmentLine {
  name: String
  product: ObjectId
  quantity: ShipmentLineQuantity
  weight: ShipmentLineWeight
}

type TourDuration {
  unit: TourDurationUnit
  value: Float
}

input OrderSellerInsertInput {
  name: String
  workspace: OrderSellerWorkspaceRelationInput
}

input OrderQueryInput {
  _id_gte: ObjectId
  date_lt: DateTime
  shippingMethod_exists: Boolean
  broker: OrderBrokerQueryInput
  _id_lte: ObjectId
  url_in: [String]
  number_gte: String
  url_gt: String
  buyer_exists: Boolean
  _id_in: [ObjectId]
  OR: [OrderQueryInput!]
  number: String
  broker_exists: Boolean
  date_gt: DateTime
  shippingAddress_exists: Boolean
  seller: OrderSellerQueryInput
  number_gt: String
  url_gte: String
  shippingMethod: ShippingMethodQueryInput
  date_in: [DateTime]
  url_lte: String
  confirmed_exists: Boolean
  seller_exists: Boolean
  lines_nin: [OrderLineQueryInput]
  url_lt: String
  _id_lt: ObjectId
  buyer: OrderBuyerQueryInput
  AND: [OrderQueryInput!]
  date_ne: DateTime
  _id_nin: [ObjectId]
  number_nin: [String]
  url_exists: Boolean
  number_lt: String
  lines_exists: Boolean
  shippingAddress: OrderShippingAddressQueryInput
  _id: ObjectId
  _id_exists: Boolean
  _id_ne: ObjectId
  _id_gt: ObjectId
  date: DateTime
  lines_in: [OrderLineQueryInput]
  confirmed_ne: Boolean
  number_ne: String
  url_ne: String
  number_lte: String
  date_lte: DateTime
  date_gte: DateTime
  url_nin: [String]
  url: String
  lines: [OrderLineQueryInput]
  number_exists: Boolean
  date_nin: [DateTime]
  confirmed: Boolean
  number_in: [String]
  date_exists: Boolean
}

type TourStopTask {
  duration: TourStopTaskDuration
  name: String
  shipments: [ObjectId]
}

input TourDraftStopPickupUpdateInput {
  shipments_unset: Boolean
  shipments: [ObjectId]
}

input InventoryItemUpdateInput {
  quantity: InventoryItemQuantityUpdateInput
  quantity_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  product: ObjectId
  product_unset: Boolean
}

input ProductAllergenListQuantityUpdateInput {
  level: ObjectId
  level_unset: Boolean
}

input CodeUpdateInput {
  _id: ObjectId
  list_unset: Boolean
  name: String
  symbol: String
  _id_unset: Boolean
  key_unset: Boolean
  sequence: String
  symbol_unset: Boolean
  list: CodeListRelationInput
  name_unset: Boolean
  sequence_unset: Boolean
  key: String
}

type TourDistanceUnit {
  symbol: String
}

enum WorkspaceSortByInput {
  PLACE_ASC
  PLACE_DESC
  TYPE_ASC
  TYPE_DESC
  NAME_ASC
  NAME_DESC
  PERSON_ASC
  PERSON_DESC
  _ID_ASC
  _ID_DESC
  KEY_ASC
  KEY_DESC
}

input AreaInsertInput {
  withinAreas: [ObjectId]
  _id: ObjectId
  code: String
  name: String
  types: [String]
}

input CodeListItemsRelationInput {
  create: [CodeInsertInput]
  link: [ObjectId]
}

input ProductCountryOfOriginRelationInput {
  create: CodeInsertInput
  link: ObjectId
}

input ProductProducerQueryInput {
  workspace: WorkspaceQueryInput
  workspace_exists: Boolean
  AND: [ProductProducerQueryInput!]
  OR: [ProductProducerQueryInput!]
}

input OrderLineItemQueryInput {
  AND: [OrderLineItemQueryInput!]
  OR: [OrderLineItemQueryInput!]
  _id: ObjectId
  _id_exists: Boolean
  _id_gt: ObjectId
  _id_in: [ObjectId]
  _id_ne: ObjectId
  _id_nin: [ObjectId]
  _id_lt: ObjectId
  _id_gte: ObjectId
  _id_lte: ObjectId
}

input TourDraftStopDurationUnitQueryInput {
  AND: [TourDraftStopDurationUnitQueryInput!]
  symbol: String
  OR: [TourDraftStopDurationUnitQueryInput!]
  symbol_exists: Boolean
  symbol_gt: String
  symbol_lt: String
  symbol_in: [String]
  symbol_nin: [String]
  symbol_lte: String
  symbol_ne: String
  symbol_gte: String
}

type TourDistance {
  unit: TourDistanceUnit
  value: Float
}

input OrderLineQuantityInsertInput {
  unit: OrderLineQuantityUnitInsertInput
  value: Int
}

input CodeInsertInput {
  _id: ObjectId
  key: String
  list: CodeListRelationInput
  name: String
  symbol: String
  sequence: String
}

input ProductWeightUnitQueryInput {
  code_gte: String
  OR: [ProductWeightUnitQueryInput!]
  code: String
  code_lt: String
  AND: [ProductWeightUnitQueryInput!]
  code_ne: String
  code_in: [String]
  code_gt: String
  code_lte: String
  code_nin: [String]
  code_exists: Boolean
}

input PlaceGeoQueryInput {
  type_ne: String
  coordinates: [Float]
  type_gte: String
  AND: [PlaceGeoQueryInput!]
  type_lt: String
  type: String
  coordinates_exists: Boolean
  coordinates_nin: [Float]
  type_gt: String
  type_lte: String
  coordinates_in: [Float]
  type_in: [String]
  type_nin: [String]
  type_exists: Boolean
  OR: [PlaceGeoQueryInput!]
}

type CodeList {
  _id: ObjectId
  ids: [String]
  items: [Code]
  key: String
  name: String
}

type Offer {
  _id: ObjectId
  price: OfferPrice
}

input ProductGroupUpdateInput {
  name_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  name: String
}

input TourDraftStopPickupInsertInput {
  shipments: [ObjectId]
}

input CatalogItemOffersRelationInput {
  create: [OfferInsertInput]
  link: [ObjectId]
}

input ProductClassificationUpdateInput {
  name_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  key: String
  key_unset: Boolean
  name: String
}

input PlaceQueryInput {
  gln_nin: [String]
  code_lte: String
  code_ne: String
  gln: String
  code_gte: String
  name_gte: String
  types: [String]
  types_exists: Boolean
  code: String
  ids_exists: Boolean
  _id: ObjectId
  ids: [String]
  code_lt: String
  name_gt: String
  name_in: [String]
  name: String
  withinAreas: [AreaQueryInput]
  code_exists: Boolean
  types_nin: [String]
  types_in: [String]
  address_exists: Boolean
  _id_lt: ObjectId
  _id_gt: ObjectId
  ids_in: [String]
  gln_lt: String
  _id_exists: Boolean
  gln_in: [String]
  OR: [PlaceQueryInput!]
  withinAreas_exists: Boolean
  name_ne: String
  address: PlaceAddressQueryInput
  code_nin: [String]
  geo_exists: Boolean
  AND: [PlaceQueryInput!]
  gln_gte: String
  name_nin: [String]
  name_exists: Boolean
  geo: PlaceGeoQueryInput
  name_lte: String
  _id_nin: [ObjectId]
  gln_ne: String
  _id_lte: ObjectId
  _id_ne: ObjectId
  withinAreas_in: [AreaQueryInput]
  code_in: [String]
  ids_nin: [String]
  code_gt: String
  gln_gt: String
  name_lt: String
  owner_exists: Boolean
  withinAreas_nin: [AreaQueryInput]
  gln_lte: String
  _id_gte: ObjectId
  _id_in: [ObjectId]
  owner: PlaceOwnerQueryInput
  gln_exists: Boolean
}

input TourStopDurationUpdateInput {
  value_unset: Boolean
  unit: TourStopDurationUnitUpdateInput
  unit_unset: Boolean
  value: Float
  value_inc: Float
}

input VehicleCompartmentCapacityVolumeInsertInput {
  value: Float
  unit: VehicleCompartmentCapacityVolumeUnitInsertInput
}

input OrderBrokerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

type TourStopPickup {
  shipments: [ObjectId]
}

input TourLegPayloadInsertInput {
  weight: TourLegPayloadWeightInsertInput
  shipments: [ObjectId]
  volume: TourLegPayloadVolumeInsertInput
}

input WorkspaceMarketplaceUpdateInput {
  key: String
  key_unset: Boolean
}

input VehicleFeatureQueryInput {
  name_lte: String
  name_lt: String
  name_in: [String]
  key_exists: Boolean
  key_gt: String
  key_nin: [String]
  name_gte: String
  name_nin: [String]
  name_gt: String
  key_ne: String
  AND: [VehicleFeatureQueryInput!]
  key_lte: String
  name: String
  OR: [VehicleFeatureQueryInput!]
  key_gte: String
  name_ne: String
  key_lt: String
  key_in: [String]
  name_exists: Boolean
  key: String
}

input VehicleCostQueryInput {
  OR: [VehicleCostQueryInput!]
  unit_exists: Boolean
  resource_exists: Boolean
  value: Float
  unit: VehicleCostUnitQueryInput
  value_lte: Float
  value_gt: Float
  AND: [VehicleCostQueryInput!]
  value_gte: Float
  driver: VehicleCostDriverQueryInput
  value_nin: [Float]
  value_exists: Boolean
  resource: VehicleCostResourceQueryInput
  value_lt: Float
  driver_exists: Boolean
  value_ne: Float
  value_in: [Float]
}

input TourDraftStopDurationQueryInput {
  OR: [TourDraftStopDurationQueryInput!]
  unit_exists: Boolean
  AND: [TourDraftStopDurationQueryInput!]
  value_lte: Float
  value_in: [Float]
  value_ne: Float
  value: Float
  unit: TourDraftStopDurationUnitQueryInput
  value_lt: Float
  value_nin: [Float]
  value_exists: Boolean
  value_gte: Float
  value_gt: Float
}

input ShippingMethodOwnerInsertInput {
  workspace: ShippingMethodOwnerWorkspaceRelationInput
}

input PlaceOwnerInsertInput {
  workspace: PlaceOwnerWorkspaceRelationInput
}

input OrderSellerUpdateInput {
  name: String
  name_unset: Boolean
  workspace: OrderSellerWorkspaceRelationInput
  workspace_unset: Boolean
}

input VehicleQueryInput {
  type_ne: String
  _id_lte: ObjectId
  costs_exists: Boolean
  costs_nin: [VehicleCostQueryInput]
  features_exists: Boolean
  type_in: [String]
  type_exists: Boolean
  features_in: [VehicleFeatureQueryInput]
  name_ne: String
  _id_lt: ObjectId
  type_gt: String
  _id_gt: ObjectId
  owner: VehicleOwnerQueryInput
  _id_exists: Boolean
  name_gt: String
  AND: [VehicleQueryInput!]
  capacity_exists: Boolean
  type_lt: String
  weight: VehicleWeightQueryInput
  compartments_nin: [VehicleCompartmentQueryInput]
  _id: ObjectId
  features_nin: [VehicleFeatureQueryInput]
  name_gte: String
  owner_exists: Boolean
  features: [VehicleFeatureQueryInput]
  costs: [VehicleCostQueryInput]
  _id_gte: ObjectId
  name_in: [String]
  _id_nin: [ObjectId]
  type_lte: String
  model_exists: Boolean
  name_lte: String
  _id_in: [ObjectId]
  type_nin: [String]
  costs_in: [VehicleCostQueryInput]
  name_exists: Boolean
  model: VehicleModelQueryInput
  weight_exists: Boolean
  compartments: [VehicleCompartmentQueryInput]
  name: String
  type_gte: String
  compartments_in: [VehicleCompartmentQueryInput]
  OR: [VehicleQueryInput!]
  capacity: VehicleCapacityQueryInput
  brand_exists: Boolean
  brand: VehicleBrandQueryInput
  name_lt: String
  name_nin: [String]
  _id_ne: ObjectId
  type: String
  compartments_exists: Boolean
}

type ShipmentWeight {
  value: Float
}

type CatalogItemOwner {
  workspace: Workspace
}

input PlaceGeoInsertInput {
  type: String
  coordinates: [Float]
}

input VehicleCompartmentInsertInput {
  features: [VehicleCompartmentFeatureInsertInput]
  name: String
  capacity: VehicleCompartmentCapacityInsertInput
}

input TourStopTaskInsertInput {
  shipments: [ObjectId]
  duration: TourStopTaskDurationInsertInput
  name: String
}

input ShipmentLineQuantityUpdateInput {
  value_inc: Int
  value_unset: Boolean
  value: Int
}

input WorkspaceMarketplaceQueryInput {
  key_lt: String
  key_ne: String
  AND: [WorkspaceMarketplaceQueryInput!]
  key_lte: String
  key_in: [String]
  key_nin: [String]
  OR: [WorkspaceMarketplaceQueryInput!]
  key: String
  key_gt: String
  key_exists: Boolean
  key_gte: String
}

type VehicleCostResource {
  currency: VehicleCostResourceCurrency
  key: String
  type: String
  unit: VehicleCostResourceUnit
}

input CatalogOwnerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input ProductImageInsertInput {
  url: String
}

input CatalogItemProductRelationInput {
  link: ObjectId
  create: ProductInsertInput
}

input TourLegPayloadVolumeUnitQueryInput {
  symbol_exists: Boolean
  symbol: String
  symbol_nin: [String]
  OR: [TourLegPayloadVolumeUnitQueryInput!]
  symbol_in: [String]
  AND: [TourLegPayloadVolumeUnitQueryInput!]
  symbol_gt: String
  symbol_ne: String
  symbol_gte: String
  symbol_lt: String
  symbol_lte: String
}

input ProductIngredientListUpdateInput {
  ingredient: ProductIngredientListIngredientUpdateInput
  ingredient_unset: Boolean
  sequence: String
  sequence_unset: Boolean
  quantity: ProductIngredientListQuantityUpdateInput
  quantity_unset: Boolean
}

input TransactionChannelExternalTargetPlatformInsertInput {
  key: String
}

input TourLegDurationInsertInput {
  value: Float
  unit: TourLegDurationUnitInsertInput
}

input VehicleCompartmentCapacityWeightUnitQueryInput {
  symbol_exists: Boolean
  symbol_gt: String
  symbol: String
  symbol_in: [String]
  AND: [VehicleCompartmentCapacityWeightUnitQueryInput!]
  OR: [VehicleCompartmentCapacityWeightUnitQueryInput!]
  symbol_gte: String
  symbol_nin: [String]
  symbol_ne: String
  symbol_lt: String
  symbol_lte: String
}

input VehicleCostResourceCurrencyQueryInput {
  OR: [VehicleCostResourceCurrencyQueryInput!]
  symbol_ne: String
  symbol_gt: String
  AND: [VehicleCostResourceCurrencyQueryInput!]
  symbol_lt: String
  symbol_lte: String
  symbol_in: [String]
  symbol: String
  symbol_gte: String
  symbol_nin: [String]
  symbol_exists: Boolean
}

input InventoryItemQuantityUnitQueryInput {
  OR: [InventoryItemQuantityUnitQueryInput!]
  code: String
  code_exists: Boolean
  code_gte: String
  code_in: [String]
  AND: [InventoryItemQuantityUnitQueryInput!]
  code_ne: String
  code_gt: String
  code_lt: String
  code_lte: String
  code_nin: [String]
}

enum ShipmentSortByInput {
  DATE_ASC
  DATE_DESC
  KEY_DESC
  STATUS_DESC
  ORDER_ASC
  ORDER_DESC
  _ID_DESC
  KEY_ASC
  STATUS_ASC
  METHOD_ASC
  METHOD_DESC
  _ID_ASC
}

input ShippingMethodPickupInsertInput {
  points: [ShippingMethodPickupPointInsertInput]
}

input VehicleCapacityVolumeInsertInput {
  unit: VehicleCapacityVolumeUnitInsertInput
  value: Float
}

input TourDraftDurationInsertInput {
  unit: TourDraftDurationUnitInsertInput
  value: Float
}

input WorkspaceQueryInput {
  key_lt: String
  name_in: [String]
  name_exists: Boolean
  key_exists: Boolean
  place_exists: Boolean
  address: WorkspaceAddressQueryInput
  person_nin: [ObjectId]
  name_lt: String
  person_lt: ObjectId
  place: PlaceQueryInput
  key_lte: String
  name_lte: String
  _id_lte: ObjectId
  person_in: [ObjectId]
  key: String
  person_exists: Boolean
  _id_gte: ObjectId
  type_exists: Boolean
  marketplace: WorkspaceMarketplaceQueryInput
  type_lte: String
  address_exists: Boolean
  name_gt: String
  person_lte: ObjectId
  _id_exists: Boolean
  type_gt: String
  _id_in: [ObjectId]
  geo_exists: Boolean
  key_gt: String
  name_nin: [String]
  key_gte: String
  ids_nin: [String]
  person: ObjectId
  key_nin: [String]
  person_gte: ObjectId
  _id_nin: [ObjectId]
  type_in: [String]
  type_nin: [String]
  key_ne: String
  ids_in: [String]
  ids: [String]
  _id: ObjectId
  geo: WorkspaceGeoQueryInput
  type_ne: String
  key_in: [String]
  name_ne: String
  OR: [WorkspaceQueryInput!]
  _id_gt: ObjectId
  ids_exists: Boolean
  person_ne: ObjectId
  name: String
  type: String
  type_lt: String
  marketplace_exists: Boolean
  type_gte: String
  _id_lt: ObjectId
  person_gt: ObjectId
  enterprise: WorkspaceEnterpriseQueryInput
  _id_ne: ObjectId
  name_gte: String
  AND: [WorkspaceQueryInput!]
  enterprise_exists: Boolean
}

input AreaUpdateInput {
  _id_unset: Boolean
  code: String
  withinAreas_unset: Boolean
  types: [String]
  types_unset: Boolean
  _id: ObjectId
  name_unset: Boolean
  withinAreas: [ObjectId]
  code_unset: Boolean
  name: String
}

type ShipmentLineQuantity {
  value: Int
}

type VehicleWeightUnit {
  symbol: String
}

input TourLegPayloadWeightUnitInsertInput {
  symbol: String
}

input TourDraftStopDurationInsertInput {
  unit: TourDraftStopDurationUnitInsertInput
  value: Float
}

input ShippingMethodUpdateInput {
  type_unset: Boolean
  description_unset: Boolean
  name: String
  ids_unset: Boolean
  pickup_unset: Boolean
  name_unset: Boolean
  description: String
  owner: ShippingMethodOwnerUpdateInput
  owner_unset: Boolean
  ids: [String]
  pickup: ShippingMethodPickupUpdateInput
  type: String
  _id_unset: Boolean
  _id: ObjectId
}

input PlaceOwnerQueryInput {
  workspace_exists: Boolean
  AND: [PlaceOwnerQueryInput!]
  OR: [PlaceOwnerQueryInput!]
  workspace: WorkspaceQueryInput
}

input PlaceOwnerUpdateInput {
  workspace_unset: Boolean
  workspace: PlaceOwnerWorkspaceRelationInput
}

input OrderShippingAddressCountryUpdateInput {
  code: String
  code_unset: Boolean
  name: String
  name_unset: Boolean
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

input OfferPriceCurrencyUpdateInput {
  code_unset: Boolean
  code: String
}

type VehicleCostResourceCurrency {
  symbol: String
}

input OrderLineQueryInput {
  product1_exists: Boolean
  product1_ne: ObjectId
  name_lt: String
  name: String
  gtin_nin: [String]
  name_exists: Boolean
  price_exists: Boolean
  product1_nin: [ObjectId]
  quantity_exists: Boolean
  name_in: [String]
  sku_lte: String
  name_ne: String
  product: OrderLineProductQueryInput
  gtin: String
  name_lte: String
  sku_exists: Boolean
  product_exists: Boolean
  sku_gt: String
  sku_lt: String
  sku_in: [String]
  gtin_exists: Boolean
  quantity: OrderLineQuantityQueryInput
  name_gt: String
  name_gte: String
  gtin_in: [String]
  price: OrderLinePriceQueryInput
  gtin_ne: String
  gtin_lt: String
  sku_gte: String
  product1_lt: ObjectId
  OR: [OrderLineQueryInput!]
  product1_lte: ObjectId
  AND: [OrderLineQueryInput!]
  product1_gte: ObjectId
  sku_nin: [String]
  product1_gt: ObjectId
  gtin_gte: String
  product1_in: [ObjectId]
  gtin_gt: String
  name_nin: [String]
  sku_ne: String
  product1: ObjectId
  item: OrderLineItemQueryInput
  item_exists: Boolean
  gtin_lte: String
  sku: String
}

input TourDraftDurationUnitQueryInput {
  symbol_exists: Boolean
  symbol_gt: String
  symbol_ne: String
  symbol_lt: String
  symbol_in: [String]
  symbol_lte: String
  AND: [TourDraftDurationUnitQueryInput!]
  OR: [TourDraftDurationUnitQueryInput!]
  symbol: String
  symbol_gte: String
  symbol_nin: [String]
}

type TransactionChannelInternalTarget {
  workspace: Workspace
}

input PlaceOwnerWorkspaceRelationInput {
  link: ObjectId
  create: WorkspaceInsertInput
}

input TourDraftStopGeoInsertInput {
  coordinates: [Float]
  type: String
}

input ShipmentDeliveryUpdateInput {
  country_unset: Boolean
  locality: String
  phone: String
  street_unset: Boolean
  name_unset: Boolean
  place_unset: Boolean
  postalCode_unset: Boolean
  street: String
  phone_unset: Boolean
  locality_unset: Boolean
  country: ShipmentDeliveryCountryUpdateInput
  name: String
  place: ShipmentDeliveryPlaceRelationInput
  postalCode: String
}

input OrderLineQuantityUpdateInput {
  unit_unset: Boolean
  value: Int
  value_inc: Int
  value_unset: Boolean
  unit: OrderLineQuantityUnitUpdateInput
}

type PlaceGeo {
  coordinates: [Float]
  type: String
}

input OfferPriceCurrencyQueryInput {
  code_lte: String
  code_in: [String]
  OR: [OfferPriceCurrencyQueryInput!]
  code: String
  code_ne: String
  code_exists: Boolean
  AND: [OfferPriceCurrencyQueryInput!]
  code_gte: String
  code_gt: String
  code_lt: String
  code_nin: [String]
}

type CatalogItem {
  _id: ObjectId
  catalog: Catalog
  categories: [ObjectId]
  createdAt: DateTime
  ids: [String]
  inventoryItems: [InventoryItem]
  name: String
  offers: [Offer]
  owner: CatalogItemOwner
  product: Product
  sku: String
  weight: CatalogItemWeight
}

input ShipmentPickupInsertInput {
  place: ShipmentPickupPlaceRelationInput
}

input VehicleCompartmentCapacityInsertInput {
  volume: VehicleCompartmentCapacityVolumeInsertInput
  weight: VehicleCompartmentCapacityWeightInsertInput
}

input TourDraftStopDurationUnitInsertInput {
  symbol: String
}

type TourStopGeo {
  coordinates: [Float]
  type: String
}

type TransactionChannelExternalTargetMarketplace {
  key: String
}

enum PlaceSortByInput {
  CODE_ASC
  CODE_DESC
  GLN_ASC
  GLN_DESC
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
}

input TourDraftOwnerUpdateInput {
  workspace_unset: Boolean
  workspace: TourDraftOwnerWorkspaceRelationInput
}

input VehicleFeatureUpdateInput {
  name_unset: Boolean
  key: String
  key_unset: Boolean
  name: String
}

input VehicleBrandQueryInput {
  name_gt: String
  AND: [VehicleBrandQueryInput!]
  name_exists: Boolean
  name_lte: String
  name: String
  name_nin: [String]
  name_in: [String]
  name_ne: String
  name_gte: String
  name_lt: String
  OR: [VehicleBrandQueryInput!]
}

input ShippingMethodPickupPointInsertInput {
  place: ObjectId
}

input OrderLineItemInsertInput {
  _id: ObjectId
}

input TourLegPayloadVolumeUnitInsertInput {
  symbol: String
}

input ShipmentLineUpdateInput {
  weight: ShipmentLineWeightUpdateInput
  weight_unset: Boolean
  name: String
  name_unset: Boolean
  product: ObjectId
  product_unset: Boolean
  quantity: ShipmentLineQuantityUpdateInput
  quantity_unset: Boolean
}

input VehicleCapacityVolumeQueryInput {
  value_lte: Float
  value_in: [Float]
  unit: VehicleCapacityVolumeUnitQueryInput
  value: Float
  value_exists: Boolean
  value_gt: Float
  value_lt: Float
  OR: [VehicleCapacityVolumeQueryInput!]
  unit_exists: Boolean
  value_gte: Float
  AND: [VehicleCapacityVolumeQueryInput!]
  value_nin: [Float]
  value_ne: Float
}

input CatalogItemInventoryItemsRelationInput {
  create: [InventoryItemInsertInput]
  link: [ObjectId]
}

input OrderLinePriceUpdateInput {
  value: Float
  value_inc: Float
  value_unset: Boolean
  currency: OrderLinePriceCurrencyUpdateInput
  currency_unset: Boolean
}

input ShipmentLineWeightQueryInput {
  unit_in: [ObjectId]
  unit_exists: Boolean
  value_gte: Float
  unit: ObjectId
  value_gt: Float
  unit_lte: ObjectId
  value_exists: Boolean
  value_lte: Float
  OR: [ShipmentLineWeightQueryInput!]
  unit_gt: ObjectId
  value_lt: Float
  AND: [ShipmentLineWeightQueryInput!]
  unit_lt: ObjectId
  value_ne: Float
  value_nin: [Float]
  unit_nin: [ObjectId]
  unit_gte: ObjectId
  value: Float
  unit_ne: ObjectId
  value_in: [Float]
}

input TourStopQueryInput {
  actualTimeOfDeparture_lt: DateTime
  name_lt: String
  name_lte: String
  order_in: [Int]
  actualTimeOfArrival_nin: [DateTime]
  estimatedTimeOfArrival_lte: DateTime
  estimatedTimeOfDeparture_ne: DateTime
  order: Int
  OR: [TourStopQueryInput!]
  actualTimeOfDeparture_gt: DateTime
  order_lt: Int
  order_lte: Int
  delivery: TourStopDeliveryQueryInput
  actualTimeOfArrival_exists: Boolean
  order_exists: Boolean
  actualTimeOfArrival_lte: DateTime
  tasks_nin: [TourStopTaskQueryInput]
  actualTimeOfArrival_gte: DateTime
  name_ne: String
  estimatedTimeOfArrival_gt: DateTime
  duration: TourStopDurationQueryInput
  pickup: TourStopPickupQueryInput
  name_exists: Boolean
  actualTimeOfDeparture_lte: DateTime
  actualTimeOfArrival_lt: DateTime
  geo: TourStopGeoQueryInput
  estimatedTimeOfArrival_gte: DateTime
  estimatedTimeOfArrival: DateTime
  actualTimeOfArrival: DateTime
  tasks_in: [TourStopTaskQueryInput]
  estimatedTimeOfArrival_nin: [DateTime]
  duration_exists: Boolean
  place_exists: Boolean
  order_nin: [Int]
  actualTimeOfDeparture_gte: DateTime
  estimatedTimeOfDeparture: DateTime
  name_nin: [String]
  name_gte: String
  place_lt: ObjectId
  estimatedTimeOfArrival_in: [DateTime]
  estimatedTimeOfDeparture_gte: DateTime
  place: ObjectId
  geo_exists: Boolean
  name: String
  estimatedTimeOfDeparture_in: [DateTime]
  place_nin: [ObjectId]
  tasks: [TourStopTaskQueryInput]
  actualTimeOfDeparture_exists: Boolean
  pickup_exists: Boolean
  actualTimeOfArrival_gt: DateTime
  estimatedTimeOfDeparture_lt: DateTime
  order_gte: Int
  place_gt: ObjectId
  name_in: [String]
  place_lte: ObjectId
  actualTimeOfDeparture_in: [DateTime]
  AND: [TourStopQueryInput!]
  estimatedTimeOfDeparture_nin: [DateTime]
  delivery_exists: Boolean
  order_gt: Int
  place_in: [ObjectId]
  actualTimeOfArrival_in: [DateTime]
  actualTimeOfArrival_ne: DateTime
  estimatedTimeOfArrival_exists: Boolean
  estimatedTimeOfArrival_ne: DateTime
  estimatedTimeOfDeparture_lte: DateTime
  actualTimeOfDeparture_nin: [DateTime]
  place_ne: ObjectId
  tasks_exists: Boolean
  actualTimeOfDeparture_ne: DateTime
  estimatedTimeOfDeparture_exists: Boolean
  name_gt: String
  place_gte: ObjectId
  estimatedTimeOfDeparture_gt: DateTime
  actualTimeOfDeparture: DateTime
  estimatedTimeOfArrival_lt: DateTime
  order_ne: Int
}

enum ProductGroupSortByInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
}

input TourStopUpdateInput {
  duration_unset: Boolean
  order: Int
  estimatedTimeOfDeparture_unset: Boolean
  order_unset: Boolean
  place: ObjectId
  estimatedTimeOfDeparture: DateTime
  actualTimeOfDeparture_unset: Boolean
  estimatedTimeOfArrival: DateTime
  geo_unset: Boolean
  actualTimeOfDeparture: DateTime
  place_unset: Boolean
  actualTimeOfArrival_unset: Boolean
  duration: TourStopDurationUpdateInput
  actualTimeOfArrival: DateTime
  estimatedTimeOfArrival_unset: Boolean
  tasks: [TourStopTaskUpdateInput]
  delivery: TourStopDeliveryUpdateInput
  tasks_unset: Boolean
  pickup: TourStopPickupUpdateInput
  name_unset: Boolean
  order_inc: Int
  geo: TourStopGeoUpdateInput
  name: String
  delivery_unset: Boolean
  pickup_unset: Boolean
}

input TourStopDeliveryUpdateInput {
  shipments: [ObjectId]
  shipments_unset: Boolean
}

type WorkspaceAddressCountry {
  name: String
}

type TourStop {
  actualTimeOfArrival: DateTime
  actualTimeOfDeparture: DateTime
  delivery: TourStopDelivery
  duration: TourStopDuration
  estimatedTimeOfArrival: DateTime
  estimatedTimeOfDeparture: DateTime
  geo: TourStopGeo
  name: String
  order: Int
  pickup: TourStopPickup
  place: ObjectId
  tasks: [TourStopTask]
}

input ShipmentOrderRelationInput {
  link: ObjectId
  create: OrderInsertInput
}

input TourDraftValidationUpdateInput {
  status: String
  status_unset: Boolean
}

input ProductCategoryUpdateInput {
  ids: [String]
  name_unset: Boolean
  children: ProductCategoryChildrenRelationInput
  name: String
  id_unset: Boolean
  _id: ObjectId
  classification_unset: Boolean
  children_unset: Boolean
  id: String
  ids_unset: Boolean
  classification: ProductCategoryClassificationRelationInput
  hierarchyLevel_inc: Int
  hierarchyLevel_unset: Boolean
  _id_unset: Boolean
  hierarchyLevel: Int
}

input OrderUpdateInput {
  seller: OrderSellerUpdateInput
  shippingMethod_unset: Boolean
  shippingAddress_unset: Boolean
  lines_unset: Boolean
  _id: ObjectId
  broker: OrderBrokerUpdateInput
  _id_unset: Boolean
  shippingAddress: OrderShippingAddressUpdateInput
  confirmed: Boolean
  url_unset: Boolean
  lines: [OrderLineUpdateInput]
  broker_unset: Boolean
  confirmed_unset: Boolean
  url: String
  buyer: OrderBuyerUpdateInput
  date_unset: Boolean
  date: DateTime
  number: String
  shippingMethod: OrderShippingMethodRelationInput
  buyer_unset: Boolean
  seller_unset: Boolean
  number_unset: Boolean
}

type OrderLineQuantityUnit {
  code: String
  symbol: String
  text: String
}

input OrderSellerWorkspaceRelationInput {
  create: WorkspaceInsertInput
  link: ObjectId
}

input TourLegDestinationUpdateInput {
  place: ObjectId
  place_unset: Boolean
}

input OrderShippingAddressGeoUpdateInput {
  coordinates: [Float]
  coordinates_unset: Boolean
  type: String
  type_unset: Boolean
}

type TourDraftDistance {
  unit: TourDraftDistanceUnit
  value: Float
}

input TourLegPayloadUpdateInput {
  volume: TourLegPayloadVolumeUpdateInput
  volume_unset: Boolean
  weight: TourLegPayloadWeightUpdateInput
  weight_unset: Boolean
  shipments: [ObjectId]
  shipments_unset: Boolean
}

type ShipmentDeliveryCountry {
  name: String
}
